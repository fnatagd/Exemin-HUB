--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.7) ~  Much Love, Ferib 

]]--

local v0 = tonumber;
local v1 = string.byte;
local v2 = string.char;
local v3 = string.sub;
local v4 = string.gsub;
local v5 = string.rep;
local v6 = table.concat;
local v7 = table.insert;
local v8 = math.ldexp;
local v9 = getfenv or function()
	return _ENV;
end;
local v10 = setmetatable;
local v11 = pcall;
local v12 = select;
local v13 = unpack or table.unpack;
local v14 = tonumber;
local function v15(v16, v17, ...)
	local v18 = 1;
	local v19;
	v16 = v4(v3(v16, 5), "..", function(v30)
		if (v1(v30, 2) == 79) then
			local v86 = 0;
			while true do
				if (v86 == 0) then
					v19 = v0(v3(v30, 1, 1));
					return "";
				end
			end
		else
			local v87 = v2(v0(v30, 16));
			if v19 then
				local v106 = v5(v87, v19);
				v19 = nil;
				return v106;
			else
				return v87;
			end
		end
	end);
	local function v20(v31, v32, v33)
		if v33 then
			local v88 = (v31 / ((5 - (3 + 0)) ^ (v32 - 1))) % (((2 + 3) - (960 - (892 + 65))) ^ (((v33 - (1 - 0)) - (v32 - (2 - 1))) + 1 + 0));
			return v88 - (v88 % (620 - (555 + (152 - 88))));
		else
			local v89 = 1065 - (68 + 997);
			local v90;
			while true do
				if (v89 == (1270 - (226 + 1044))) then
					v90 = (933 - (857 + 74)) ^ (v32 - 1);
					return (((v31 % (v90 + v90)) >= v90) and (569 - (367 + (371 - 170)))) or (927 - ((392 - 178) + 713));
				end
			end
		end
	end
	local function v21()
		local v34 = v1(v16, v18, v18);
		v18 = v18 + 1;
		return v34;
	end
	local function v22()
		local v35, v36 = v1(v16, v18, v18 + (352 - (87 + 263)));
		v18 = v18 + (182 - (67 + 113));
		return (v36 * (188 + 68)) + v35;
	end
	local function v23()
		local v37, v38, v39, v40 = v1(v16, v18, v18 + (7 - 4));
		v18 = v18 + 4;
		return (v40 * 16777216) + (v39 * (48199 + 17337)) + (v38 * (1017 - 761)) + v37;
	end
	local function v24()
		local v41 = 952 - (802 + 150);
		local v42;
		local v43;
		local v44;
		local v45;
		local v46;
		local v47;
		while true do
			if (v41 == (0 - 0)) then
				v42 = v23();
				v43 = v23();
				v41 = 1 - 0;
			end
			if ((1 + 0) == v41) then
				v44 = 998 - (750 + 165 + 82);
				v45 = (v20(v43, 1, 56 - 36) * ((2 + 0) ^ 32)) + v42;
				v41 = 2 - 0;
			end
			if (v41 == (1189 - (1069 + 118))) then
				v46 = v20(v43, 21, 70 - 39);
				v47 = ((v20(v43, 804 - (201 + 571)) == (1 - 0)) and -(1 + 0)) or (1 - 0);
				v41 = 3 + 0;
			end
			if (3 == v41) then
				if (v46 == (791 - (368 + 423))) then
					if (v45 == ((1138 - (116 + 1022)) - 0)) then
						return v47 * ((74 - 56) - (10 + 8));
					else
						local v121 = 0 - 0;
						while true do
							if (v121 == (442 - (416 + 16 + 10))) then
								v46 = (10 - 7) - 2;
								v44 = 0 + 0;
								break;
							end
						end
					end
				elseif (v46 == (3621 - 1574)) then
					return ((v45 == (438 - ((514 - 369) + (1152 - (814 + 45))))) and (v47 * (1 / (430 - (44 + 386))))) or (v47 * NaN);
				end
				return v8(v47, v46 - (2509 - ((2458 - 1460) + 488))) * (v44 + (v45 / ((1 + 1) ^ (3 + 49))));
			end
		end
	end
	local function v25(v48)
		local v49 = 0 + 0;
		local v50;
		local v51;
		while true do
			if (v49 == (886 - (261 + 624))) then
				v50 = v3(v16, v18, (v18 + v48) - (1 - (766 - (745 + 21))));
				v18 = v18 + v48;
				v49 = 1082 - (351 + 669 + 60);
			end
			if (v49 == (1425 - (630 + 793))) then
				v51 = {};
				for v107 = 3 - 2, #v50 do
					v51[v107] = v2(v1(v3(v50, v107, v107)));
				end
				v49 = 14 - 11;
			end
			if ((0 + 0) == v49) then
				v50 = nil;
				if not v48 then
					v48 = v23();
					if (v48 == (0 - 0)) then
						return "";
					end
				end
				v49 = 1748 - ((2091 - 1331) + 987);
			end
			if (v49 == (1916 - ((7017 - 5228) + 124))) then
				return v6(v51);
			end
		end
	end
	local v26 = v23;
	local function v27(...)
		return {...}, v12("#", ...);
	end
	local function v28()
		local v52 = (function()
			return function(v91, v92, v93, v94, v95, v96, v97, v98)
				local v91 = (function()
					return 202 - (14 + 188);
				end)();
				local v92 = (function()
					return;
				end)();
				local v94 = (function()
					return;
				end)();
				while true do
					if (v91 == (675 - (534 + 141))) then
						local v113 = (function()
							return 0;
						end)();
						while true do
							if (v113 == 1) then
								v91 = (function()
									return #"<";
								end)();
								break;
							end
							if (v113 == (0 + 0)) then
								v92 = (function()
									return v93();
								end)();
								v94 = (function()
									return nil;
								end)();
								v113 = (function()
									return 1 + 0;
								end)();
							end
						end
					end
					if (v91 == #"|") then
						if (v92 == #" ") then
							v94 = (function()
								return v93() ~= (0 + 0);
							end)();
						elseif (v92 == (3 - 1)) then
							v94 = (function()
								return v95();
							end)();
						elseif (v92 ~= #"gha") then
						else
							v94 = (function()
								return v96();
							end)();
						end
						v97[v98] = (function()
							return v94;
						end)();
						break;
					end
				end
				return v91, v92, v93, v94, v95, v96, v97, v98;
			end;
		end)();
		local v53 = (function()
			return function(v99, v100, v101)
				local v102 = (function()
					return 0 - 0;
				end)();
				while true do
					if (v102 ~= (0 - 0)) then
					else
						local v115 = (function()
							return 0 + 0;
						end)();
						local v116 = (function()
							return;
						end)();
						while true do
							if ((0 + 0) == v115) then
								v116 = (function()
									return 396 - (115 + 281);
								end)();
								while true do
									if (v116 == 0) then
										local v126 = (function()
											return 0 - 0;
										end)();
										while true do
											if (v126 ~= (0 + 0)) then
											else
												v99[v100 - #":"] = (function()
													return v101();
												end)();
												return v99, v100, v101;
											end
										end
									end
								end
								break;
							end
						end
					end
				end
			end;
		end)();
		local v54 = (function()
			return {};
		end)();
		local v55 = (function()
			return {};
		end)();
		local v56 = (function()
			return {};
		end)();
		local v57 = (function()
			return {v54,v55,nil,v56};
		end)();
		local v58 = (function()
			return v23();
		end)();
		local v59 = (function()
			return {};
		end)();
		for v67 = #"[", v58 do
			FlatIdent_703C8, Type, v21, Cons, v24, v25, v59, v67 = (function()
				return v52(FlatIdent_703C8, Type, v21, Cons, v24, v25, v59, v67);
			end)();
		end
		v57[#"19("] = (function()
			return v21();
		end)();
		for v68 = #"{", v23() do
			local v69 = (function()
				return 0 - 0;
			end)();
			local v70 = (function()
				return;
			end)();
			while true do
				if (v69 == 0) then
					v70 = (function()
						return v21();
					end)();
					if (v20(v70, #",", #":") == (867 - (550 + 317))) then
						local v117 = (function()
							return 0 - 0;
						end)();
						local v118 = (function()
							return;
						end)();
						local v119 = (function()
							return;
						end)();
						local v120 = (function()
							return;
						end)();
						while true do
							if (v117 ~= 0) then
							else
								local v122 = (function()
									return 0;
								end)();
								while true do
									if (v122 == 0) then
										v118 = (function()
											return v20(v70, 2 - 0, #"-19");
										end)();
										v119 = (function()
											return v20(v70, #"xnxx", 6);
										end)();
										v122 = (function()
											return 2 - 1;
										end)();
									end
									if (v122 ~= (286 - (134 + 151))) then
									else
										v117 = (function()
											return 1;
										end)();
										break;
									end
								end
							end
							if (v117 ~= (1666 - (970 + 695))) then
							else
								local v123 = (function()
									return 0 - 0;
								end)();
								local v124 = (function()
									return;
								end)();
								while true do
									if (v123 ~= 0) then
									else
										v124 = (function()
											return 0;
										end)();
										while true do
											if (v124 ~= 1) then
											else
												v117 = (function()
													return 2;
												end)();
												break;
											end
											if ((1990 - (582 + 1408)) ~= v124) then
											else
												local v131 = (function()
													return 0;
												end)();
												while true do
													if (v131 ~= (3 - 2)) then
													else
														v124 = (function()
															return 1;
														end)();
														break;
													end
													if (v131 ~= 0) then
													else
														v120 = (function()
															return {v22(),v22(),nil,nil};
														end)();
														if (v118 == 0) then
															local v3595 = (function()
																return 0;
															end)();
															while true do
																if (0 == v3595) then
																	v120[#"91("] = (function()
																		return v22();
																	end)();
																	v120[#".dev"] = (function()
																		return v22();
																	end)();
																	break;
																end
															end
														elseif (v118 == #"]") then
															v120[#"asd"] = (function()
																return v23();
															end)();
														elseif (v118 == (7 - 5)) then
															v120[#"asd"] = (function()
																return v23() - (2 ^ (1840 - (1195 + 629)));
															end)();
														elseif (v118 ~= #"19(") then
														else
															local v5962 = (function()
																return 0 - 0;
															end)();
															local v5963 = (function()
																return;
															end)();
															while true do
																if ((241 - (187 + 54)) == v5962) then
																	v5963 = (function()
																		return 780 - (162 + 618);
																	end)();
																	while true do
																		if ((0 + 0) ~= v5963) then
																		else
																			v120[#"nil"] = (function()
																				return v23() - ((2 + 0) ^ (33 - 17));
																			end)();
																			v120[#"0313"] = (function()
																				return v22();
																			end)();
																			break;
																		end
																	end
																	break;
																end
															end
														end
														v131 = (function()
															return 1;
														end)();
													end
												end
											end
										end
										break;
									end
								end
							end
							if (v117 == (4 - 1)) then
								if (v20(v119, #"19(", #"nil") == #"}") then
									v120[#"xnxx"] = (function()
										return v59[v120[#"asd1"]];
									end)();
								end
								v54[v68] = (function()
									return v120;
								end)();
								break;
							end
							if (v117 == 2) then
								if (v20(v119, #"|", #":") == #" ") then
									v120[2] = (function()
										return v59[v120[1 + 1]];
									end)();
								end
								if (v20(v119, 2, 1638 - (1373 + 263)) ~= #">") then
								else
									v120[#"91("] = (function()
										return v59[v120[#"91("]];
									end)();
								end
								v117 = (function()
									return 3;
								end)();
							end
						end
					end
					break;
				end
			end
		end
		for v71 = #"\\", v23() do
			v55, v71, v28 = (function()
				return v53(v55, v71, v28);
			end)();
		end
		return v57;
	end
	local function v29(v61, v62, v63)
		local v64 = v61[1];
		local v65 = v61[1002 - (451 + 549)];
		local v66 = v61[1 + 2];
		return function(...)
			local v72 = v64;
			local v73 = v65;
			local v74 = v66;
			local v75 = v27;
			local v76 = 1;
			local v77 = -(1 - 0);
			local v78 = {};
			local v79 = {...};
			local v80 = v12("#", ...) - (1385 - (746 + 638));
			local v81 = {};
			local v82 = {};
			for v103 = 0, v80 do
				if ((v103 >= v74) or (573 > 3909)) then
					v78[v103 - v74] = v79[v103 + 1 + 0];
				else
					v82[v103] = v79[v103 + (1 - 0)];
				end
			end
			local v83 = (v80 - v74) + (342 - (218 + 123));
			local v84;
			local v85;
			while true do
				v84 = v72[v76];
				v85 = v84[1];
				if ((v85 <= ((11 + 1699) - (1535 + 46))) or (3895 < 727)) then
					if (v85 <= (64 + 0)) then
						if ((4321 == 4321) and (v85 <= (5 + 26))) then
							if (v85 <= (575 - (306 + 254))) then
								if (v85 <= 7) then
									if ((v85 <= 3) or (1048 >= 4594)) then
										if (v85 <= 1) then
											if ((275 <= 3544) and (v85 == (0 + 0))) then
												local v132;
												v82[v84[3 - 1]] = v63[v84[1470 - (899 + 568)]];
												v76 = v76 + 1;
												v84 = v72[v76];
												v82[v84[2 + 0]] = v82[v84[1 + 2]][v84[9 - 5]];
												v76 = v76 + (604 - (268 + 335));
												v84 = v72[v76];
												v82[v84[(677 - (271 + 114)) - (60 + 230)]] = v82[v84[575 - (426 + 146)]];
												v76 = v76 + 1;
												v84 = v72[v76];
												v132 = v84[1 + 1];
												v82[v132] = v82[v132](v82[v132 + (1457 - (282 + 1174))]);
												v76 = v76 + (812 - (569 + 242));
												v84 = v72[v76];
												v82[v84[5 - 3]]();
												v76 = v76 + 1;
												v84 = v72[v76];
												v76 = v84[1 + 2];
											else
												local v143;
												local v144, v145;
												local v146;
												v82[v84[1026 - (706 + 318)]] = v62[v84[1254 - (721 + 530)]];
												v76 = v76 + (1272 - (945 + 326));
												v84 = v72[v76];
												v82[v84[4 - 2]] = v82[v84[3 + 0]];
												v76 = v76 + (701 - (271 + 429));
												v84 = v72[v76];
												v82[v84[2]] = v63[v84[3 + 0]];
												v76 = v76 + 1;
												v84 = v72[v76];
												v82[v84[1502 - ((6461 - 5053) + 92)]] = v82[v84[1089 - (461 + 625)]][v84[1292 - (993 + 295)]];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[2]] = v84[1174 - (418 + 753)];
												v76 = v76 + (860 - (240 + 619)) + 0;
												v84 = v72[v76];
												v82[v84[1 + 1]] = v84[3 + 0];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[1 + 1]] = v84[532 - (406 + 63 + 60)];
												v76 = v76 + (1770 - (1749 + 20));
												v84 = v72[v76];
												v146 = v84[1 + 1];
												v82[v146] = v82[v146](v13(v82, v146 + (1323 - (1249 + 73)), v84[2 + 1]));
												v76 = v76 + ((2021 - 875) - (466 + 679));
												v84 = v72[v76];
												v82[v84[4 - 2]] = v62[v84[8 - 5]];
												v76 = v76 + 1;
												v84 = v72[v76];
												v82[v84[1902 - ((963 - (509 + 348)) + 1794)]] = v82[v84[1 + 2]][v84[2 + 2]];
												v76 = v76 + (2 - 1);
												v84 = v72[v76];
												v82[v84[5 - 3]] = v82[v84[7 - 4]][v84[118 - (4 + 110)]];
												v76 = v76 + (585 - (57 + 527));
												v84 = v72[v76];
												v82[v84[1429 - (41 + 1386)]] = v82[v84[106 - (17 + 86)]][v84[4]];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[1 + 1]] = v82[v84[6 - (1381 - (1014 + 364))]] * v82[v84[11 - 7]];
												v76 = v76 + (167 - (122 + 44));
												v84 = v72[v76];
												v82[v84[2 - 0]] = v82[v84[(24 - 15) - 6]] / v84[(5 - 1) + 0];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[2]] = v82[v84[5 - 2]] + v82[v84[69 - (30 + 35)]];
												v76 = v76 + 1 + (0 - 0);
												v84 = v72[v76];
												v82[v84[(2560 - 1301) - (1043 + 214)]] = v63[v84[3]];
												v76 = v76 + 1;
												v84 = v72[v76];
												v82[v84[7 - 5]] = v82[v84[(907 + 308) - (323 + 310 + 579)]][v84[4]];
												v76 = v76 + (2 - 1);
												v84 = v72[v76];
												v82[v84[2]] = v63[v84[3]];
												v76 = v76 + (581 - (361 + 219));
												v84 = v72[v76];
												v82[v84[322 - (53 + 267)]] = v82[v84[1 + 2]][v84[417 - (15 + 398)]];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[2]] = v82[v84[3]];
												v76 = v76 + 1;
												v84 = v72[v76];
												v146 = v84[5 - 3];
												v82[v146] = v82[v146](v82[v146 + (983 - (18 + 964))]);
												v76 = v76 + (3 - 2);
												v84 = v72[v76];
												v82[v84[2 + 0]] = v84[2 + (1725 - (1565 + 159))];
												v76 = v76 + ((696 + 155) - (20 + 830));
												v84 = v72[v76];
												v82[v84[2 + 0]] = v84[129 - (116 + 10)];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v146 = v84[740 - (542 + 196)];
												v144, v145 = v75(v82[v146](v13(v82, v146 + 1, v84[3])));
												v77 = (v145 + v146) - 1;
												v143 = 0 - 0;
												for v3467 = v146, v77 do
													v143 = v143 + 1 + 0;
													v82[v3467] = v144[v143];
												end
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v146 = v84[4 - 2];
												v82[v146](v13(v82, v146 + 1 + 0, v77));
												v76 = v76 + (2 - 1);
												v84 = v72[v76];
												v82[v84[4 - 2]] = v63[v84[1554 - (1126 + 425)]];
												v76 = v76 + (406 - (118 + 79 + 208));
												v84 = v72[v76];
												v82[v84[(25 - 18) - 5]] = v82[v84[1124 - ((202 - 84) + 1003)]][v84[1867 - (1445 + 418)]];
												v76 = v76 + ((6 - 4) - 1);
												v84 = v72[v76];
												v82[v84[2]]();
												v76 = v76 + (378 - (142 + 235));
												v84 = v72[v76];
												v82[v84[9 - 7]] = v62[v84[1 + 2]];
												v76 = v76 + (978 - (553 + 424));
												v84 = v72[v76];
												v82[v84[(3 + 0) - 1]] = v82[v84[3 + 0]];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[2 + 0]] = v63[v84[(1415 - (26 + 1387)) + 1]];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[4 - 2]] = v82[v84[7 - 4]][v84[4]];
												v76 = v76 + (2 - 1);
												v84 = v72[v76];
												v82[v84[1 + 1]] = v84[14 - 11];
												v76 = v76 + (754 - (239 + 514));
												v84 = v72[v76];
												v82[v84[1 + 1]] = v84[3];
												v76 = v76 + (1330 - (797 + 532));
												v84 = v72[v76];
												v82[v84[2]] = v84[3 + 0 + 0];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v146 = v84[4 - 2];
												v82[v146] = v82[v146](v13(v82, v146 + 1, v84[1205 - (373 + 829)]));
												v76 = v76 + ((72 + 660) - (476 + 255));
												v84 = v72[v76];
												v82[v84[1132 - (328 + 41 + 761)]] = v62[v84[2 + 1]];
												v76 = v76 + (1 - 0);
												v84 = v72[v76];
												v82[v84[(806 - (355 + 448)) - 1]] = v82[v84[241 - (64 + (435 - (246 + 15)))]][v84[1 + 3]];
												v76 = v76 + (1 - (0 + 0));
												v84 = v72[v76];
												v82[v84[338 - (144 + 74 + 118)]] = v82[v84[219 - (42 + 174)]][v84[4 + 0]];
												v76 = v76 + 1 + 0 + 0;
												v84 = v72[v76];
												v82[v84[1 + 1]] = v82[v84[1507 - (363 + 1141)]][v84[1584 - (1183 + 397)]];
												v76 = v76 + 1;
												v84 = v72[v76];
												v82[v84[5 - 3]] = v82[v84[3 + 0]] * v82[v84[3 + 1]];
												v76 = v76 + (1976 - (1913 + 62));
												v84 = v72[v76];
												v82[v84[2 + 0]] = v82[v84[3]] / v84[10 - 6];
												v76 = v76 + (1934 - (565 + 1368));
												v84 = v72[v76];
												v82[v84[7 - 5]] = v82[v84[1664 - (307 + 1170 + 184)]] + v82[v84[4]];
												v76 = v76 + 1;
												v84 = v72[v76];
												v82[v84[2 - 0]] = v63[v84[1 + 2]];
												v76 = v76 + 1 + (1119 - (391 + 728));
												v84 = v72[v76];
												v82[v84[2]] = v82[v84[3]][v84[860 - (564 + 292)]];
												v76 = v76 + (1 - 0);
												v84 = v72[v76];
												v82[v84[5 - 3]] = v63[v84[307 - (244 + 60)]];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[478 - (41 + 435)]] = v82[v84[3]][v84[1005 - (938 + 63)]];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[1127 - (936 + 189)]] = v82[v84[1 + 2]];
												v76 = v76 + (1614 - (1565 + 48));
												v84 = v72[v76];
												v146 = v84[2 + 0];
												v82[v146] = v82[v146](v82[v146 + (1139 - ((1877 - (594 + 501)) + 356))]);
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[2]] = v84[(1407 - (730 + 407)) - (176 + 91)];
												v76 = v76 + (2 - 1);
												v84 = v72[v76];
												v82[v84[2 - 0]] = v84[1095 - (975 + 117)];
												v76 = v76 + 1;
												v84 = v72[v76];
												v146 = v84[1877 - (157 + 1718)];
												v144, v145 = v75(v82[v146](v13(v82, v146 + 1, v84[3 + 0])));
												v77 = (v145 + v146) - (3 - 2);
												v143 = (0 + 0) - 0;
												for v3470 = v146, v77 do
													v143 = v143 + (1019 - (697 + 321));
													v82[v3470] = v144[v143];
												end
												v76 = v76 + 1;
												v84 = v72[v76];
												v146 = v84[(9 - 4) - 3];
												v82[v146](v13(v82, v146 + (1 - 0), v77));
												v76 = v76 + ((4 - 2) - (1 - 0));
												v84 = v72[v76];
												v82[v84[1 + 1]] = v84[5 - 2];
											end
										elseif (v85 == (5 - 3)) then
											local v214;
											local v215;
											local v214, v216;
											local v217;
											local v218;
											v82[v84[1229 - (322 + 905)]] = v63[v84[614 - (602 + 5 + 4)]];
											v76 = v76 + (1190 - (449 + 740));
											v84 = v72[v76];
											v218 = v84[874 - (826 + 46)];
											v217 = v82[v84[950 - (245 + 702)]];
											v82[v218 + 1] = v217;
											v82[v218] = v217[v84[4]];
											v76 = v76 + (3 - 2);
											v84 = v72[v76];
											v218 = v84[1 + 1];
											v214, v216 = v75(v82[v218](v82[v218 + ((3800 - (438 + 1463)) - (260 + 1638))]));
											v77 = (v216 + v218) - 1;
											v215 = 440 - (382 + 58);
											for v3473 = v218, v77 do
												local v3474 = 0 - 0;
												while true do
													if (v3474 == 0) then
														v215 = v215 + 1 + 0;
														v82[v3473] = v214[v215];
														break;
													end
												end
											end
											v76 = v76 + 1;
											v84 = v72[v76];
											v218 = v84[3 - 1];
											v214 = {v82[v218](v13(v82, v218 + (1206 - (902 + 303)), v77))};
											v215 = 0 - 0;
											for v3475 = v218, v84[9 - 5] do
												local v3476 = 0;
												while true do
													if (v3476 == (0 + 0 + 0)) then
														v215 = v215 + (1691 - (1121 + 569));
														v82[v3475] = v214[v215];
														break;
													end
												end
											end
											v76 = v76 + ((1832 - (900 + 717)) - (22 + 192));
											v84 = v72[v76];
											v76 = v84[3];
										else
											local v230 = (1819 - (820 + 316)) - (483 + (459 - 259));
											local v231;
											while true do
												if ((v230 == ((3270 - (719 + 1079)) - (1404 + 59))) or (2947 < 649)) then
													v76 = v76 + (2 - (2 - 1));
													v84 = v72[v76];
													v82[v84[2 - 0]] = v82[v84[768 - (468 + 297)]] + v84[566 - (334 + 228)];
													v76 = v76 + 1;
													v84 = v72[v76];
													v231 = v84[6 - 4];
													v230 = 23 - 13;
												end
												if (v230 == (10 - 4)) then
													v76 = v76 + 1;
													v84 = v72[v76];
													v82[v84[1 + 1]] = v63[v84[239 - (141 + 95)]];
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v82[v84[4 - (2 - 0)]] = v82[v84[6 - 3]][v84[1 + 3]];
													v230 = 19 - 12;
												end
												if ((3662 > 1591) and (v230 == (2 + 4 + 2))) then
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v82[v84[2 - 0]] = v62[v84[1 + 1 + 1]];
													v76 = v76 + (164 - (92 + 71));
													v84 = v72[v76];
													v82[v84[1 + 1]] = v82[v84[4 - 1]][v84[769 - (574 + 191)]];
													v230 = 8 + (1 - 0);
												end
												if ((v230 == (7 - 4)) or (2854 == 1793)) then
													v84 = v72[v76];
													v82[v84[(205 - (148 + 55)) + (1453 - (914 + 539))]] = v82[v84[3]][v84[853 - (254 + 595)]];
													v76 = v76 + (127 - (55 + 71));
													v84 = v72[v76];
													v82[v84[2 - 0]] = v82[v84[2 + 1]] + v84[1794 - (573 + 1217)];
													v76 = v76 + (2 - 1);
													v230 = 1 + 3;
												end
												if ((3667 > 342) and (v230 == (1 - 0))) then
													v84 = v72[v76];
													v82[v84[941 - (714 + 225)]] = v82[v84[8 - 5]][v84[5 - 1]];
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v82[v84[2 - 0]] = v62[v84[809 - ((678 - (253 + 307)) + 688)]];
													v76 = v76 + 1;
													v230 = 50 - (25 + 23);
												end
												if (v230 == 0) then
													v231 = nil;
													v82[v84[1 + 1]] = v82[v84[3]][v84[1890 - (927 + (2025 - (926 + 140)))]];
													v76 = v76 + 1;
													v84 = v72[v76];
													v82[v84[6 - 4]] = v63[v84[735 - (16 + 716)]];
													v76 = v76 + ((1059 - (331 + 727)) - 0);
													v230 = 98 - (11 + 86);
												end
												if (5 == v230) then
													v76 = v76 + (1383 - (1014 + 368));
													v84 = v72[v76];
													v82[v84[(1581 - (1035 + 542)) - 2]] = v62[v84[288 - (175 + 110)]];
													v76 = v76 + (2 - 1);
													v84 = v72[v76];
													v82[v84[9 - 7]] = v82[v84[3]][v84[1800 - (503 + 1293)]];
													v230 = 16 - 10;
												end
												if ((2017 <= 3950) and (v230 == (8 + 3))) then
													v76 = v84[81 - (44 + 34)];
													break;
												end
												if (v230 == (1065 - (810 + 251))) then
													v84 = v72[v76];
													v231 = v84[2 + 0];
													v82[v231] = v82[v231](v13(v82, v231 + 1 + (0 - 0), v84[3 + 0]));
													v76 = v76 + (534 - (43 + 490));
													v84 = v72[v76];
													v82[v84[735 - (711 + 22)]][v84[11 - 8]] = v82[v84[863 - (240 + 619)]];
													v230 = 2 + 3;
												end
												if (v230 == (15 - 5)) then
													v82[v231] = v82[v231](v13(v82, v231 + 1, v84[3]));
													v76 = v76 + 1 + 0 + 0;
													v84 = v72[v76];
													v82[v84[1746 - (1344 + 400)]][v84[408 - (255 + 150)]] = v82[v84[4 + 0 + 0]];
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v230 = 46 - 35;
												end
												if (v230 == ((20 - 14) - 4)) then
													v84 = v72[v76];
													v82[v84[2]] = v82[v84[1742 - (404 + 1335)]][v84[410 - (183 + 223)]];
													v76 = v76 + 1;
													v84 = v72[v76];
													v82[v84[2 - 0]] = v62[v84[(3 - 1) + 1]];
													v76 = v76 + 1 + 0;
													v230 = 340 - (10 + 327);
												end
												if ((4694 >= 4644) and ((5 + 2) == v230)) then
													v76 = v76 + (339 - (118 + 220));
													v84 = v72[v76];
													v82[v84[2]] = v62[v84[1 + 0 + 2]];
													v76 = v76 + (450 - (108 + 341));
													v84 = v72[v76];
													v82[v84[1 + (669 - (355 + 313))]] = v82[v84[3]][v84[16 - 12]];
													v230 = 1501 - (711 + 782);
												end
											end
										end
									elseif (v85 <= (9 - 4)) then
										if ((v85 == (473 - (270 + 199))) or (1341 >= 4923)) then
											local v232;
											local v233;
											local v232, v234;
											local v235;
											local v236;
											v82[v84[1 + 1]] = v63[v84[1822 - (580 + 1239)]];
											v76 = v76 + ((1 + 1) - (2 - 1));
											v84 = v72[v76];
											v236 = v84[2 + (0 - 0)];
											v235 = v82[v84[3]];
											v82[v236 + 1 + 0] = v235;
											v82[v236] = v235[v84[2 + 2]];
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v236 = v84[2];
											v232, v234 = v75(v82[v236](v82[v236 + 1 + 0]));
											v77 = (v234 + v236) - 1;
											v233 = 1167 - (645 + 522);
											for v3477 = v236, v77 do
												v233 = v233 + (1791 - (1010 + 780));
												v82[v3477] = v232[v233];
											end
											v76 = v76 + 1;
											v84 = v72[v76];
											v236 = v84[2 + 0];
											v232 = {v82[v236](v13(v82, v236 + (2 - 1), v77))};
											v233 = (1705 + 131) - (1045 + 791);
											for v3480 = v236, v84[9 - 5] do
												v233 = v233 + 1;
												v82[v3480] = v232[v233];
											end
											v76 = v76 + ((1866 - (762 + 1103)) - (0 + 0));
											v84 = v72[v76];
											v76 = v84[3];
										else
											local v248;
											local v249;
											v249 = v84[507 - (351 + 154)];
											v248 = v82[v84[1577 - (1281 + 293)]];
											v82[v249 + (267 - (28 + 238))] = v248;
											v82[v249] = v248[v84[8 - 4]];
											v76 = v76 + (1560 - (1381 + 40 + 138));
											v84 = v72[v76];
											v82[v84[2]] = v62[v84[2 + 1]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[1569 - (1491 + 76)]] = v82[v84[3 + 0]][v84[2 + 2]];
											v76 = v76 + (3 - 2);
											v84 = v72[v76];
											v82[v84[2 + 0 + 0]] = v82[v84[473 - (381 + 89)]][v84[4]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[2 + 0]] = v82[v84[4 - (1 + 0)]][v84[(1922 - (94 + 668)) - (1074 + 82)]];
											v76 = v76 + (1 - 0);
											v84 = v72[v76];
											v249 = v84[1786 - (214 + 1570)];
											v82[v249] = v82[v249](v13(v82, v249 + (1456 - (990 + 465)), v84[2 + (1410 - (36 + 1373))]));
											v76 = v76 + (1102 - (58 + 1043)) + 0;
											v84 = v72[v76];
											v82[v84[2 + 0]] = v63[v84[11 - 8]];
											v76 = v76 + (1727 - (1668 + 58));
											v84 = v72[v76];
											v82[v84[2]] = v82[v84[629 - (512 + 114)]][v84[4]];
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v82[v84[3 - 1]] = v63[v84[10 - 7]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[1 + (4 - 3)]] = v82[v84[3 + 0]][v84[13 - 9]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[2]] = v82[v84[3]][v84[1998 - ((171 - 62) + 1885)]];
											v76 = v76 + (1470 - (1269 + 200));
											v84 = v72[v76];
											v82[v84[2]] = v82[v84[5 - 2]][v84[4]];
											v76 = v76 + (816 - (98 + 717));
											v84 = v72[v76];
											v249 = v84[4 - 2];
											v82[v249] = v82[v249](v13(v82, v249 + (827 - (802 + (67 - 43))), v84[5 - 2]));
											v76 = v76 + (1 - 0);
											v84 = v72[v76];
											v82[v84[(3 - 2) + 1]] = v63[v84[3 + 0]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[1 + 1]] = v82[v84[(236 - (35 + 193)) - 5]][v84[13 - 9]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[1 + 1]] = v82[v84[2 + 1]][v84[4 + 0]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[2 + 0]] = v82[v84[(9 - 7) + 1]][v84[1437 - (797 + 636)]];
											v76 = v76 + (4 - 3);
											v84 = v72[v76];
											v249 = v84[2];
											v82[v249] = v82[v249](v13(v82, v249 + (1620 - (1427 + 192)), v84[3]));
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[1 + 1]] = v82[v84[6 - (655 - (242 + 410))]] - v82[v84[4]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[2]] = v82[v84[2 + 1]][v84[330 - (192 + 134)]];
											v76 = v76 + (1277 - (316 + 960));
											v84 = v72[v76];
											v82[v84[2 + 0]] = v84[3 + 0];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[7 - 5]] = v63[v84[(2049 - (1285 + 210)) - (83 + 468)]];
											v76 = v76 + (1807 - (1202 + 604));
											v84 = v72[v76];
											v82[v84[1741 - (1179 + 560)]] = v82[v84[(3 + 10) - 10]][v84[6 - 2]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v249 = v84[5 - 3];
											v82[v249] = v82[v249](v13(v82, v249 + (326 - (45 + 280)), v84[3 + 0]));
										end
									elseif (v85 > (6 + 0)) then
										if ((v82[v84[2]] ~= v82[v84[(6 - 4) + (3 - 1)]]) or (2903 == 389)) then
											v76 = v76 + 1 + 0;
										else
											v76 = v84[1 + 2];
										end
									else
										local v288;
										local v289;
										v289 = v84[3 - 1];
										v288 = v82[v84[3]];
										v82[v289 + (1912 - (340 + 1571))] = v288;
										v82[v289] = v288[v84[2 + 2]];
										v76 = v76 + (1773 - (1733 + 39));
										v84 = v72[v76];
										v289 = v84[5 - 3];
										v82[v289] = v82[v289](v82[v289 + (1035 - (125 + 909))]);
										v76 = v76 + (1949 - (1096 + 852));
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[3 - 0]];
										v76 = v76 + 1 + (1216 - (262 + 954));
										v84 = v72[v76];
										v82[v84[514 - (409 + 103)]] = v63[v84[239 - (46 + 190)]];
										v76 = v76 + (96 - (51 + 44));
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[1 + 2]][v84[1321 - (1114 + 203)]];
										v76 = v76 + (727 - (228 + 498));
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[3]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v62[v84[2 + 1]];
										v76 = v76 + (664 - (174 + 489));
										v84 = v72[v76];
										v289 = v84[5 - 3];
										v82[v289] = v82[v289](v13(v82, v289 + 1, v84[1908 - (830 + 1075)]));
										v76 = v76 + 1;
										v84 = v72[v76];
										if v82[v84[526 - (303 + 221)]] then
											v76 = v76 + 1;
										else
											v76 = v84[3];
										end
									end
								elseif ((v85 <= (43 - 32)) or (4946 <= 1828)) then
									if (v85 <= (1278 - ((619 - 388) + 1020 + 18))) then
										if (v85 > 8) then
											local v304 = 0;
											local v305;
											while true do
												if (v304 == 7) then
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v82[v84[1164 - (171 + 991)]] = v62[v84[3]];
													v76 = v76 + (4 - 3);
													v84 = v72[v76];
													v82[v84[2]] = v82[v84[3]][v84[10 - 6]];
													v304 = 19 - 11;
												end
												if ((3487 >= 3004) and (v304 == (3 + 0))) then
													v84 = v72[v76];
													v82[v84[6 - 4]] = v82[v84[8 - 5]][v84[4]];
													v76 = v76 + (1 - 0);
													v84 = v72[v76];
													v82[v84[6 - 4]] = v62[v84[3]];
													v76 = v76 + 1;
													v304 = 1252 - (111 + 1137);
												end
												if ((4442 > 3482) and (v304 == (171 - (91 + 67)))) then
													v76 = v84[8 - 5];
													break;
												end
												if (11 == v304) then
													v76 = v76 + (3 - 2) + 0;
													v84 = v72[v76];
													v82[v84[2]] = v82[v84[526 - (423 + 66 + 34)]] + v82[v84[1 + 3]];
													v76 = v76 + 1;
													v84 = v72[v76];
													v305 = v84[(2 + 3) - 3];
													v304 = 12;
												end
												if ((1779 > 308) and (v304 == (3 + 1))) then
													v84 = v72[v76];
													v82[v84[773 - (326 + 445)]] = v82[v84[(2 + 11) - 10]] * v84[4];
													v76 = v76 + 1;
													v84 = v72[v76];
													v82[v84[2]] = v82[v84[6 - 3]] + v82[v84[9 - 5]];
													v76 = v76 + 1;
													v304 = 716 - (530 + 181);
												end
												if (v304 == (893 - (614 + 267))) then
													v82[v305] = v82[v305](v13(v82, v305 + ((1875 - (1696 + 146)) - (19 + 13)), v84[4 - 1]));
													v76 = v76 + (2 - 1);
													v84 = v72[v76];
													v82[v84[5 - 3]][v84[3]] = v82[v84[2 + 2]];
													v76 = v76 + ((1907 - (1835 + 71)) - 0);
													v84 = v72[v76];
													v304 = 26 - 13;
												end
												if ((1813 - (1293 + 519)) == v304) then
													v84 = v72[v76];
													v82[v84[3 - (635 - (58 + 576))]] = v82[v84[7 - 4]][v84[(4 + 3) - 3]];
													v76 = v76 + 1;
													v84 = v72[v76];
													v82[v84[8 - 6]] = v62[v84[3]];
													v76 = v76 + (2 - 1);
													v304 = 2 + 0;
												end
												if ((309 == 309) and ((4 - 2) == v304)) then
													v84 = v72[v76];
													v82[v84[2 + 0]] = v82[v84[3]] - v82[v84[1 + 3]];
													v76 = v76 + (2 - 1);
													v84 = v72[v76];
													v82[v84[1 + 1]] = v62[v84[1 + 2]];
													v76 = v76 + (81 - (27 + 53)) + 0;
													v304 = (2828 - (22 + 1707)) - (709 + 387);
												end
												if ((1867 - (673 + 1185)) == v304) then
													v76 = v76 + (2 - 1);
													v84 = v72[v76];
													v82[v84[6 - 4]] = v62[v84[3]];
													v76 = v76 + (1 - 0);
													v84 = v72[v76];
													v82[v84[2 + 0]] = v82[v84[3]][v84[3 + 1]];
													v304 = 13 - 3;
												end
												if (v304 == (9 - 3)) then
													v76 = v76 + (891 - (627 + 263)) + (0 - 0);
													v84 = v72[v76];
													v82[v84[3 - 1]] = v63[v84[3]];
													v76 = v76 + 1;
													v84 = v72[v76];
													v82[v84[(3 - 0) - 1]] = v82[v84[(4972 - 3089) - (446 + (2069 - 635))]][v84[1287 - (1040 + 243)]];
													v304 = 20 - (1199 - (255 + 931));
												end
												if ((v304 == (1855 - (559 + 1288))) or (3712 <= 2915)) then
													v76 = v76 + (1932 - (609 + 1322));
													v84 = v72[v76];
													v82[v84[2]] = v62[v84[457 - (13 + 441)]];
													v76 = v76 + (3 - (5 - 3));
													v84 = v72[v76];
													v82[v84[5 - (1391 - (507 + 881))]] = v82[v84[(17 - 3) - (21 - 10)]] + v82[v84[1 + 3]];
													v304 = 32 - 23;
												end
												if (v304 == 10) then
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v82[v84[2]] = v62[v84[2 + 1]];
													v76 = v76 + 1;
													v84 = v72[v76];
													v82[v84[(17 - 12) - 3]] = v82[v84[2 + 1]] * v84[7 - 3];
													v304 = (1611 - (475 + 1128)) + 3;
												end
												if (v304 == (3 + 2)) then
													v84 = v72[v76];
													v305 = v84[2 + 0];
													v82[v305] = v82[v305](v13(v82, v305 + 1 + 0, v84[(6 - 3) + 0]));
													v76 = v76 + (434 - (153 + 280));
													v84 = v72[v76];
													v82[v84[5 - 3]][v84[3 + (0 - 0)]] = v82[v84[(6 - 4) + 2]];
													v304 = 6;
												end
												if (((0 + 0 + 0) == v304) or (199 >= 4995)) then
													v305 = nil;
													v82[v84[2]] = v82[v84[3]][v84[4 + 0]];
													v76 = v76 + 1;
													v84 = v72[v76];
													v82[v84[2 + 0]] = v62[v84[4 - 1]];
													v76 = v76 + 1 + 0;
													v304 = 668 - (89 + 578);
												end
											end
										else
											local v306 = 0 + (357 - (110 + 247));
											while true do
												if (v306 == (8 - 4)) then
													v82[v84[1051 - (572 + 477)]] = v82[v84[(1247 - (1109 + 137)) + 2]][v84[3 + 1]];
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v82[v84[(427 - 339) - (84 + 2)]] = v82[v84[4 - (1 + 0)]] * v84[3 + 1 + 0];
													v76 = v76 + ((2601 - 1758) - (497 + 108 + 237));
													v84 = v72[v76];
													v306 = 1 + 4;
												end
												if ((1956 <= 3284) and (v306 == (2 + 0))) then
													v82[v84[1 + 1]][v84[(338 + 998) - (605 + 728)]] = v82[v84[3 + 1]];
													v76 = v76 + (1 - 0);
													v84 = v72[v76];
													v82[v84[1 + 1]] = v62[v84[10 - (20 - 13)]];
													v76 = v76 + 1;
													v84 = v72[v76];
													v306 = 3;
												end
												if (v306 == 0) then
													v82[v84[2 + 0]] = v82[v84[7 - (3 + 1)]][v84[4 + 0]];
													v76 = v76 + ((277 + 213) - (457 + 32));
													v84 = v72[v76];
													v82[v84[1 + 1]] = v62[v84[(1374 + 31) - (832 + 570)]];
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v306 = 1 + 0;
												end
												if (v306 == (3 - 2)) then
													v82[v84[1 + 1]] = v82[v84[799 - (588 + 208)]][v84[10 - 6]];
													v76 = v76 + (1801 - (884 + 916));
													v84 = v72[v76];
													v82[v84[3 - 1]] = v82[v84[2 + 1]] * v84[657 - (232 + 421)];
													v76 = v76 + (1890 - (1569 + 320));
													v84 = v72[v76];
													v306 = 1 + 1;
												end
												if (v306 == (1 + 4)) then
													v82[v84[6 - 4]][v84[(294 + 314) - (316 + 289)]] = v82[v84[10 - 6]];
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v76 = v84[1456 - (666 + 787)];
													break;
												end
												if (v306 == (428 - (360 + 65))) then
													v82[v84[2 + 0]] = v82[v84[(965 - 708) - (79 + 175)]][v84[4]];
													v76 = v76 + (1 - 0);
													v84 = v72[v76];
													v82[v84[2 + 0]] = v62[v84[3 + 0]];
													v76 = v76 + (2 - (1 + 0));
													v84 = v72[v76];
													v306 = 7 - 3;
												end
											end
										end
									elseif ((v85 == 10) or (1350 > 3856)) then
										v82[v84[901 - (503 + 396)]] = v82[v84[184 - (92 + 89)]] * v82[v84[4]];
									else
										v82[v84[(11 - 8) - 1]] = v63[v84[2 + 1]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[(207 - (192 + 13)) + 0]] = v82[v84[11 - 8]][v84[1 + 3]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[3]][v84[2 + (759 - (585 + 172))]];
										v76 = v76 + (2 - (2 - 1));
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[1 + 2]][v84[5 - (797 - (76 + 720))]];
										v76 = v76 + (1245 - (485 + 759));
										v84 = v72[v76];
										v82[v84[(10 - 6) - 2]] = v82[v84[1192 - (442 + 747)]][v84[4]];
										v76 = v76 + ((1268 - (45 + 87)) - ((1329 - 497) + 303));
										v84 = v72[v76];
										v82[v84[(1857 - 909) - (88 + 858)]][v84[3]] = v82[v84[2 + 2]];
										v76 = v76 + 1 + 0 + 0;
										v84 = v72[v76];
										do
											return;
										end
									end
								elseif ((v85 <= (1 + 12)) or (1213 > 4338)) then
									if (v85 == (801 - ((2681 - 1915) + 23))) then
										local v321;
										v82[v84[9 - (6 + 1)]] = v63[v84[(2 + 1) - 0]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[4 - 2]] = v82[v84[10 - 7]][v84[1077 - (1036 + 37)]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[(1288 - (61 + 1222)) - 2]][v84[4 + 0]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1482 - ((2144 - (628 + 875)) + 839)]] = v82[v84[916 - (910 + 3)]][v84[9 - 5]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1686 - (1466 + 195 + 23)]] = v82[v84[2 + 1]][v84[1152 - (556 + 592)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[810 - (329 + 479)]] = v63[v84[857 - (174 + 680)]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[3 - (1 - 0)]] = v82[v84[3 + 0]][v84[4]];
										v76 = v76 + (740 - (396 + 343));
										v84 = v72[v76];
										v82[v84[1 + 1]] = v84[3];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1479 - (29 + 1448)]] = v84[1392 - (135 + 1254)];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[9 - 7]] = v84[2 + 1];
										v76 = v76 + 1;
										v84 = v72[v76];
										v321 = v84[1529 - (389 + 1138)];
										v82[v321] = v82[v321](v13(v82, v321 + (2 - 1), v84[3]));
										v76 = v76 + ((2497 - (590 + 1332)) - (102 + 472));
										v84 = v72[v76];
										v82[v84[2 + 0]][v84[2 + 1]] = v82[v84[4]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										do
											return;
										end
									else
										v82[v84[1547 - (320 + 1225)]] = v82[v84[5 - 2]][v84[4]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1466 - (157 + (2783 - 1476))]] = v82[v84[(6254 - 4392) - (821 + 1038)]][v84[9 - (12 - 7)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[3 - 1]] = v82[v84[3]][v84[2 + 2]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[1028 - (834 + 192)]] = v82[v84[1 + (1628 - (173 + 1453))]][v84[(850 - (237 + 611)) + 2]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2 - 0]][v84[307 - (300 + 2 + 2)]] = v82[v84[2 + 2]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v76 = v84[7 - 4];
									end
								elseif (v85 == (376 - (112 + 250))) then
									v63[v84[2 + 1]] = v82[v84[4 - 2]];
								else
									local v361 = 0 + 0;
									local v362;
									while true do
										if ((v361 == (0 + 0)) or (301 > 724)) then
											v362 = v84[2];
											v82[v362](v13(v82, v362 + 1 + 0, v77));
											break;
										end
									end
								end
							elseif (v85 <= (12 + 11)) then
								if (v85 <= (15 + 4)) then
									if (v85 <= (6 + 11)) then
										if (v85 == (1430 - (1001 + 413))) then
											local v363;
											local v364;
											v82[v84[4 - 2]] = v82[v84[3]][v84[15 - 11]];
											v76 = v76 + (883 - (244 + 638));
											v84 = v72[v76];
											v364 = v84[695 - (627 + 66)];
											v363 = v82[v84[8 - 5]];
											v82[v364 + (603 - (512 + 90))] = v363;
											v82[v364] = v363[v84[4]];
											v76 = v76 + (1907 - (1665 + 241));
											v84 = v72[v76];
											v82[v84[719 - (373 + 344)]] = v84[3];
											v76 = v76 + 1;
											v84 = v72[v76];
											v364 = v84[2];
											v82[v364] = v82[v364](v13(v82, v364 + 1, v84[2 + 1]));
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											if (v82[v84[5 - 3]] ~= v84[6 - 2]) then
												v76 = v76 + (1100 - (35 + 1064));
											else
												v76 = v84[2 + 1 + 0];
											end
										else
											local v376 = 0 - 0;
											local v377;
											while true do
												if ((11 - 6) == v376) then
													v82[v84[1 + (2 - 1)]][v84[1239 - (298 + 938)]] = v82[v84[1263 - (233 + 1026)]];
													v76 = v76 + 1;
													v84 = v72[v76];
													v82[v84[1668 - (636 + 1030)]] = v84[3];
													break;
												end
												if ((v376 == 0) or (1158 >= 4321)) then
													v377 = nil;
													v82[v84[2]] = v63[v84[2 + 1]];
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v376 = 1 + (375 - (129 + 246));
												end
												if ((v376 == 4) or (2557 == 430)) then
													v377 = v84[1 + 1];
													v82[v377] = v82[v377](v13(v82, v377 + ((541 - 319) - (55 + 166)), v84[1 + 2]));
													v76 = v76 + 1;
													v84 = v72[v76];
													v376 = 1 + 4;
												end
												if ((11 - 8) == v376) then
													v84 = v72[v76];
													v82[v84[299 - ((1128 - (83 + 1009)) + 261)]] = v84[4 - 1];
													v76 = v76 + 1;
													v84 = v72[v76];
													v376 = 4;
												end
												if ((4137 == 4137) and (v376 == (1370 - (34 + 1334)))) then
													v76 = v76 + 1 + (873 - (506 + 367));
													v84 = v72[v76];
													v82[v84[2 + 0]] = v84[1286 - ((4955 - 3920) + 248)];
													v76 = v76 + 1;
													v376 = 24 - (20 + 1 + 0);
												end
												if (v376 == (1 + 0)) then
													v82[v84[360 - (72 + 286)]] = v82[v84[322 - (134 + 185)]][v84[1137 - (549 + 584)]];
													v76 = v76 + (686 - (314 + 371));
													v84 = v72[v76];
													v82[v84[6 - 4]] = v84[3];
													v376 = 970 - (478 + 475 + 15);
												end
											end
										end
									elseif (v85 > 18) then
										local v378 = 0 + 0;
										local v379;
										local v380;
										while true do
											if ((v378 == (1174 - ((920 - (107 + 27)) + 386))) or (3216 < 576)) then
												v84 = v72[v76];
												v380 = v84[6 - 4];
												v82[v380] = v82[v380](v82[v380 + 1]);
												v76 = v76 + (1380 - (1055 + 324));
												v84 = v72[v76];
												v378 = 1 + 2;
											end
											if (v378 == (1349 - (1093 + 247))) then
												v84 = v72[v76];
												v82[v84[2 + 0]] = v82[v84[1 + 2]] * v82[v84[4]];
												v76 = v76 + 1;
												v84 = v72[v76];
												v82[v84[(12 - 5) - 5]] = v82[v84[3]] * v82[v84[4]];
												v378 = 47 - 37;
											end
											if ((v378 == (16 - 11)) or (2051 >= 3515)) then
												v76 = v76 + 1;
												v84 = v72[v76];
												v380 = v84[2];
												v379 = v82[v84[8 - 5]];
												v82[v380 + ((2 + 0) - 1)] = v379;
												v378 = 3 + 3;
											end
											if ((v378 == (3 - (3 - 1))) or (1296 >= 2306)) then
												v82[v84[2]] = v82[v84[10 - 7]][v84[(15 - 11) + 0]];
												v76 = v76 + (2 - 1);
												v84 = v72[v76];
												v82[v84[690 - (364 + 324)]] = v82[v84[7 - 4]][v84[9 - 5]];
												v76 = v76 + 1 + (395 - (304 + 91));
												v378 = 8 - 6;
											end
											if ((16 - 6) == v378) then
												v76 = v76 + (2 - 1);
												v84 = v72[v76];
												v380 = v84[1270 - (1249 + 19)];
												v82[v380](v13(v82, v380 + 1 + 0, v84[3 + 0]));
												v76 = v76 + (3 - (7 - 5));
												v378 = 1097 - (686 + 400);
											end
											if ((1947 >= 398) and (v378 == (0 + 0))) then
												v379 = nil;
												v380 = nil;
												v82[v84[2]] = v63[v84[232 - (73 + 156)]];
												v76 = v76 + 1;
												v84 = v72[v76];
												v378 = 1 + 0;
											end
											if (v378 == (822 - (721 + 90))) then
												v84 = v72[v76];
												v82[v84[1 + 1]] = v84[3];
												v76 = v76 + 1;
												v84 = v72[v76];
												v76 = v84[9 - 6];
												break;
											end
											if (v378 == (473 - (224 + 246))) then
												v82[v84[2 - 0]] = v82[v84[5 - 2]] * v82[v84[4]];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[1 + 1]] = v82[v84[3]] * v82[v84[3 + 1]];
												v76 = v76 + (1 - 0);
												v378 = 12 - 8;
											end
											if (v378 == (520 - (203 + 310))) then
												v84 = v72[v76];
												v82[v84[1995 - (1238 + 755)]] = v82[v84[3]][v84[1 + 3]];
												v76 = v76 + (1535 - (709 + 825));
												v84 = v72[v76];
												v82[v84[3 - 1]] = v82[v84[3 - 0]][v84[868 - (196 + 668)]];
												v378 = 31 - 23;
											end
											if (v378 == (16 - 8)) then
												v76 = v76 + (834 - (171 + 662));
												v84 = v72[v76];
												v380 = v84[95 - (4 + 89)];
												v82[v380] = v82[v380](v82[v380 + (3 - 2)]);
												v76 = v76 + 1 + 0;
												v378 = 9;
											end
											if (v378 == (26 - 20)) then
												v82[v380] = v379[v84[4]];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[2]] = v63[v84[1489 - (35 + 1451)]];
												v76 = v76 + (1454 - (28 + 1425));
												v378 = 7;
											end
											if (v378 == 4) then
												v84 = v72[v76];
												v82[v84[1995 - (941 + 1052)]][v84[3 + 0]] = v82[v84[1518 - (822 + 692)]];
												v76 = v76 + (1 - 0);
												v84 = v72[v76];
												v82[v84[1 + 1]] = v62[v84[3]];
												v378 = 302 - (45 + 252);
											end
										end
									elseif (v82[v84[2 + 0]] < v84[2 + 2]) then
										v76 = v76 + (2 - 1);
									else
										v76 = v84[436 - (114 + 319)];
									end
								elseif ((1339 < 3908) and (v85 <= (29 - 8))) then
									if ((v85 > (25 - 5)) or (1254 >= 4198)) then
										local v381 = 0 + 0;
										local v382;
										while true do
											if ((v381 == (4 - 1)) or (1841 < 808)) then
												v76 = v76 + 1;
												v84 = v72[v76];
												v82[v84[3 - 1]] = v82[v84[1966 - (556 + 1407)]][v84[1210 - (741 + 465)]];
												v76 = v76 + (466 - (170 + 295));
												v84 = v72[v76];
												v82[v84[2 + 0]] = v84[3 + 0];
												v76 = v76 + (2 - 1);
												v381 = 4 + 0;
											end
											if (v381 == 1) then
												v82[v84[2 + 0]] = v82[v84[2 + 1]];
												v76 = v76 + 1;
												v84 = v72[v76];
												v382 = v84[1232 - (957 + 273)];
												v82[v382] = v82[v382](v13(v82, v382 + 1 + 0, v84[2 + 1]));
												v76 = v76 + (3 - 2);
												v84 = v72[v76];
												v381 = 2;
											end
											if ((4 == v381) or (4875 < 1864)) then
												v84 = v72[v76];
												v82[v84[2]] = v84[7 - 4];
												v76 = v76 + 1;
												v84 = v72[v76];
												v82[v84[5 - 3]] = v84[14 - 11];
												v76 = v76 + (1781 - (389 + 1391));
												v84 = v72[v76];
												v381 = 4 + 1;
											end
											if (v381 == 0) then
												v382 = nil;
												v82[v84[1 + 1]] = v82[v84[6 - 3]][v84[955 - (783 + 168)]];
												v76 = v76 + (3 - 2);
												v84 = v72[v76];
												v82[v84[2 + 0]] = v84[314 - (309 + 2)];
												v76 = v76 + 1;
												v84 = v72[v76];
												v381 = 2 - 1;
											end
											if (v381 == (1214 - (1090 + 122))) then
												v82[v84[1 + 1]] = v82[v84[9 - 6]];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[1120 - (628 + 490)]][v84[1 + 2]] = v84[9 - 5];
												v76 = v76 + (4 - 3);
												v84 = v72[v76];
												v82[v84[776 - (431 + 343)]] = v63[v84[3]];
												v381 = 5 - 2;
											end
											if (((23 - 15) == v381) or (822 == 574)) then
												v76 = v76 + 1;
												v84 = v72[v76];
												v82[v84[2 + 0]] = v82[v84[1 + 2]];
												v76 = v76 + 1;
												v84 = v72[v76];
												v82[v84[1697 - (556 + 1139)]] = v84[18 - (6 + 9)];
												break;
											end
											if (v381 == (2 + 5)) then
												v76 = v76 + 1;
												v84 = v72[v76];
												v82[v84[2 + 0]] = v82[v84[172 - (28 + 141)]];
												v76 = v76 + 1;
												v84 = v72[v76];
												v382 = v84[2];
												v82[v382] = v82[v382](v13(v82, v382 + 1 + 0, v84[3 - 0]));
												v381 = 6 + 2;
											end
											if (v381 == (1322 - (486 + 831))) then
												v382 = v84[5 - 3];
												v82[v382] = v82[v382](v13(v82, v382 + 1, v84[10 - 7]));
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[6 - 4]][v84[1266 - (668 + 595)]] = v82[v84[4]];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v381 = 2 + 4;
											end
											if ((v381 == 6) or (1396 >= 3483)) then
												v82[v84[5 - 3]] = v63[v84[293 - (23 + 267)]];
												v76 = v76 + (1945 - (1129 + 815));
												v84 = v72[v76];
												v82[v84[389 - (371 + 16)]] = v82[v84[3]][v84[1754 - (1326 + 424)]];
												v76 = v76 + (1 - 0);
												v84 = v72[v76];
												v82[v84[7 - 5]] = v84[121 - (88 + 30)];
												v381 = 778 - (720 + 51);
											end
										end
									else
										local v383;
										local v384;
										v384 = v84[4 - 2];
										v82[v384](v82[v384 + (1777 - (421 + 1355))]);
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v384 = v84[2];
										v383 = v82[v84[2 + 1]];
										v82[v384 + (1084 - (286 + 797))] = v383;
										v82[v384] = v383[v84[14 - 10]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[441 - (397 + 42)]] = v63[v84[1 + 2]];
										v76 = v76 + (801 - (24 + 776));
										v84 = v72[v76];
										v82[v84[2 - 0]] = v82[v84[3]][v84[789 - (222 + 563)]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[3]][v84[3 + 1]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v84[3] ~= (190 - (23 + 167));
										v76 = v76 + (1799 - (690 + 1108));
										v84 = v72[v76];
										v384 = v84[1 + 1];
										v82[v384](v13(v82, v384 + 1 + 0, v84[851 - (40 + 808)]));
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[7 - 5]] = v63[v84[3 + 0]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[574 - (47 + 524)]][v84[3 + 1]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[2 - 0]][v84[6 - 3]] = v82[v84[1730 - (1165 + 561)]];
									end
								elseif (v85 > (1 + 21)) then
									for v3483 = v84[2], v84[9 - 6] do
										v82[v3483] = nil;
									end
								elseif ((v84[1 + 1] < v82[v84[483 - (341 + 138)]]) or (4204 <= 2799)) then
									v76 = v76 + 1 + 0;
								else
									v76 = v84[5 - 2];
								end
							elseif (v85 <= 27) then
								if (v85 <= (351 - (89 + 237))) then
									if (v85 > 24) then
										v82[v84[6 - 4]] = v82[v84[6 - 3]][v84[885 - (581 + 300)]];
										v76 = v76 + (1221 - (855 + 365));
										v84 = v72[v76];
										v82[v84[2]][v84[6 - 3]] = v84[2 + 2];
										v76 = v76 + (1236 - (1030 + 205));
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[3]][v84[4]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[289 - (156 + 130)]][v84[4]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[2 - 0]][v84[3]] = v84[7 - 3];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v84[72 - (10 + 59)];
									else
										v82[v84[1 + 1]] = not v82[v84[14 - 11]];
									end
								elseif (v85 > (1189 - (671 + 492))) then
									local v417;
									local v418;
									v82[v84[2 + 0]] = v82[v84[3]][v84[1219 - (369 + 846)]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[3]][v84[4]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v418 = v84[2 + 0];
									v417 = v82[v84[1948 - (1036 + 909)]];
									v82[v418 + 1 + 0] = v417;
									v82[v418] = v417[v84[6 - 2]];
									v76 = v76 + (204 - (11 + 192));
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[178 - (135 + 40)]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v418 = v84[2 + 0];
									v82[v418](v13(v82, v418 + (2 - 1), v84[4 - 1]));
								else
									local v430 = 0;
									local v431;
									while true do
										if (((183 - (50 + 126)) == v430) or (4832 <= 1657)) then
											v84 = v72[v76];
											v82[v84[5 - 3]] = v63[v84[3]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v430 = 2 + 6;
										end
										if (v430 == 4) then
											v431 = v84[1415 - (1233 + 180)];
											v82[v431] = v82[v431](v13(v82, v431 + (970 - (522 + 447)), v84[1424 - (107 + 1314)]));
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v430 = 5;
										end
										if (v430 == 5) then
											v82[v84[5 - 3]][v84[2 + 1]] = v82[v84[7 - 3]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[7 - 5]] = v62[v84[1913 - (716 + 1194)]];
											v430 = 6;
										end
										if ((1 + 1) == v430) then
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[1 + 1]] = v84[506 - (74 + 429)];
											v76 = v76 + 1;
											v430 = 5 - 2;
										end
										if (v430 == (5 + 5)) then
											v84 = v72[v76];
											v431 = v84[4 - 2];
											v82[v431] = v82[v431](v13(v82, v431 + 1 + 0, v84[8 - 5]));
											v76 = v76 + 1;
											v430 = 26 - 15;
										end
										if (((436 - (279 + 154)) == v430) or (3390 > 4134)) then
											v84 = v72[v76];
											v82[v84[780 - (454 + 324)]] = v84[3];
											v76 = v76 + 1;
											v84 = v72[v76];
											v430 = 4 + 0;
										end
										if (v430 == 9) then
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[19 - (12 + 5)]] = v84[2 + 1];
											v76 = v76 + (2 - 1);
											v430 = 4 + 6;
										end
										if ((v430 == (1101 - (277 + 816))) or (4328 == 3323)) then
											v82[v84[8 - 6]] = v82[v84[1186 - (1058 + 125)]][v84[4]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[977 - (815 + 160)]] = v84[12 - 9];
											v430 = 21 - 12;
										end
										if ((v430 == (3 + 9)) or (3654 < 2360)) then
											v76 = v84[8 - 5];
											break;
										end
										if ((v430 == (1909 - (41 + 1857))) or (2614 < 2094)) then
											v84 = v72[v76];
											v82[v84[2]][v84[3]] = v82[v84[4]];
											v76 = v76 + (1894 - (1222 + 671));
											v84 = v72[v76];
											v430 = 12;
										end
										if (v430 == (15 - 9)) then
											v76 = v76 + (1 - 0);
											v84 = v72[v76];
											v82[v84[1184 - (229 + 953)]] = v82[v84[1777 - (1111 + 663)]][v84[1583 - (874 + 705)]];
											v76 = v76 + 1 + 0;
											v430 = 7;
										end
										if (v430 == (0 + 0)) then
											v431 = nil;
											v82[v84[2]] = v82[v84[6 - 3]][v84[1 + 3]];
											v76 = v76 + (680 - (642 + 37));
											v84 = v72[v76];
											v430 = 1 + 0;
										end
										if (v430 == 1) then
											v82[v84[1 + 1]] = v63[v84[3]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[2]] = v82[v84[7 - 4]][v84[4]];
											v430 = 2;
										end
									end
								end
							elseif (v85 <= (483 - (233 + 221))) then
								if ((v85 > (64 - 36)) or (2513 <= 835)) then
									local v432;
									local v433, v434;
									local v435;
									local v436;
									v82[v84[2 + 0]] = v63[v84[1544 - (718 + 823)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[807 - (266 + 539)]] = v63[v84[3]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v436 = v84[5 - 3];
									v435 = v82[v84[1228 - (636 + 589)]];
									v82[v436 + (2 - 1)] = v435;
									v82[v436] = v435[v84[8 - 4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v84[1018 - (657 + 358)];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v436 = v84[4 - 2];
									v433, v434 = v75(v82[v436](v13(v82, v436 + 1, v84[1190 - (1151 + 36)])));
									v77 = (v434 + v436) - 1;
									v432 = 0 + 0;
									for v3485 = v436, v77 do
										v432 = v432 + 1;
										v82[v3485] = v433[v432];
									end
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v436 = v84[5 - 3];
									v82[v436] = v82[v436](v13(v82, v436 + (1833 - (1552 + 280)), v77));
									v76 = v76 + (835 - (64 + 770));
									v84 = v72[v76];
									v82[v84[2 + 0]]();
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									do
										return;
									end
								else
									v82[v84[1 + 1]] = v63[v84[1246 - (157 + 1086)]];
								end
							elseif (v85 > 30) then
								local v452 = 0 - 0;
								local v453;
								local v454;
								while true do
									if ((4739 >= 3258) and (v452 == (30 - 23))) then
										v82[v84[2]] = v63[v84[3 - 0]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[822 - (599 + 220)]][v84[7 - 3]];
										v452 = 1939 - (1813 + 118);
									end
									if (v452 == 1) then
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v454 = v84[1219 - (841 + 376)];
										v453 = v82[v84[3 - 0]];
										v452 = 1 + 1;
									end
									if (((21 - 13) == v452) or (3035 > 4467)) then
										v76 = v76 + (860 - (464 + 395));
										v84 = v72[v76];
										v82[v84[5 - 3]][v84[3]] = v82[v84[2 + 2]];
										break;
									end
									if ((4490 >= 2802) and (v452 == (840 - (467 + 370)))) then
										v82[v84[3 - 1]] = v63[v84[3 + 0]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[6 - 4]] = v82[v84[1 + 2]][v84[8 - 4]];
										v452 = 524 - (150 + 370);
									end
									if (v452 == (1286 - (74 + 1208))) then
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[14 - 11]][v84[4]];
										v76 = v76 + 1 + 0;
										v452 = 395 - (14 + 376);
									end
									if (v452 == (3 - 1)) then
										v82[v454 + 1] = v453;
										v82[v454] = v453[v84[3 + 1]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v452 = 3;
									end
									if ((1537 == 1537) and (v452 == 0)) then
										v453 = nil;
										v454 = nil;
										v454 = v84[2 + 0];
										v82[v454](v82[v454 + (2 - 1)]);
										v452 = 1;
									end
									if (v452 == (4 + 1)) then
										v84 = v72[v76];
										v82[v84[80 - (23 + 55)]] = v84[6 - 3] ~= (0 + 0);
										v76 = v76 + 1;
										v84 = v72[v76];
										v452 = 6 + 0;
									end
									if (v452 == 6) then
										v454 = v84[2 - 0];
										v82[v454](v13(v82, v454 + 1 + 0, v84[3]));
										v76 = v76 + 1;
										v84 = v72[v76];
										v452 = 908 - (652 + 249);
									end
								end
							else
								v82[v84[5 - 3]] = v63[v84[1871 - (708 + 1160)]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[3 - 1]] = v82[v84[30 - (10 + 17)]][v84[1 + 3]];
								v76 = v76 + (1733 - (1400 + 332));
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]][v84[7 - 3]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[1911 - (242 + 1666)]][v84[2 + 2]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[3 + 0]][v84[944 - (850 + 90)]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[3 - 1]][v84[1393 - (360 + 1030)]] = v84[4 + 0];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								do
									return;
								end
							end
						elseif (v85 <= (64 - 17)) then
							if ((v85 <= (1700 - (909 + 752))) or (942 > 2169)) then
								if (v85 <= (1258 - (109 + 1114))) then
									if ((29 <= 48) and (v85 <= (60 - 27))) then
										if (v85 > (13 + 19)) then
											local v467;
											v82[v84[244 - (6 + 236)]] = v82[v84[2 + 1]][v84[4 + 0]];
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v467 = v84[3 - 1];
											v82[v467] = v82[v467]();
											v76 = v76 + (1134 - (1076 + 57));
											v84 = v72[v76];
											v82[v84[1 + 1]] = v63[v84[692 - (579 + 110)]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[2]] = v82[v84[3 + 0]][v84[3 + 1]];
											v76 = v76 + (408 - (174 + 233));
											v84 = v72[v76];
											v467 = v84[5 - 3];
											v82[v467] = v82[v467]();
											v76 = v76 + (1 - 0);
											v84 = v72[v76];
											v82[v84[1 + 1]][v84[1177 - (663 + 511)]] = v82[v84[4 + 0]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[1 + 1]][v84[9 - 6]] = v82[v84[4]];
										else
											do
												return v82[v84[2]];
											end
										end
									elseif ((2706 == 2706) and (v85 > (21 + 13))) then
										local v482;
										v82[v84[4 - 2]] = v82[v84[7 - 4]][v84[2 + 2]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2 + 0]] = v63[v84[1 + 2]];
										v76 = v76 + (723 - (478 + 244));
										v84 = v72[v76];
										v82[v84[519 - (440 + 77)]] = v82[v84[2 + 1]][v84[14 - 10]];
										v76 = v76 + (1557 - (655 + 901));
										v84 = v72[v76];
										v82[v84[1 + 1]] = v84[3 + 0];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v84[11 - 8];
										v76 = v76 + 1;
										v84 = v72[v76];
										v482 = v84[1447 - (695 + 750)];
										v82[v482] = v82[v482](v13(v82, v482 + (3 - 2), v84[3]));
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[7 - 5]][v84[354 - (285 + 66)]] = v82[v84[8 - 4]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1312 - (682 + 628)]] = v62[v84[1 + 2]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[301 - (176 + 123)]] = v82[v84[2 + 1]][v84[3 + 1]];
										v76 = v76 + (270 - (239 + 30));
										v84 = v72[v76];
										v82[v84[1 + 1]] = v63[v84[3 + 0]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[8 - 5]][v84[319 - (306 + 9)]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[1 + 1]] = v84[3];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v84[8 - 5];
										v76 = v76 + (1376 - (1140 + 235));
										v84 = v72[v76];
										v482 = v84[2 + 0];
										v82[v482] = v82[v482](v13(v82, v482 + 1, v84[3]));
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2 + 0]][v84[1 + 2]] = v82[v84[56 - (33 + 19)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v84[8 - 5];
									else
										local v509;
										local v510;
										v82[v84[1 + 1]] = v63[v84[5 - 2]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[691 - (586 + 103)]] = v63[v84[1 + 2]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[1490 - (1309 + 179)]][v84[5 - 2]] = v82[v84[2 + 2]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v63[v84[7 - 4]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[3 - 1]] = v82[v84[5 - 2]][v84[4]];
										v76 = v76 + (610 - (295 + 314));
										v84 = v72[v76];
										v82[v84[4 - 2]] = v84[3];
										v76 = v76 + (1963 - (1300 + 662));
										v84 = v72[v76];
										v510 = v84[6 - 4];
										v82[v510] = v82[v510](v82[v510 + (1756 - (1178 + 577))]);
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[5 - 3]][v84[1408 - (851 + 554)]] = v84[4];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]][v84[8 - 5]] = v82[v84[8 - 4]];
										v76 = v76 + (303 - (115 + 187));
										v84 = v72[v76];
										v82[v84[2 + 0]] = v63[v84[3]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[11 - 8]][v84[1165 - (160 + 1001)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v84[5 - 2];
										v76 = v76 + (359 - (237 + 121));
										v84 = v72[v76];
										v82[v84[899 - (525 + 372)]] = v84[4 - 1];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[144 - (96 + 46)]] = v84[780 - (643 + 134)];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v510 = v84[4 - 2];
										v82[v510] = v82[v510](v13(v82, v510 + (3 - 2), v84[3 + 0]));
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2]][v84[3]] = v82[v84[4]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2]] = v63[v84[722 - (316 + 403)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[5 - 3]] = v82[v84[2 + 1]][v84[9 - 5]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v84[10 - 7] / v84[19 - 15];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[1 + 1]] = v84[5 - 2] / v84[1 + 3];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[19 - (12 + 5)]] = v84[3] / v84[15 - 11];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v510 = v84[3 - 1];
										v82[v510] = v82[v510](v13(v82, v510 + (2 - 1), v84[3]));
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1975 - (1656 + 317)]][v84[3 + 0]] = v82[v84[4 + 0]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v510 = v84[9 - 7];
										v509 = v82[v84[357 - (5 + 349)]];
										v82[v510 + (4 - 3)] = v509;
										v82[v510] = v509[v84[4]];
										v76 = v76 + (1272 - (266 + 1005));
										v84 = v72[v76];
										v82[v84[2 + 0]] = v63[v84[10 - 7]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[1698 - (561 + 1135)]] = v82[v84[3 - 0]][v84[4]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[1069 - (507 + 559)]][v84[4]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[6 - 4]] = v84[3] ~= (388 - (212 + 176));
										v76 = v76 + 1;
										v84 = v72[v76];
										v510 = v84[2];
										v82[v510](v13(v82, v510 + (906 - (250 + 655)), v84[3]));
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										if v82[v84[2 - 0]] then
											v76 = v76 + (1 - 0);
										else
											v76 = v84[1959 - (1869 + 87)];
										end
									end
								elseif (v85 <= (128 - 91)) then
									if (v85 > (1937 - (484 + 1417))) then
										local v558;
										v82[v84[2]] = v63[v84[6 - 3]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2 - 0]] = v82[v84[776 - (48 + 725)]][v84[4]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[5 - 3]] = v82[v84[2 + 1]][v84[10 - 6]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[1 + 2]][v84[857 - (152 + 701)]];
										v76 = v76 + (1312 - (430 + 881));
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[898 - (557 + 338)]][v84[4]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v63[v84[8 - 5]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[4 - 2]] = v82[v84[3]][v84[8 - 4]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v84[3];
										v76 = v76 + (802 - (499 + 302));
										v84 = v72[v76];
										v82[v84[868 - (39 + 827)]] = v84[7 - 4];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[4 - 2]] = v84[11 - 8];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v558 = v84[1 + 1];
										v82[v558] = v82[v558](v13(v82, v558 + 1, v84[3]));
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[1 + 1]][v84[3]] = v82[v84[5 - 1]];
										v76 = v76 + (105 - (103 + 1));
										v84 = v72[v76];
										do
											return;
										end
									else
										local v580 = 554 - (475 + 79);
										local v581;
										while true do
											if ((684 <= 1169) and (v580 == (8 - 4))) then
												v76 = v76 + 1;
												v84 = v72[v76];
												do
													return v82[v84[6 - 4]];
												end
												v580 = 5;
											end
											if (v580 == (1 + 0)) then
												v84 = v72[v76];
												v82[v84[2]] = #v82[v84[3 + 0]];
												v76 = v76 + (1504 - (1395 + 108));
												v580 = 5 - 3;
											end
											if (v580 == (1207 - (7 + 1197))) then
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[2]] = v82[v84[2 + 1]][v82[v84[323 - (27 + 292)]]];
												v580 = 11 - 7;
											end
											if (v580 == (0 - 0)) then
												v581 = nil;
												v82[v84[2]] = v82[v84[3]][v84[16 - 12]];
												v76 = v76 + (1 - 0);
												v580 = 1 - 0;
											end
											if (((144 - (43 + 96)) == v580) or (2255 > 3023)) then
												v76 = v76 + (4 - 3);
												v84 = v72[v76];
												v76 = v84[6 - 3];
												break;
											end
											if (v580 == (2 + 0)) then
												v84 = v72[v76];
												v581 = v84[1 + 1];
												v82[v581] = v82[v581](v82[v581 + (1 - 0)]);
												v580 = 3;
											end
										end
									end
								elseif ((v85 == (15 + 23)) or (626 >= 3183)) then
									local v582;
									local v583;
									v82[v84[3 - 1]] = v84[1 + 2];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v583 = v84[1753 - (1414 + 337)];
									v82[v583](v13(v82, v583 + (1941 - (1642 + 298)), v84[3]));
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[4 - 2]] = v63[v84[8 - 5]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[3]][v84[4 + 0]];
									v76 = v76 + (973 - (357 + 615));
									v84 = v72[v76];
									v583 = v84[2];
									v582 = v82[v84[3 + 0]];
									v82[v583 + (2 - 1)] = v582;
									v82[v583] = v582[v84[4 + 0]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v583 = v84[2 + 0];
									v82[v583] = v82[v583](v82[v583 + 1 + 0]);
								else
									local v598 = 0 + 0;
									local v599;
									local v600;
									while true do
										if ((1255 >= 165) and (v598 == 0)) then
											v599 = nil;
											v600 = nil;
											v600 = v84[1303 - (384 + 917)];
											v598 = 1;
										end
										if ((698 - (128 + 569)) == v598) then
											v82[v600](v13(v82, v600 + (1544 - (1407 + 136)), v84[1890 - (687 + 1200)]));
											v76 = v76 + (1711 - (556 + 1154));
											v84 = v72[v76];
											v598 = 6 - 4;
										end
										if (v598 == 7) then
											v84 = v72[v76];
											v600 = v84[2];
											v599 = v82[v84[98 - (9 + 86)]];
											v598 = 8;
										end
										if (v598 == 5) then
											v82[v84[2]] = v84[3];
											v76 = v76 + 1;
											v84 = v72[v76];
											v598 = 427 - (275 + 146);
										end
										if (v598 == (1 + 2)) then
											v82[v600] = v599[v84[68 - (29 + 35)]];
											v76 = v76 + (4 - 3);
											v84 = v72[v76];
											v598 = 4;
										end
										if (v598 == 2) then
											v600 = v84[5 - 3];
											v599 = v82[v84[3]];
											v82[v600 + (4 - 3)] = v599;
											v598 = 2 + 1;
										end
										if (v598 == (1021 - (53 + 959))) then
											v84 = v72[v76];
											v82[v84[410 - (312 + 96)]] = v84[4 - 1];
											break;
										end
										if (v598 == (291 - (147 + 138))) then
											v600 = v84[2];
											v82[v600] = v82[v600](v13(v82, v600 + (900 - (813 + 86)), v84[3 + 0]));
											v76 = v76 + (1 - 0);
											v598 = 499 - (18 + 474);
										end
										if (v598 == (2 + 2)) then
											v82[v84[2]] = v84[9 - 6];
											v76 = v76 + (1087 - (860 + 226));
											v84 = v72[v76];
											v598 = 5;
										end
										if (v598 == (311 - (121 + 182))) then
											v82[v600 + 1] = v599;
											v82[v600] = v599[v84[4]];
											v76 = v76 + 1 + 0;
											v598 = 1249 - (988 + 252);
										end
									end
								end
							elseif ((1748 < 4764) and (v85 <= (5 + 38))) then
								if (v85 <= (13 + 28)) then
									if (v85 == 40) then
										local v601 = v84[2];
										local v602 = v84[1974 - (49 + 1921)];
										local v603 = v601 + (892 - (223 + 667));
										local v604 = {v82[v601](v82[v601 + 1], v82[v603])};
										for v3488 = 1 - 0, v602 do
											v82[v603 + v3488] = v604[v3488];
										end
										local v605 = v604[1];
										if v605 then
											v82[v603] = v605;
											v76 = v84[6 - 3];
										else
											v76 = v76 + 1;
										end
									else
										local v606 = 0;
										local v607;
										local v608;
										local v609;
										while true do
											if ((v606 == (1131 - (146 + 979))) or (1117 == 1019)) then
												v84 = v72[v76];
												v608 = v84[3];
												v607 = v82[v608];
												for v5639 = v608 + 1 + 0, v84[609 - (311 + 294)] do
													v607 = v607 .. v82[v5639];
												end
												v606 = 19 - 12;
											end
											if (v606 == (1 + 1)) then
												v84 = v72[v76];
												v609 = v84[1445 - (496 + 947)];
												v82[v609] = v82[v609](v82[v609 + 1]);
												v76 = v76 + 1;
												v606 = 1361 - (1233 + 125);
											end
											if ((v606 == (2 + 2)) or (1330 >= 1331)) then
												v82[v609] = v608[v84[4 + 0]];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[1647 - (963 + 682)]] = v84[3 + 0];
												v606 = 1509 - (504 + 1000);
											end
											if (v606 == (3 + 0)) then
												v84 = v72[v76];
												v609 = v84[2];
												v608 = v82[v84[3]];
												v82[v609 + 1 + 0] = v608;
												v606 = 1 + 3;
											end
											if ((v606 == (7 - 2)) or (3905 <= 3425)) then
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[2 + 0]] = v82[v84[3]];
												v76 = v76 + 1;
												v606 = 6;
											end
											if ((190 - (156 + 26)) == v606) then
												v82[v609] = v82[v609](v13(v82, v609 + 1 + 0, v84[3 - 0]));
												v76 = v76 + (165 - (149 + 15));
												v84 = v72[v76];
												if v82[v84[2]] then
													v76 = v76 + (961 - (890 + 70));
												else
													v76 = v84[120 - (39 + 78)];
												end
												break;
											end
											if (v606 == 7) then
												v82[v84[2]] = v607;
												v76 = v76 + (483 - (14 + 468));
												v84 = v72[v76];
												v609 = v84[4 - 2];
												v606 = 22 - 14;
											end
											if (v606 == (0 + 0)) then
												v607 = nil;
												v608 = nil;
												v609 = nil;
												v609 = v84[2 + 0];
												v606 = 1 + 0;
											end
											if ((v606 == (1 + 0)) or (1077 >= 3598)) then
												v608 = v82[v84[1 + 2]];
												v82[v609 + (1 - 0)] = v608;
												v82[v609] = v608[v84[4 + 0]];
												v76 = v76 + 1;
												v606 = 6 - 4;
											end
										end
									end
								elseif ((3977 >= 1895) and (v85 == (2 + 40))) then
									local v610;
									v82[v84[53 - (12 + 39)]] = v82[v84[3 + 0]][v84[4]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[6 - 4]] = v84[1 + 2];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[4 - 2]] = v84[2 + 1];
									v76 = v76 + 1;
									v84 = v72[v76];
									v610 = v84[2];
									v82[v610] = v82[v610](v13(v82, v610 + (4 - 3), v84[1713 - (1596 + 114)]));
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[4 - 2]][v84[716 - (164 + 549)]] = v82[v84[1442 - (1059 + 379)]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2 + 0]] = v63[v84[1 + 2]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[394 - (145 + 247)]] = v82[v84[3]][v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v84[8 - 5];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v84[4 - 1];
									v76 = v76 + (721 - (254 + 466));
									v84 = v72[v76];
									v610 = v84[562 - (544 + 16)];
									v82[v610] = v82[v610](v13(v82, v610 + 1, v84[9 - 6]));
									v76 = v76 + (629 - (294 + 334));
									v84 = v72[v76];
									v82[v84[255 - (236 + 17)]][v84[3]] = v82[v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v84[3 + 0];
								else
									local v634;
									v82[v84[7 - 5]] = v82[v84[14 - 11]][v84[3 + 1]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[797 - (413 + 381)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v634 = v84[3 - 1];
									v82[v634] = v82[v634](v82[v634 + (2 - 1)]);
									v76 = v76 + (1971 - (582 + 1388));
									v84 = v72[v76];
									v82[v84[2 - 0]] = v82[v84[3 + 0]];
									v76 = v76 + (365 - (326 + 38));
									v84 = v72[v76];
									v634 = v84[5 - 3];
									v82[v634](v82[v634 + (1 - 0)]);
								end
							elseif (v85 <= (665 - (47 + 573))) then
								if (v85 == 44) then
									local v645;
									local v646;
									v82[v84[2]] = v82[v84[2 + 1]][v84[16 - 12]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v646 = v84[1666 - (1269 + 395)];
									v645 = v82[v84[495 - (76 + 416)]];
									v82[v646 + 1] = v645;
									v82[v646] = v645[v84[447 - (319 + 124)]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[1009 - (564 + 443)]] = v84[7 - 4];
									v76 = v76 + (459 - (337 + 121));
									v84 = v72[v76];
									v646 = v84[5 - 3];
									v82[v646] = v82[v646](v13(v82, v646 + (3 - 2), v84[1914 - (1261 + 650)]));
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									if (v82[v84[2 - 0]] ~= v84[1821 - (772 + 1045)]) then
										v76 = v76 + 1 + 0;
									else
										v76 = v84[147 - (102 + 42)];
									end
								else
									local v658;
									local v659;
									v82[v84[2]] = v82[v84[1847 - (1524 + 320)]][v84[4]];
									v76 = v76 + (1271 - (1049 + 221));
									v84 = v72[v76];
									v659 = v84[158 - (18 + 138)];
									v658 = v82[v84[7 - 4]];
									v82[v659 + (1103 - (67 + 1035))] = v658;
									v82[v659] = v658[v84[352 - (136 + 212)]];
									v76 = v76 + (4 - 3);
									v84 = v72[v76];
									v82[v84[2 + 0]] = v84[3 + 0];
									v76 = v76 + (1605 - (240 + 1364));
									v84 = v72[v76];
									v659 = v84[1084 - (1050 + 32)];
									v82[v659] = v82[v659](v13(v82, v659 + (3 - 2), v84[2 + 1]));
									v76 = v76 + (1056 - (331 + 724));
									v84 = v72[v76];
									if (v82[v84[1 + 1]] ~= v84[648 - (269 + 375)]) then
										v76 = v76 + (726 - (267 + 458));
									else
										v76 = v84[1 + 2];
									end
								end
							elseif (v85 > (88 - 42)) then
								v82[v84[2]] = v62[v84[821 - (667 + 151)]];
							else
								local v673 = 1497 - (1410 + 87);
								while true do
									if ((v673 == (1899 - (1504 + 393))) or (1055 > 4738)) then
										v82[v84[5 - 3]] = v82[v84[3]][v84[10 - 6]];
										v76 = v76 + (797 - (461 + 335));
										v84 = v72[v76];
										v673 = 1 + 2;
									end
									if ((1758 == 1758) and (v673 == (1761 - (1730 + 31)))) then
										v82[v84[2]] = v82[v84[1670 - (728 + 939)]][v84[4]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v673 = 1;
									end
									if (v673 == (5 - 2)) then
										v82[v84[4 - 2]] = v82[v84[1071 - (138 + 930)]][v84[4 + 0]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v673 = 4 + 0;
									end
									if (v673 == (16 - 12)) then
										v82[v84[1768 - (459 + 1307)]][v84[1873 - (474 + 1396)]] = v84[6 - 2];
										v76 = v76 + 1;
										v84 = v72[v76];
										v673 = 5;
									end
									if (v673 == (1 + 0)) then
										v82[v84[1 + 1]][v84[8 - 5]] = v84[1 + 3];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v673 = 8 - 6;
									end
									if (v673 == (596 - (562 + 29))) then
										v82[v84[2]] = v84[3 + 0];
										break;
									end
								end
							end
						elseif (v85 <= (1474 - (374 + 1045))) then
							if (v85 <= (41 + 10)) then
								if ((4445 <= 4760) and (v85 <= (151 - 102))) then
									if (v85 > (686 - (448 + 190))) then
										if v82[v84[2]] then
											v76 = v76 + 1 + 0;
										else
											v76 = v84[2 + 1];
										end
									else
										local v674 = 0 + 0;
										local v675;
										local v676;
										local v677;
										local v678;
										while true do
											if ((v674 == (34 - 25)) or (3247 >= 3945)) then
												v76 = v76 + (2 - 1);
												v84 = v72[v76];
												v82[v84[1496 - (1307 + 187)]] = v84[11 - 8];
												v76 = v76 + (2 - 1);
												v84 = v72[v76];
												v82[v84[5 - 3]] = v84[3];
												v674 = 693 - (232 + 451);
											end
											if (v674 == (8 + 0)) then
												v84 = v72[v76];
												v82[v84[2 + 0]] = v84[567 - (510 + 54)];
												v76 = v76 + (1 - 0);
												v84 = v72[v76];
												v678 = v84[38 - (13 + 23)];
												v82[v678] = v82[v678](v82[v678 + (1 - 0)]);
												v674 = 9;
											end
											if (v674 == (14 - 4)) then
												v76 = v76 + (1 - 0);
												v84 = v72[v76];
												v678 = v84[2];
												v676, v677 = v75(v82[v678](v13(v82, v678 + (1089 - (830 + 258)), v84[10 - 7])));
												v77 = (v677 + v678) - (1 + 0);
												v675 = 0 + 0;
												v674 = 1452 - (860 + 581);
											end
											if (v674 == (40 - 29)) then
												for v5640 = v678, v77 do
													v675 = v675 + 1 + 0;
													v82[v5640] = v676[v675];
												end
												v76 = v76 + (242 - (237 + 4));
												v84 = v72[v76];
												v678 = v84[4 - 2];
												v82[v678](v13(v82, v678 + 1, v77));
												v76 = v76 + 1;
												v674 = 29 - 17;
											end
											if (v674 == 3) then
												v82[v84[3 - 1]] = v82[v84[3 + 0]][v84[3 + 1]];
												v76 = v76 + (3 - 2);
												v84 = v72[v76];
												v82[v84[2]] = v84[2 + 1];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v674 = 4;
											end
											if (v674 == (1426 - (85 + 1341))) then
												v675 = nil;
												v676, v677 = nil;
												v678 = nil;
												v82[v84[3 - 1]] = v82[v84[8 - 5]][v84[376 - (45 + 327)]];
												v76 = v76 + (1 - 0);
												v84 = v72[v76];
												v674 = 1;
											end
											if (((508 - (444 + 58)) == v674) or (3207 <= 881)) then
												v84 = v72[v76];
												v82[v84[1 + 1]] = v63[v84[3]];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[1 + 1]] = v82[v84[8 - 5]][v84[1736 - (64 + 1668)]];
												v76 = v76 + (1974 - (1227 + 746));
												v674 = 7;
											end
											if (v674 == (12 - 8)) then
												v82[v84[3 - 1]] = v84[497 - (415 + 79)];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[493 - (142 + 349)]] = v62[v84[2 + 1]];
												v76 = v76 + (1 - 0);
												v84 = v72[v76];
												v674 = 3 + 2;
											end
											if (v674 == (5 + 2)) then
												v84 = v72[v76];
												v82[v84[2]] = v63[v84[7 - 4]];
												v76 = v76 + 1;
												v84 = v72[v76];
												v82[v84[1866 - (1710 + 154)]] = v82[v84[321 - (200 + 118)]][v84[2 + 2]];
												v76 = v76 + (1 - 0);
												v674 = 11 - 3;
											end
											if ((2071 == 2071) and ((12 + 1) == v674)) then
												v84 = v72[v76];
												v82[v84[2 + 0]]();
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[1 + 1]] = v84[3];
												break;
											end
											if ((v674 == (10 - 5)) or (4852 < 1945)) then
												v82[v84[1252 - (363 + 887)]] = v82[v84[3]][v84[6 - 2]];
												v76 = v76 + (4 - 3);
												v84 = v72[v76];
												v678 = v84[1 + 1];
												v82[v678] = v82[v678](v13(v82, v678 + (2 - 1), v84[3 + 0]));
												v76 = v76 + (1665 - (674 + 990));
												v674 = 2 + 4;
											end
											if (v674 == (1 + 0)) then
												v82[v84[2 - 0]]();
												v76 = v76 + (1056 - (507 + 548));
												v84 = v72[v76];
												v82[v84[839 - (289 + 548)]] = v62[v84[1821 - (821 + 997)]];
												v76 = v76 + 1;
												v84 = v72[v76];
												v674 = 257 - (195 + 60);
											end
											if (v674 == (1 + 1)) then
												v82[v84[1503 - (251 + 1250)]] = v82[v84[8 - 5]];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[1034 - (809 + 223)]] = v63[v84[3 - 0]];
												v76 = v76 + (2 - 1);
												v84 = v72[v76];
												v674 = 3;
											end
											if ((39 - 27) == v674) then
												v84 = v72[v76];
												v82[v84[2 + 0]] = v63[v84[3]];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v82[v84[2]] = v82[v84[620 - (14 + 603)]][v84[4]];
												v76 = v76 + (130 - (118 + 11));
												v674 = 3 + 10;
											end
										end
									end
								elseif (v85 == (42 + 8)) then
									local v679;
									v82[v84[5 - 3]] = v82[v84[3]][v84[953 - (551 + 398)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v84[3 + 0];
									v76 = v76 + 1;
									v84 = v72[v76];
									v679 = v84[2];
									v82[v679] = v82[v679](v82[v679 + (3 - 2)]);
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[3]];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[1 + 1]][v84[92 - (40 + 49)]] = v84[15 - 11];
									v76 = v76 + (491 - (99 + 391));
									v84 = v72[v76];
									v82[v84[2]] = v63[v84[3 + 0]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[8 - 6]] = v82[v84[7 - 4]][v84[4 + 0]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[1606 - (1032 + 572)]] = v84[420 - (203 + 214)];
									v76 = v76 + (1818 - (568 + 1249));
									v84 = v72[v76];
									v82[v84[2]] = v84[3 + 0];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v679 = v84[2];
									v82[v679] = v82[v679](v13(v82, v679 + 1, v84[11 - 8]));
									v76 = v76 + (1307 - (913 + 393));
									v84 = v72[v76];
									v82[v84[2]][v84[8 - 5]] = v82[v84[4]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[412 - (269 + 141)]] = v63[v84[3]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[4 - 2]] = v82[v84[3]][v84[4]];
									v76 = v76 + (1982 - (362 + 1619));
									v84 = v72[v76];
									v82[v84[1627 - (950 + 675)]] = v84[2 + 1];
									v76 = v76 + (1180 - (216 + 963));
									v84 = v72[v76];
									v82[v84[2]] = v84[1290 - (485 + 802)];
									v76 = v76 + (560 - (432 + 127));
									v84 = v72[v76];
									v679 = v84[2];
									v82[v679] = v82[v679](v13(v82, v679 + (1074 - (1065 + 8)), v84[2 + 1]));
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]][v84[1604 - (635 + 966)]] = v82[v84[3 + 1]];
									v76 = v76 + (43 - (5 + 37));
									v84 = v72[v76];
									v82[v84[2]] = v84[7 - 4];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v76 = v84[4 - 1];
								else
									v82[v84[1 + 1]] = v84[5 - 2] / v84[15 - 11];
								end
							elseif (v85 <= (99 - 46)) then
								if (v85 == 52) then
									local v710 = 0;
									local v711;
									while true do
										if (v710 == (9 - 5)) then
											v84 = v72[v76];
											v82[v84[2 + 0]] = v82[v84[3]][v84[4]];
											v76 = v76 + (530 - (318 + 211));
											v84 = v72[v76];
											v710 = 24 - 19;
										end
										if (v710 == (1587 - (963 + 624))) then
											v711 = nil;
											v82[v84[1 + 1]] = v63[v84[849 - (518 + 328)]];
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v710 = 1 - 0;
										end
										if ((318 - (301 + 16)) == v710) then
											v711 = v84[5 - 3];
											v82[v711] = v82[v711]();
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v710 = 5 - 3;
										end
										if ((101 <= 145) and (2 == v710)) then
											v82[v84[2]] = v82[v84[3 + 0]][v84[4]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[3 - 1]] = v82[v84[2 + 1]][v84[1 + 3]];
											v710 = 9 - 6;
										end
										if ((89 == 89) and ((2 + 3) == v710)) then
											if (v82[v84[1021 - (829 + 190)]] < v84[14 - 10]) then
												v76 = v76 + (1 - 0);
											else
												v76 = v84[3 - 0];
											end
											break;
										end
										if (v710 == 3) then
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[2]] = v82[v84[7 - 4]] - v82[v84[1 + 3]];
											v76 = v76 + 1 + 0;
											v710 = 4;
										end
									end
								else
									local v712 = 0 - 0;
									local v713;
									while true do
										if (v712 == (2 + 0)) then
											v76 = v76 + (614 - (520 + 93));
											v84 = v72[v76];
											v82[v84[2]] = v84[279 - (259 + 17)];
											v76 = v76 + 1 + 0;
											v712 = 2 + 1;
										end
										if (4 == v712) then
											v713 = v84[6 - 4];
											v82[v713] = v82[v713](v13(v82, v713 + 1, v84[594 - (396 + 195)]));
											break;
										end
										if (v712 == (0 - 0)) then
											v713 = nil;
											v82[v84[1763 - (440 + 1321)]] = v63[v84[1832 - (1059 + 770)]];
											v76 = v76 + (4 - 3);
											v84 = v72[v76];
											v712 = 546 - (424 + 121);
										end
										if (v712 == (1 + 2)) then
											v84 = v72[v76];
											v82[v84[1349 - (641 + 706)]] = v84[2 + 1];
											v76 = v76 + (441 - (249 + 191));
											v84 = v72[v76];
											v712 = 17 - 13;
										end
										if ((v712 == (1 + 0)) or (1058 >= 4484)) then
											v82[v84[7 - 5]] = v82[v84[3]][v84[431 - (183 + 244)]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[732 - (434 + 296)]] = v84[9 - 6];
											v712 = 2;
										end
									end
								end
							elseif ((197 < 1531) and (v85 == 54)) then
								if ((v84[514 - (169 + 343)] < v82[v84[4 + 0]]) or (1076 > 1908)) then
									v76 = v84[4 - 1];
								else
									v76 = v76 + 1;
								end
							else
								local v714 = 0 - 0;
								local v715;
								local v716;
								while true do
									if (v714 == (5 + 0)) then
										v716 = v84[5 - 3];
										v82[v716] = v82[v716](v13(v82, v716 + (1124 - (651 + 472)), v84[3 + 0]));
										v76 = v76 + 1;
										v84 = v72[v76];
										if (v82[v84[1 + 1]] == v84[4 - 0]) then
											v76 = v76 + (484 - (397 + 86));
										else
											v76 = v84[879 - (423 + 453)];
										end
										break;
									end
									if (v714 == (1 + 1)) then
										v82[v84[1 + 1]] = v63[v84[3]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[3 + 0]][v84[4 + 0]];
										v76 = v76 + (1191 - (50 + 1140));
										v84 = v72[v76];
										v714 = 3 + 0;
									end
									if ((v714 == (0 + 0)) or (4569 <= 2815)) then
										v715 = nil;
										v716 = nil;
										v82[v84[1 + 1]] = v84[3 - 0] ~= 0;
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v62[v84[3]];
										v714 = 1;
									end
									if ((2100 < 3801) and (v714 == (599 - (157 + 439)))) then
										v716 = v84[2];
										v715 = v82[v84[4 - 1]];
										v82[v716 + (3 - 2)] = v715;
										v82[v716] = v715[v84[4]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v714 = 922 - (782 + 136);
									end
									if ((792 == 792) and (v714 == (856 - (112 + 743)))) then
										v76 = v76 + 1;
										v84 = v72[v76];
										v716 = v84[2];
										v82[v716](v13(v82, v716 + (1172 - (1026 + 145)), v84[1 + 2]));
										v76 = v76 + (719 - (493 + 225));
										v84 = v72[v76];
										v714 = 7 - 5;
									end
									if (v714 == (3 + 1)) then
										v82[v84[5 - 3]] = v62[v84[1 + 2]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[4 - 1]][v84[4]];
										v76 = v76 + (1596 - (210 + 1385));
										v84 = v72[v76];
										v714 = 1694 - (1201 + 488);
									end
								end
							end
						elseif (v85 <= 59) then
							if ((241 >= 196) and (v85 <= (36 + 21))) then
								if (v85 > (99 - 43)) then
									v82[v84[2 - 0]] = v82[v84[588 - (352 + 233)]][v84[9 - 5]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[5 - 3]][v84[577 - (489 + 85)]] = v84[1505 - (277 + 1224)];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[1496 - (663 + 830)]][v84[4 + 0]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[877 - (461 + 414)]] = v82[v84[3]][v84[1 + 3]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1 + 1]][v84[3 + 0]] = v84[254 - (172 + 78)];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 - 0]] = v84[3];
								else
									local v729;
									local v730;
									local v731;
									local v732;
									v732 = v84[1 + 1];
									v731 = v82[v84[3 - 0]];
									v82[v732 + 1 + 0] = v731;
									v82[v732] = v731[v84[2 + 2]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2 - 0]] = v62[v84[1 + 2]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[3]][v84[2 + 2]];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[3]][v84[9 - 5]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[450 - (133 + 314)]][v84[1 + 3]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v732 = v84[215 - (199 + 14)];
									v730 = {v82[v732](v13(v82, v732 + (1550 - (647 + 902)), v84[3]))};
									v729 = 0 - 0;
									for v3491 = v732, v84[237 - (85 + 148)] do
										v729 = v729 + (1290 - (426 + 863));
										v82[v3491] = v730[v729];
									end
									v76 = v76 + (4 - 3);
									v84 = v72[v76];
									if v82[v84[2]] then
										v76 = v76 + (1655 - (873 + 781));
									else
										v76 = v84[3 - 0];
									end
								end
							elseif (v85 == (156 - 98)) then
								v82[v84[1 + 1]][v84[3]] = v84[4];
							else
								local v749 = 0 - 0;
								local v750;
								local v751;
								local v752;
								while true do
									if (v749 == 1) then
										v752 = {};
										v751 = v10({}, {__index=function(v5643, v5644)
											local v5645 = v752[v5644];
											return v5645[1 - 0][v5645[5 - 3]];
										end,__newindex=function(v5646, v5647, v5648)
											local v5649 = v752[v5647];
											v5649[1][v5649[1949 - (414 + 1533)]] = v5648;
										end});
										v749 = 2 + 0;
									end
									if ((557 - (443 + 112)) == v749) then
										for v5651 = 1480 - (888 + 591), v84[10 - 6] do
											v76 = v76 + 1 + 0;
											local v5652 = v72[v76];
											if (v5652[1] == 111) then
												v752[v5651 - (3 - 2)] = {v82,v5652[1 + 2]};
											else
												v752[v5651 - (1 - 0)] = {v62,v5652[3]};
											end
											v81[#v81 + (1679 - (136 + 1542))] = v752;
										end
										v82[v84[6 - 4]] = v29(v750, v751, v63);
										break;
									end
									if (v749 == (0 + 0)) then
										v750 = v73[v84[4 - 1]];
										v751 = nil;
										v749 = 1 + 0;
									end
								end
							end
						elseif ((1572 > 1128) and (v85 <= (547 - (68 + 418)))) then
							if ((v85 == 60) or (1793 >= 1793)) then
								v82[v84[2]] = v82[v84[8 - 5]][v84[6 - 2]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1094 - (770 + 322)]] = v82[v84[1 + 2]][v84[2 + 2]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[3 - 0]][v84[7 - 3]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[7 - 5]] = v82[v84[2 + 1]][v84[5 - 1]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]][v84[3 + 1]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2 + 0]][v84[11 - 8]] = v82[v84[4 - 0]];
							else
								local v765 = 0 + 0;
								local v766;
								local v767;
								while true do
									if ((v765 == (27 - 21)) or (1186 == 257)) then
										v82[v767 + (3 - 2)] = v766;
										v82[v767] = v766[v84[2 + 2]];
										v76 = v76 + (4 - 3);
										v84 = v72[v76];
										v765 = 838 - (762 + 69);
									end
									if ((21 == 21) and (v765 == (3 - 2))) then
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v767 = v84[2];
										v766 = v82[v84[2 + 1]];
										v765 = 4 - 2;
									end
									if ((1785 >= 1074) and (v765 == (2 + 3))) then
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v767 = v84[7 - 5];
										v766 = v82[v84[160 - (8 + 149)]];
										v765 = 1326 - (1199 + 121);
									end
									if (v765 == 0) then
										v766 = nil;
										v767 = nil;
										v767 = v84[3 - 1];
										v82[v767](v13(v82, v767 + (2 - 1), v84[2 + 1]));
										v765 = 3 - 2;
									end
									if ((v765 == (6 - 3)) or (2996 == 4404)) then
										v82[v84[2]] = v84[3];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1809 - (518 + 1289)]] = v84[4 - 1];
										v765 = 1 + 3;
									end
									if (v765 == 2) then
										v82[v767 + 1] = v766;
										v82[v767] = v766[v84[4]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v765 = 3 + 0;
									end
									if ((1847 < 3504) and (v765 == (476 - (304 + 165)))) then
										v82[v84[2 + 0]] = v84[163 - (54 + 106)];
										break;
									end
									if (v765 == (1973 - (1618 + 351))) then
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v767 = v84[1018 - (10 + 1006)];
										v82[v767] = v82[v767](v13(v82, v767 + 1 + 0, v84[3]));
										v765 = 1 + 4;
									end
								end
							end
						elseif ((v85 <= (200 - 138)) or (3706 <= 835)) then
							local v768;
							v82[v84[1035 - (912 + 121)]] = v63[v84[2 + 1]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[1291 - (1140 + 149)]] = v82[v84[3]][v84[3 + 1]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2 - 0]] = v82[v84[1 + 2]];
							v76 = v76 + (3 - 2);
							v84 = v72[v76];
							v82[v84[3 - 1]] = v82[v84[1 + 2]];
							v76 = v76 + (3 - 2);
							v84 = v72[v76];
							v82[v84[2]] = v82[v84[3]];
							v76 = v76 + (187 - (165 + 21));
							v84 = v72[v76];
							v768 = v84[113 - (61 + 50)];
							do
								return v82[v768](v13(v82, v768 + 1 + 0, v84[3]));
							end
							v76 = v76 + (4 - 3);
							v84 = v72[v76];
							v768 = v84[3 - 1];
							do
								return v13(v82, v768, v77);
							end
						elseif (v85 > (25 + 38)) then
							local v3609 = v84[1462 - (1295 + 165)];
							v82[v3609] = v82[v3609]();
						else
							local v3611;
							local v3612;
							local v3611, v3613;
							local v3614;
							local v3615;
							v82[v84[1 + 1]] = v63[v84[2 + 1]];
							v76 = v76 + (1398 - (819 + 578));
							v84 = v72[v76];
							v82[v84[1404 - (331 + 1071)]] = v82[v84[3]][v84[747 - (588 + 155)]];
							v76 = v76 + (1283 - (546 + 736));
							v84 = v72[v76];
							v82[v84[1939 - (1834 + 103)]] = v82[v84[2 + 1]][v84[11 - 7]];
							v76 = v76 + (1767 - (1536 + 230));
							v84 = v72[v76];
							v82[v84[493 - (128 + 363)]] = v82[v84[1 + 2]][v84[9 - 5]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v3615 = v84[2 - 0];
							v3614 = v82[v84[8 - 5]];
							v82[v3615 + (2 - 1)] = v3614;
							v82[v3615] = v3614[v84[4]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v3615 = v84[2];
							v3611, v3613 = v75(v82[v3615](v82[v3615 + 1 + 0]));
							v77 = (v3613 + v3615) - (1010 - (615 + 394));
							v3612 = 0 + 0;
							for v4349 = v3615, v77 do
								v3612 = v3612 + 1 + 0;
								v82[v4349] = v3611[v3612];
							end
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v3615 = v84[2];
							v3611 = {v82[v3615](v13(v82, v3615 + (652 - (59 + 592)), v77))};
							v3612 = 0 - 0;
							for v4352 = v3615, v84[7 - 3] do
								local v4353 = 0 + 0;
								while true do
									if ((2998 > 887) and (v4353 == (171 - (70 + 101)))) then
										v3612 = v3612 + (2 - 1);
										v82[v4352] = v3611[v3612];
										break;
									end
								end
							end
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v76 = v84[7 - 4];
						end
					elseif (v85 <= (337 - (123 + 118))) then
						if ((v85 <= (20 + 60)) or (4735 < 2008)) then
							if (v85 <= (1 + 71)) then
								if (v85 <= (1467 - (653 + 746))) then
									if (v85 <= (122 - 56)) then
										if (v85 > (93 - 28)) then
											local v781;
											local v782;
											v782 = v84[5 - 3];
											v82[v782] = v82[v782](v13(v82, v782 + 1 + 0, v84[2 + 1]));
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[2 + 0]] = v63[v84[1 + 2]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[2]] = v82[v84[7 - 4]][v84[4 + 0]];
											v76 = v76 + (1 - 0);
											v84 = v72[v76];
											v82[v84[2]] = v84[1237 - (885 + 349)];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[4 - 2]] = v84[3];
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v82[v84[970 - (915 + 53)]] = v84[804 - (768 + 33)];
											v76 = v76 + 1;
											v84 = v72[v76];
											v782 = v84[7 - 5];
											v82[v782] = v82[v782](v13(v82, v782 + 1, v84[5 - 2]));
											v76 = v76 + (329 - (287 + 41));
											v84 = v72[v76];
											v82[v84[2]] = v62[v84[850 - (638 + 209)]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[1688 - (96 + 1590)]] = v82[v84[1675 - (741 + 931)]][v84[4]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v782 = v84[2];
											v781 = v82[v84[2 + 1]];
											v82[v782 + (2 - 1)] = v781;
											v82[v782] = v781[v84[18 - 14]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[1 + 1]] = v82[v84[1 + 2]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[7 - 5]] = v62[v84[3]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[1 + 1]] = v82[v84[12 - 9]][v84[4 + 0]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[496 - (64 + 430)]] = v82[v84[3 + 0]][v84[367 - (106 + 257)]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[723 - (496 + 225)]] = v82[v84[5 - 2]][v84[4]];
											v76 = v76 + (4 - 3);
											v84 = v72[v76];
											v82[v84[1660 - (256 + 1402)]] = v62[v84[1902 - (30 + 1869)]];
											v76 = v76 + (1370 - (213 + 1156));
											v84 = v72[v76];
											v82[v84[190 - (96 + 92)]] = v82[v84[3]][v84[1 + 3]];
											v76 = v76 + (900 - (142 + 757));
											v84 = v72[v76];
											v82[v84[2]] = v82[v84[3 + 0]][v84[2 + 2]];
											v76 = v76 + (80 - (32 + 47));
											v84 = v72[v76];
											v82[v84[1979 - (1053 + 924)]] = v82[v84[3 + 0]][v84[6 - 2]];
											v76 = v76 + (1649 - (685 + 963));
											v84 = v72[v76];
											v82[v84[2]] = v82[v84[3]] / v82[v84[4]];
											v76 = v76 + (1 - 0);
											v84 = v72[v76];
											v782 = v84[2 - 0];
											v82[v782] = v82[v782](v13(v82, v782 + (1710 - (541 + 1168)), v84[1600 - (645 + 952)]));
											v76 = v76 + (839 - (669 + 169));
											v84 = v72[v76];
											v82[v84[2]][v84[10 - 7]] = v82[v84[8 - 4]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[1 + 1]] = v62[v84[768 - (181 + 584)]];
											v76 = v76 + (1396 - (665 + 730));
											v84 = v72[v76];
											v82[v84[2]] = v82[v84[8 - 5]][v84[7 - 3]];
											v76 = v76 + (1351 - (540 + 810));
											v84 = v72[v76];
											if v82[v84[2]] then
												v76 = v76 + (3 - 2);
											else
												v76 = v84[8 - 5];
											end
										else
											v82[v84[2 + 0]] = #v82[v84[206 - (166 + 37)]];
										end
									elseif ((4606 >= 295) and (v85 > (1948 - (22 + 1859)))) then
										local v825 = 1772 - (843 + 929);
										while true do
											if (((263 - (30 + 232)) == v825) or (805 == 1591)) then
												v82[v84[5 - 3]][v84[780 - (55 + 722)]] = v84[8 - 4];
												v76 = v76 + (1676 - (78 + 1597));
												v84 = v72[v76];
												v825 = 1 + 1;
											end
											if ((v825 == (4 + 0)) or (1096 > 3411)) then
												v82[v84[2 + 0]][v84[552 - (305 + 244)]] = v84[4];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v825 = 110 - (95 + 10);
											end
											if (v825 == (5 + 1)) then
												v76 = v84[9 - 6];
												break;
											end
											if (v825 == (2 - 0)) then
												v82[v84[764 - (592 + 170)]] = v82[v84[10 - 7]][v84[9 - 5]];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v825 = 3;
											end
											if (v825 == (0 + 0)) then
												v82[v84[4 - 2]] = v82[v84[1 + 2]][v84[6 - 2]];
												v76 = v76 + (508 - (353 + 154));
												v84 = v72[v76];
												v825 = 1 - 0;
											end
											if (v825 == (6 - 1)) then
												v82[v84[2 + 0]] = v84[3 + 0];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v825 = 6;
											end
											if ((3132 <= 3135) and (v825 == (3 - 0))) then
												v82[v84[2]] = v82[v84[5 - 2]][v84[9 - 5]];
												v76 = v76 + (87 - (7 + 79));
												v84 = v72[v76];
												v825 = 4;
											end
										end
									else
										v82[v84[2]] = v82[v84[3]] + v84[2 + 2];
									end
								elseif (v85 <= (251 - (24 + 157))) then
									if ((1613 < 3288) and (v85 == (137 - 68))) then
										local v827;
										local v828;
										local v829;
										v829 = v84[4 - 2];
										v828 = v82[v84[1 + 2]];
										v82[v829 + 1] = v828;
										v82[v829] = v828[v84[4]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v829 = v84[2];
										v82[v829] = v82[v829](v82[v829 + 1]);
										v76 = v76 + (381 - (262 + 118));
										v84 = v72[v76];
										v829 = v84[2];
										v828 = v82[v84[1086 - (1038 + 45)]];
										v82[v829 + (1 - 0)] = v828;
										v82[v829] = v828[v84[234 - (19 + 211)]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v84[116 - (88 + 25)];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[3 + 0]];
										v76 = v76 + (1037 - (1007 + 29));
										v84 = v72[v76];
										v828 = v84[1 + 2];
										v827 = v82[v828];
										for v3494 = v828 + (2 - 1), v84[18 - 14] do
											v827 = v827 .. v82[v3494];
										end
										v82[v84[1 + 1]] = v827;
										v76 = v76 + 1;
										v84 = v72[v76];
										v829 = v84[813 - (340 + 471)];
										v82[v829] = v82[v829](v13(v82, v829 + (2 - 1), v84[592 - (276 + 313)]));
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										if v82[v84[2 + 0]] then
											v76 = v76 + 1 + 0;
										else
											v76 = v84[1 + 2];
										end
									else
										v82[v84[2]][v84[1975 - (495 + 1477)]] = v82[v84[4]];
									end
								elseif (v85 == (212 - 141)) then
									local v849;
									v82[v84[2 + 0]] = v82[v84[406 - (342 + 61)]][v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[167 - (4 + 161)]] = v63[v84[2 + 1]];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[5 - 3]] = v82[v84[3]][v84[501 - (322 + 175)]];
									v76 = v76 + (564 - (173 + 390));
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[3]][v84[318 - (203 + 111)]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[1 + 2]][v84[3 + 1]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[3]] * v84[11 - 7];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[709 - (57 + 649)]] + v82[v84[388 - (328 + 56)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v849 = v84[2];
									v82[v849] = v82[v849](v13(v82, v849 + (513 - (433 + 79)), v84[3]));
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]][v84[3]] = v82[v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[6 - 4]] = v62[v84[14 - 11]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[1039 - (562 + 474)]][v84[9 - 5]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[907 - (76 + 829)]] = v63[v84[3]];
									v76 = v76 + (1674 - (1506 + 167));
									v84 = v72[v76];
									v82[v84[3 - 1]] = v82[v84[3]][v84[270 - (58 + 208)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[3]][v84[3 + 1]];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[339 - (258 + 79)]] = v82[v84[1 + 2]][v84[8 - 4]];
									v76 = v76 + (1471 - (1219 + 251));
									v84 = v72[v76];
									v82[v84[1673 - (1231 + 440)]] = v82[v84[61 - (34 + 24)]] * v84[4];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[3 - 1]] = v82[v84[3]] + v82[v84[2 + 2]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v849 = v84[6 - 4];
									v82[v849] = v82[v849](v13(v82, v849 + (2 - 1), v84[9 - 6]));
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[4 - 2]][v84[1592 - (877 + 712)]] = v82[v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v76 = v84[757 - (242 + 512)];
								else
									local v879 = 0;
									local v880;
									while true do
										if (v879 == (14 - 7)) then
											v84 = v72[v76];
											v82[v84[629 - (92 + 535)]] = v82[v84[3 + 0]][v84[7 - 3]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v879 = 28 - 20;
										end
										if (v879 == (1 + 0)) then
											v82[v84[2 + 0]] = v82[v84[1 + 2]][v84[7 - 3]];
											v76 = v76 + (1 - 0);
											v84 = v72[v76];
											v82[v84[1787 - (1476 + 309)]] = v84[1287 - (299 + 985)];
											v879 = 1 + 1;
										end
										if (v879 == 10) then
											v84 = v72[v76];
											v880 = v84[2];
											v82[v880] = v82[v880](v13(v82, v880 + (3 - 2), v84[96 - (86 + 7)]));
											v76 = v76 + (4 - 3);
											v879 = 2 + 9;
										end
										if (v879 == (880 - (672 + 208))) then
											v880 = nil;
											v82[v84[1 + 1]] = v63[v84[135 - (14 + 118)]];
											v76 = v76 + (446 - (339 + 106));
											v84 = v72[v76];
											v879 = 1 + 0;
										end
										if (v879 == (2 + 1)) then
											v84 = v72[v76];
											v82[v84[1397 - (440 + 955)]] = v84[3 + 0];
											v76 = v76 + 1;
											v84 = v72[v76];
											v879 = 6 - 2;
										end
										if ((v879 == (1 + 1)) or (4248 < 28)) then
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v82[v84[2 + 0]] = v84[356 - (260 + 93)];
											v76 = v76 + 1 + 0;
											v879 = 3;
										end
										if ((2121 >= 437) and (v879 == (20 - 11))) then
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[3 - 1]] = v84[1977 - (1181 + 793)];
											v76 = v76 + 1 + 0;
											v879 = 317 - (105 + 202);
										end
										if (v879 == (5 + 0)) then
											v82[v84[2]][v84[3]] = v82[v84[814 - (352 + 458)]];
											v76 = v76 + (3 - 2);
											v84 = v72[v76];
											v82[v84[4 - 2]] = v62[v84[3 + 0]];
											v879 = 17 - 11;
										end
										if ((v879 == (957 - (438 + 511))) or (686 >= 4798)) then
											v82[v84[1385 - (1262 + 121)]] = v84[1071 - (728 + 340)];
											v76 = v76 + (1791 - (816 + 974));
											v84 = v72[v76];
											v82[v84[5 - 3]] = v84[3];
											v879 = 32 - 23;
										end
										if (v879 == (350 - (163 + 176))) then
											v84 = v72[v76];
											v82[v84[5 - 3]][v84[13 - 10]] = v82[v84[2 + 2]];
											v76 = v76 + (1811 - (1564 + 246));
											v84 = v72[v76];
											v879 = 12;
										end
										if ((v879 == (351 - (124 + 221))) or (1725 > 2699)) then
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[2]] = v63[v84[454 - (115 + 336)]];
											v76 = v76 + (1 - 0);
											v879 = 2 + 5;
										end
										if ((v879 == 12) or (296 == 4133)) then
											v76 = v84[49 - (45 + 1)];
											break;
										end
										if (v879 == (1 + 3)) then
											v880 = v84[1992 - (1282 + 708)];
											v82[v880] = v82[v880](v13(v82, v880 + (1213 - (583 + 629)), v84[1 + 2]));
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v879 = 3 + 2;
										end
									end
								end
							elseif (v85 <= (1246 - (943 + 227))) then
								if ((v85 <= (33 + 41)) or (4764 < 2755)) then
									if (v85 > (1704 - (1539 + 92))) then
										local v881 = v84[1948 - (706 + 1240)];
										v82[v881] = v82[v881](v82[v881 + 1]);
									else
										local v883;
										local v884;
										v884 = v84[260 - (81 + 177)];
										v883 = v82[v84[8 - 5]];
										v82[v884 + (258 - (212 + 45))] = v883;
										v82[v884] = v883[v84[13 - 9]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1948 - (708 + 1238)]] = v62[v84[3]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[1 + 2]][v84[2 + 2]];
										v76 = v76 + (1668 - (586 + 1081));
										v84 = v72[v76];
										v82[v84[513 - (348 + 163)]] = v82[v84[3]][v84[4 + 0]];
										v76 = v76 + (281 - (215 + 65));
										v84 = v72[v76];
										v82[v84[4 - 2]] = v82[v84[1862 - (1541 + 318)]][v84[4 + 0]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v884 = v84[2];
										v82[v884] = v82[v884](v13(v82, v884 + 1, v84[3 + 0]));
										v76 = v76 + (1751 - (1036 + 714));
										v84 = v72[v76];
										v82[v84[2]] = v63[v84[2 + 1]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[1283 - (883 + 397)]][v84[594 - (563 + 27)]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[1988 - (1369 + 617)]] = v63[v84[1490 - (85 + 1402)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[4 - 2]] = v82[v84[406 - (274 + 129)]][v84[221 - (12 + 205)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[7 - 5]] = v82[v84[3]][v84[4 + 0]];
										v76 = v76 + (385 - (27 + 357));
										v84 = v72[v76];
										v82[v84[482 - (91 + 389)]] = v82[v84[300 - (90 + 207)]][v84[1 + 3]];
										v76 = v76 + (862 - (706 + 155));
										v84 = v72[v76];
										v884 = v84[1797 - (730 + 1065)];
										v82[v884] = v82[v884](v13(v82, v884 + 1, v84[3]));
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v63[v84[1566 - (1339 + 224)]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[3 + 0]][v84[5 - 1]];
										v76 = v76 + (844 - (268 + 575));
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[1297 - (919 + 375)]][v84[10 - 6]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[973 - (180 + 791)]] = v82[v84[3]][v84[4]];
										v76 = v76 + (1806 - (323 + 1482));
										v84 = v72[v76];
										v884 = v84[1920 - (1177 + 741)];
										v82[v884] = v82[v884](v13(v82, v884 + 1 + 0, v84[3]));
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[6 - 3]] - v82[v84[1 + 3]];
										v76 = v76 + (110 - (96 + 13));
										v84 = v72[v76];
										v82[v84[1923 - (962 + 959)]] = v82[v84[7 - 4]][v84[1 + 3]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v84[1354 - (461 + 890)];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[7 - 5]] = v63[v84[246 - (19 + 224)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[201 - (37 + 161)]][v84[2 + 2]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v884 = v84[2];
										v82[v884] = v82[v884](v13(v82, v884 + 1 + 0, v84[3]));
									end
								elseif ((v85 > (136 - (60 + 1))) or (786 >= 1259)) then
									local v922;
									v82[v84[925 - (826 + 97)]] = v82[v84[3]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v62[v84[10 - 7]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[687 - (375 + 310)]] = v82[v84[2002 - (1864 + 135)]][v84[9 - 5]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v922 = v84[1 + 1];
									v82[v922](v82[v922 + (2 - 1)]);
									v76 = v76 + (1132 - (314 + 817));
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[217 - (32 + 182)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[6 - 4]] = v62[v84[68 - (39 + 26)]];
									v76 = v76 + (145 - (54 + 90));
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[201 - (45 + 153)]][v84[3 + 1]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v922 = v84[554 - (457 + 95)];
									v82[v922](v82[v922 + 1 + 0]);
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[4 - 2]] = v62[v84[10 - 7]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[10 - 7]][v84[11 - 7]];
									v76 = v76 + (749 - (485 + 263));
									v84 = v72[v76];
									if ((267 <= 3444) and v82[v84[709 - (575 + 132)]]) then
										v76 = v76 + (862 - (750 + 111));
									else
										v76 = v84[1013 - (445 + 565)];
									end
								else
									v82[v84[2]] = v82[v84[3]] - v82[v84[4 + 0]];
								end
							elseif (v85 <= (12 + 66)) then
								if ((v85 == (135 - 58)) or (2547 <= 2030)) then
									v82[v84[1 + 1]] = v84[313 - (189 + 121)];
								else
									local v943;
									v82[v84[1 + 1]] = v82[v84[1350 - (634 + 713)]][v84[4]];
									v76 = v76 + (539 - (493 + 45));
									v84 = v72[v76];
									v82[v84[970 - (493 + 475)]] = v62[v84[1 + 2]];
									v76 = v76 + (785 - (158 + 626));
									v84 = v72[v76];
									v943 = v84[2];
									v82[v943] = v82[v943](v82[v943 + 1 + 0]);
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[1 + 2]];
									v76 = v76 + (1092 - (1035 + 56));
									v84 = v72[v76];
									v943 = v84[2];
									v82[v943](v82[v943 + (960 - (114 + 845))]);
								end
							elseif (v85 > (31 + 48)) then
								local v952 = 0;
								local v953;
								local v954;
								while true do
									if (v952 == (20 - 12)) then
										v82[v84[2]] = v82[v84[3 + 0]] / v82[v84[1053 - (179 + 870)]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v954 = v84[2];
										v82[v954] = v82[v954](v13(v82, v954 + 1, v84[3 - 0]));
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[880 - (827 + 51)]][v84[7 - 4]] = v82[v84[3 + 1]];
										v952 = 9;
									end
									if (v952 == 0) then
										v953 = nil;
										v954 = nil;
										v954 = v84[475 - (95 + 378)];
										v82[v954] = v82[v954](v13(v82, v954 + 1 + 0, v84[4 - 1]));
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v63[v84[3]];
										v76 = v76 + 1;
										v952 = 1012 - (334 + 677);
									end
									if ((v952 == (3 - 2)) or (1508 >= 3337)) then
										v84 = v72[v76];
										v82[v84[1058 - (1049 + 7)]] = v82[v84[13 - 10]][v84[7 - 3]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v84[3];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[3 - 1]] = v84[2 + 1];
										v952 = 2;
									end
									if ((v952 == (1422 - (1004 + 416))) or (590 == 1753)) then
										v76 = v76 + (1958 - (1621 + 336));
										v84 = v72[v76];
										v82[v84[1941 - (337 + 1602)]] = v84[1520 - (1014 + 503)];
										v76 = v76 + 1;
										v84 = v72[v76];
										v954 = v84[1017 - (446 + 569)];
										v82[v954] = v82[v954](v13(v82, v954 + 1 + 0, v84[3]));
										v76 = v76 + (2 - 1);
										v952 = 2 + 1;
									end
									if ((2184 >= 894) and (v952 == 5)) then
										v82[v84[3 - 1]] = v62[v84[1 + 2]];
										v76 = v76 + (506 - (223 + 282));
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[3]][v84[4]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[4 - 1]][v84[5 - 1]];
										v76 = v76 + (671 - (623 + 47));
										v952 = 51 - (32 + 13);
									end
									if ((v952 == (2 + 1)) or (36 > 1926)) then
										v84 = v72[v76];
										v82[v84[2 + 0]] = v62[v84[1804 - (1070 + 731)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1406 - (1257 + 147)]] = v82[v84[2 + 1]][v84[4]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v954 = v84[135 - (98 + 35)];
										v952 = 4;
									end
									if (v952 == (4 + 5)) then
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[6 - 4]] = v62[v84[3 + 0]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[3]][v84[561 - (395 + 162)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v952 = 10;
									end
									if (v952 == (1951 - (816 + 1125))) then
										if v82[v84[2 - 0]] then
											v76 = v76 + (1149 - (701 + 447));
										else
											v76 = v84[4 - 1];
										end
										break;
									end
									if ((419 < 4171) and (v952 == 6)) then
										v84 = v72[v76];
										v82[v84[2 - 0]] = v82[v84[1344 - (391 + 950)]][v84[4]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[4 - 2]] = v62[v84[7 - 4]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[2 + 1]][v84[14 - 10]];
										v952 = 1529 - (251 + 1271);
									end
									if (v952 == (4 + 0)) then
										v953 = v82[v84[7 - 4]];
										v82[v954 + (2 - 1)] = v953;
										v82[v954] = v953[v84[6 - 2]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1261 - (1147 + 112)]] = v82[v84[3]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v952 = 5;
									end
									if (v952 == 7) then
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[700 - (335 + 362)]][v84[4]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2 - 0]] = v82[v84[7 - 4]][v84[14 - 10]];
										v76 = v76 + (4 - 3);
										v84 = v72[v76];
										v952 = 8;
									end
								end
							else
								local v955;
								local v956;
								v956 = v84[5 - 3];
								v955 = v82[v84[569 - (237 + 329)]];
								v82[v956 + 1] = v955;
								v82[v956] = v955[v84[14 - 10]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[1127 - (408 + 716)];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v956 = v84[823 - (344 + 477)];
								v82[v956] = v82[v956](v13(v82, v956 + 1 + 0, v84[1764 - (1188 + 573)]));
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[9 - 6]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[4 - 2]] = v63[v84[1532 - (508 + 1021)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v956 = v84[1168 - (228 + 938)];
								v955 = v82[v84[688 - (332 + 353)]];
								v82[v956 + (1 - 0)] = v955;
								v82[v956] = v955[v84[10 - 6]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[3];
								v76 = v76 + 1;
								v84 = v72[v76];
								v956 = v84[7 - 5];
								v82[v956] = v82[v956](v13(v82, v956 + (424 - (18 + 405)), v84[3]));
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[3 - 0]][v84[4]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[980 - (194 + 784)]] = v84[1773 - (694 + 1076)];
							end
						elseif (v85 <= 88) then
							if (v85 <= (1988 - (122 + 1782))) then
								if (v85 <= (78 + 4)) then
									if ((v85 > (76 + 5)) or (4098 < 1194)) then
										local v978;
										v82[v84[2 + 0]] = v63[v84[3 + 0]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[1973 - (214 + 1756)]][v84[19 - 15]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[3]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v978 = v84[2];
										v82[v978] = v82[v978](v82[v978 + 1]);
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[587 - (217 + 368)]]();
										v76 = v76 + 1;
										v84 = v72[v76];
										v76 = v84[3];
									else
										local v988;
										local v989;
										v989 = v84[5 - 3];
										v82[v989](v13(v82, v989 + 1, v84[2 + 1]));
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v989 = v84[1 + 1];
										v988 = v82[v84[892 - (844 + 45)]];
										v82[v989 + (285 - (242 + 42))] = v988;
										v82[v989] = v988[v84[4]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[4 - 2]] = v84[1203 - (132 + 1068)];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2]] = v84[3];
										v76 = v76 + (1624 - (214 + 1409));
										v84 = v72[v76];
										v989 = v84[2];
										v82[v989] = v82[v989](v13(v82, v989 + 1 + 0, v84[3]));
										v76 = v76 + (1635 - (497 + 1137));
										v84 = v72[v76];
										v989 = v84[942 - (9 + 931)];
										v988 = v82[v84[292 - (181 + 108)]];
										v82[v989 + 1 + 0] = v988;
										v82[v989] = v988[v84[9 - 5]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[2]] = v84[1 + 2];
									end
								elseif (v85 > (52 + 31)) then
									local v1007 = v84[478 - (296 + 180)];
									v82[v1007] = v82[v1007](v13(v82, v1007 + 1, v84[3]));
								else
									local v1009 = 1403 - (1183 + 220);
									local v1010;
									while true do
										if (v1009 == (1274 - (1037 + 228))) then
											v76 = v76 + (1 - 0);
											v84 = v72[v76];
											v82[v84[5 - 3]] = v82[v84[10 - 7]][v84[4]];
											v76 = v76 + (735 - (527 + 207));
											v84 = v72[v76];
											v82[v84[529 - (187 + 340)]] = v82[v84[1873 - (1298 + 572)]] * v84[9 - 5];
											v1009 = 180 - (144 + 26);
										end
										if ((669 <= 2381) and (v1009 == (4 - 2))) then
											v84 = v72[v76];
											v82[v84[4 - 2]] = v82[v84[2 + 1]][v84[4]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[5 - 3]] = v82[v84[6 - 3]][v84[19 - 15]];
											v76 = v76 + 1 + 0;
											v1009 = 3 - 0;
										end
										if (3 == v1009) then
											v84 = v72[v76];
											v82[v84[2 + 0]] = v82[v84[2 + 1]] * v84[4];
											v76 = v76 + (203 - (5 + 197));
											v84 = v72[v76];
											v82[v84[688 - (339 + 347)]] = v62[v84[6 - 3]];
											v76 = v76 + (3 - 2);
											v1009 = 380 - (365 + 11);
										end
										if (v1009 == (0 + 0)) then
											v1010 = nil;
											v82[v84[7 - 5]] = v82[v84[6 - 3]][v84[928 - (837 + 87)]];
											v76 = v76 + (1 - 0);
											v84 = v72[v76];
											v82[v84[1672 - (837 + 833)]] = v63[v84[1 + 2]];
											v76 = v76 + (1388 - (356 + 1031));
											v1009 = 1 + 0;
										end
										if ((1654 - (73 + 1573)) == v1009) then
											v76 = v76 + (1389 - (1307 + 81));
											v84 = v72[v76];
											v82[v84[236 - (7 + 227)]] = v62[v84[4 - 1]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[168 - (90 + 76)]] = v82[v84[9 - 6]][v84[2 + 2]];
											v1009 = 8 + 1;
										end
										if (v1009 == (4 + 0)) then
											v84 = v72[v76];
											v82[v84[7 - 5]] = v82[v84[263 - (197 + 63)]][v84[1 + 3]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[2 + 0]] = v82[v84[1 + 2]][v84[4 - 0]];
											v76 = v76 + (1370 - (618 + 751));
											v1009 = 4 + 1;
										end
										if ((1920 - (206 + 1704)) == v1009) then
											v76 = v76 + (1 - 0);
											v84 = v72[v76];
											v82[v84[2]] = v62[v84[5 - 2]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[1 + 1]] = v82[v84[1278 - (155 + 1120)]][v84[1510 - (396 + 1110)]];
											v1009 = 24 - 13;
										end
										if (v1009 == (5 + 8)) then
											v76 = v84[3];
											break;
										end
										if (v1009 == (4 + 1)) then
											v84 = v72[v76];
											v1010 = v84[2 + 0];
											v82[v1010] = v82[v1010](v13(v82, v1010 + (977 - (230 + 746)), v84[604 - (473 + 128)]));
											v76 = v76 + (49 - (39 + 9));
											v84 = v72[v76];
											v82[v84[268 - (38 + 228)]][v84[5 - 2]] = v82[v84[477 - (106 + 367)]];
											v1009 = 6;
										end
										if (v1009 == (1 + 0)) then
											v84 = v72[v76];
											v82[v84[1864 - (354 + 1508)]] = v82[v84[9 - 6]][v84[3 + 1]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[2 - 0]] = v62[v84[1247 - (334 + 910)]];
											v76 = v76 + 1;
											v1009 = 897 - (92 + 803);
										end
										if ((v1009 == (4 + 3)) or (3577 == 1644)) then
											v76 = v76 + (1182 - (1035 + 146));
											v84 = v72[v76];
											v82[v84[2]] = v63[v84[619 - (230 + 386)]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[2 + 0]] = v82[v84[1513 - (353 + 1157)]][v84[1118 - (53 + 1061)]];
											v1009 = 8;
										end
										if ((1641 - (1568 + 67)) == v1009) then
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[1 + 1]] = v62[v84[7 - 4]];
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v82[v84[2]] = v82[v84[7 - 4]][v84[4]];
											v1009 = 7;
										end
										if ((11 + 0) == v1009) then
											v76 = v76 + (1213 - (615 + 597));
											v84 = v72[v76];
											v82[v84[2 + 0]] = v82[v84[3 - 0]][v84[4 + 0]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v1010 = v84[2 + 0];
											v1009 = 1911 - (1056 + 843);
										end
										if ((v1009 == (25 - 13)) or (3783 == 1711)) then
											v82[v1010] = v82[v1010](v13(v82, v1010 + (1 - 0), v84[8 - 5]));
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[1978 - (286 + 1690)]][v84[3]] = v82[v84[915 - (98 + 813)]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v1009 = 31 - 18;
										end
									end
								end
							elseif (v85 <= (49 + 37)) then
								if (v85 > (592 - (263 + 244))) then
									local v1011;
									local v1012;
									v1012 = v84[2];
									v82[v1012](v13(v82, v1012 + 1 + 0, v84[1690 - (1502 + 185)]));
									v76 = v76 + 1;
									v84 = v72[v76];
									v1012 = v84[1 + 1];
									v1011 = v82[v84[14 - 11]];
									v82[v1012 + (2 - 1)] = v1011;
									v82[v1012] = v1011[v84[4]];
									v76 = v76 + (1528 - (629 + 898));
									v84 = v72[v76];
									v82[v84[2]] = v84[8 - 5];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[367 - (12 + 353)]] = v84[3];
									v76 = v76 + (1912 - (1680 + 231));
									v84 = v72[v76];
									v1012 = v84[1 + 1];
									v82[v1012] = v82[v1012](v13(v82, v1012 + 1 + 0, v84[3]));
									v76 = v76 + 1;
									v84 = v72[v76];
									v1012 = v84[2];
									v1011 = v82[v84[1152 - (212 + 937)]];
									v82[v1012 + 1 + 0] = v1011;
									v82[v1012] = v1011[v84[1066 - (111 + 951)]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v84[30 - (18 + 9)];
								else
									local v1029 = 0 + 0;
									local v1030;
									local v1031;
									while true do
										if (v1029 == (536 - (31 + 503))) then
											v1031 = v84[1634 - (595 + 1037)];
											v1030 = v82[v84[1447 - (189 + 1255)]];
											v82[v1031 + 1 + 0] = v1030;
											v1029 = 4 - 1;
										end
										if ((1330 <= 2351) and (v1029 == (1282 - (1170 + 109)))) then
											v82[v1031] = v1030[v84[1821 - (348 + 1469)]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v1029 = 1293 - (1115 + 174);
										end
										if ((v1029 == (9 - 5)) or (2394 > 4339)) then
											v82[v84[1016 - (85 + 929)]] = v84[2 + 1];
											v76 = v76 + (1868 - (1151 + 716));
											v84 = v72[v76];
											v1029 = 2 + 3;
										end
										if (v1029 == (8 + 0)) then
											v82[v1031 + 1] = v1030;
											v82[v1031] = v1030[v84[1708 - (95 + 1609)]];
											v76 = v76 + (3 - 2);
											v1029 = 767 - (364 + 394);
										end
										if (v1029 == (5 + 0)) then
											v82[v84[1 + 1]] = v84[1 + 2];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v1029 = 4 + 2;
										end
										if (v1029 == (0 + 0)) then
											v1030 = nil;
											v1031 = nil;
											v1031 = v84[1 + 1];
											v1029 = 1 + 0;
										end
										if (v1029 == (3 + 4)) then
											v84 = v72[v76];
											v1031 = v84[958 - (719 + 237)];
											v1030 = v82[v84[8 - 5]];
											v1029 = 7 + 1;
										end
										if (v1029 == (2 - 1)) then
											v82[v1031](v13(v82, v1031 + (2 - 1), v84[3]));
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v1029 = 1993 - (761 + 1230);
										end
										if (v1029 == (202 - (80 + 113))) then
											v84 = v72[v76];
											v82[v84[2 + 0]] = v84[3 + 0];
											break;
										end
										if (v1029 == (1 + 5)) then
											v1031 = v84[7 - 5];
											v82[v1031] = v82[v1031](v13(v82, v1031 + 1, v84[3]));
											v76 = v76 + 1;
											v1029 = 2 + 5;
										end
									end
								end
							elseif ((v85 == (16 + 71)) or (4119 < 1089)) then
								local v1032 = 1243 - (965 + 278);
								local v1033;
								while true do
									if (v1032 == 0) then
										v1033 = nil;
										v82[v84[1731 - (1391 + 338)]] = v82[v84[7 - 4]][v84[4 + 0]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[3 - 1]] = v63[v84[3]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v1032 = 1409 - (496 + 912);
									end
									if (v1032 == (3 - 2)) then
										v82[v84[1 + 1]] = v82[v84[5 - 2]][v84[1334 - (1190 + 140)]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v62[v84[2 + 1]];
										v76 = v76 + (719 - (317 + 401));
										v84 = v72[v76];
										v82[v84[951 - (303 + 646)]] = v82[v84[10 - 7]][v84[1736 - (1675 + 57)]];
										v1032 = 2 + 0;
									end
									if ((20 - 12) == v1032) then
										v82[v84[2]] = v82[v84[1 + 2]] + v84[4];
										v76 = v76 + 1;
										v84 = v72[v76];
										v1033 = v84[979 - (338 + 639)];
										v82[v1033] = v82[v1033](v13(v82, v1033 + 1, v84[3]));
										v76 = v76 + (380 - (320 + 59));
										v84 = v72[v76];
										v1032 = 9;
									end
									if ((1644 < 2156) and (v1032 == (4 + 3))) then
										v84 = v72[v76];
										v82[v84[734 - (628 + 104)]] = v62[v84[3]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[1893 - (439 + 1452)]] = v82[v84[1950 - (105 + 1842)]][v84[18 - 14]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v1032 = 38 - 30;
									end
									if (v1032 == 6) then
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v62[v84[4 - 1]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[1167 - (274 + 890)]][v84[4 + 0]];
										v76 = v76 + 1 + 0;
										v1032 = 2 + 5;
									end
									if (v1032 == (5 + 4)) then
										v82[v84[2 + 0]][v84[3 - 0]] = v82[v84[823 - (731 + 88)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v76 = v84[2 + 1];
										break;
									end
									if (v1032 == (1 + 2)) then
										v84 = v72[v76];
										v82[v84[2 - 0]] = v82[v84[8 - 5]] + v84[4];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v1033 = v84[2];
										v82[v1033] = v82[v1033](v13(v82, v1033 + (1 - 0), v84[3 + 0]));
										v76 = v76 + 1;
										v1032 = 4;
									end
									if (v1032 == (1 + 4)) then
										v82[v84[1 + 1]] = v82[v84[3 + 0]][v84[4]];
										v76 = v76 + (159 - (139 + 19));
										v84 = v72[v76];
										v82[v84[1 + 1]] = v63[v84[1996 - (1687 + 306)]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[7 - 5]] = v82[v84[1157 - (1018 + 136)]][v84[1 + 3]];
										v1032 = 6;
									end
									if (v1032 == (17 - 13)) then
										v84 = v72[v76];
										v82[v84[2]][v84[818 - (117 + 698)]] = v82[v84[485 - (305 + 176)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v62[v84[5 - 2]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v1032 = 5 + 0;
									end
									if ((v1032 == (2 - 0)) or (1305 <= 58)) then
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[2]] = v62[v84[5 - 2]];
										v76 = v76 + (261 - (159 + 101));
										v84 = v72[v76];
										v82[v84[9 - 7]] = v82[v84[10 - 7]][v84[2 + 2]];
										v76 = v76 + 1;
										v1032 = 9 - 6;
									end
								end
							else
								local v1034;
								local v1035;
								v1035 = v84[3 - 1];
								v1034 = v82[v84[3]];
								v82[v1035 + 1] = v1034;
								v82[v1035] = v1034[v84[1 + 3]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[268 - (112 + 154)]] = v84[3];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v1035 = v84[2];
								v82[v1035] = v82[v1035](v13(v82, v1035 + (32 - (21 + 10)), v84[1722 - (531 + 1188)]));
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[665 - (96 + 567)]] = v82[v84[3 - 0]][v84[2 + 2]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v1035 = v84[1697 - (867 + 828)];
								v1034 = v82[v84[6 - 3]];
								v82[v1035 + (3 - 2)] = v1034;
								v82[v1035] = v1034[v84[8 - 4]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2 - 0]] = v82[v84[2 + 1]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v1035 = v84[2];
								v82[v1035](v13(v82, v1035 + (772 - (134 + 637)), v84[1 + 2]));
								v76 = v76 + (1158 - (775 + 382));
								v84 = v72[v76];
								v76 = v84[3 - 0];
							end
						elseif (v85 <= (699 - (45 + 562))) then
							if ((3737 == 3737) and (v85 <= (952 - (545 + 317)))) then
								if (v85 == (131 - 42)) then
									local v1054;
									local v1055;
									v82[v84[1028 - (763 + 263)]] = v84[1 + 2] ~= (1750 - (512 + 1238));
									v76 = v76 + (1595 - (272 + 1322));
									v84 = v72[v76];
									v82[v84[3 - 1]] = v62[v84[3]];
									v76 = v76 + (1247 - (533 + 713));
									v84 = v72[v76];
									v1055 = v84[30 - (14 + 14)];
									v82[v1055](v13(v82, v1055 + (826 - (499 + 326)), v84[4 - 1]));
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[426 - (104 + 320)]] = v63[v84[2000 - (1929 + 68)]];
									v76 = v76 + (1324 - (1206 + 117));
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[3]][v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v1055 = v84[1594 - (683 + 909)];
									v1054 = v82[v84[9 - 6]];
									v82[v1055 + (1 - 0)] = v1054;
									v82[v1055] = v1054[v84[4]];
									v76 = v76 + (778 - (772 + 5));
									v84 = v72[v76];
									v82[v84[1429 - (19 + 1408)]] = v62[v84[291 - (134 + 154)]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[6 - 4]] = v82[v84[3]][v84[2 + 2]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v1055 = v84[204 - (10 + 192)];
									v82[v1055] = v82[v1055](v13(v82, v1055 + (48 - (13 + 34)), v84[3]));
									v76 = v76 + (1290 - (342 + 947));
									v84 = v72[v76];
									if (v82[v84[2]] == v84[16 - 12]) then
										v76 = v76 + (1709 - (119 + 1589));
									else
										v76 = v84[6 - 3];
									end
								else
									local v1075 = 0 - 0;
									local v1076;
									while true do
										if (v1075 == (552 - (545 + 7))) then
											v1076 = v84[5 - 3];
											do
												return v13(v82, v1076, v1076 + v84[2 + 1]);
											end
											break;
										end
									end
								end
							elseif (v85 == 91) then
								local v1077 = v84[1705 - (494 + 1209)];
								local v1078 = v82[v1077];
								local v1079 = v84[7 - 4];
								for v3495 = 1, v1079 do
									v1078[v3495] = v82[v1077 + v3495];
								end
							else
								local v1080;
								local v1081;
								v82[v84[2]] = v82[v84[1001 - (197 + 801)]][v84[7 - 3]];
								v76 = v76 + (4 - 3);
								v84 = v72[v76];
								v82[v84[956 - (919 + 35)]] = v82[v84[3 + 0]][v84[15 - 11]];
								v76 = v76 + (468 - (369 + 98));
								v84 = v72[v76];
								v1081 = v84[1117 - (400 + 715)];
								v1080 = v82[v84[2 + 1]];
								v82[v1081 + 1 + 0] = v1080;
								v82[v1081] = v1080[v84[1329 - (744 + 581)]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[1625 - (653 + 969)]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v1081 = v84[1633 - (12 + 1619)];
								v82[v1081] = v82[v1081](v13(v82, v1081 + (164 - (103 + 60)), v84[14 - 11]));
								v76 = v76 + (4 - 3);
								v84 = v72[v76];
								v82[v84[9 - 7]] = v82[v84[1665 - (710 + 952)]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1870 - (555 + 1313)]] = v84[3 + 0] ~= 0;
								v76 = v76 + 1;
								v84 = v72[v76];
								v63[v84[3 + 0]] = v82[v84[2 + 0]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1470 - (1261 + 207)]] = v84[255 - (245 + 7)] ~= 0;
								v76 = v76 + 1;
								v84 = v72[v76];
								v63[v84[750 - (212 + 535)]] = v82[v84[9 - 7]];
								v76 = v76 + (1477 - (905 + 571));
								v84 = v72[v76];
								v82[v84[2]] = v84[13 - 10];
							end
						elseif (v85 <= 94) then
							if (v85 > (131 - 38)) then
								v82[v84[2]] = v29(v73[v84[11 - 8]], nil, v63);
							else
								local v1103;
								v82[v84[1 + 1]] = v84[1466 - (522 + 941)];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v84[1514 - (292 + 1219)];
								v76 = v76 + (1113 - (787 + 325));
								v84 = v72[v76];
								v82[v84[2]] = v84[3];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v1103 = v84[2 + 0];
								do
									return v82[v1103](v13(v82, v1103 + (2 - 1), v84[3]));
								end
								v76 = v76 + (535 - (424 + 110));
								v84 = v72[v76];
								v1103 = v84[2 + 0];
								do
									return v13(v82, v1103, v77);
								end
							end
						elseif ((3499 >= 2476) and (v85 > (57 + 38))) then
							local v1111 = 0 + 0;
							local v1112;
							while true do
								if ((v1111 == (323 - (33 + 279))) or (143 > 2807)) then
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1355 - (1338 + 15)]] = v82[v84[1426 - (528 + 895)]] + v82[v84[2 + 2]];
									v76 = v76 + (1925 - (1606 + 318));
									v84 = v72[v76];
									v1112 = v84[1821 - (298 + 1521)];
									v1111 = 51 - 39;
								end
								if ((v1111 == (317 - (154 + 156))) or (879 == 420)) then
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[3 - 1]] = v62[v84[3]];
									v76 = v76 + (1116 - (712 + 403));
									v84 = v72[v76];
									v82[v84[452 - (168 + 282)]] = v82[v84[5 - 2]][v84[4 + 0]];
									v1111 = 1 + 7;
								end
								if (v1111 == (14 - 9)) then
									v84 = v72[v76];
									v1112 = v84[2];
									v82[v1112] = v82[v1112](v13(v82, v1112 + (1452 - (1242 + 209)), v84[682 - (20 + 659)]));
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]][v84[3 + 0]] = v82[v84[5 - 1]];
									v1111 = 12 - 6;
								end
								if (v1111 == (627 - (427 + 192))) then
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[1 + 1]] = v62[v84[1950 - (1427 + 520)]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[2 + 1]] + v82[v84[15 - 11]];
									v1111 = 9 + 0;
								end
								if (v1111 == (1234 - (712 + 520))) then
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[6 - 3]] - v82[v84[4]];
									v76 = v76 + (1347 - (565 + 781));
									v84 = v72[v76];
									v82[v84[567 - (35 + 530)]] = v62[v84[2 + 1]];
									v76 = v76 + (3 - 2);
									v1111 = 1381 - (1330 + 48);
								end
								if ((10 == v1111) or (763 >= 4560)) then
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v62[v84[3]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[3 - 1]] = v82[v84[3]] * v84[17 - 13];
									v1111 = 1180 - (854 + 315);
								end
								if (v1111 == 0) then
									v1112 = nil;
									v82[v84[6 - 4]] = v82[v84[3]][v84[2 + 2]];
									v76 = v76 + (45 - (31 + 13));
									v84 = v72[v76];
									v82[v84[2 - 0]] = v62[v84[6 - 3]];
									v76 = v76 + 1 + 0;
									v1111 = 564 - (281 + 282);
								end
								if (v1111 == (24 - 15)) then
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v62[v84[952 - (216 + 733)]];
									v76 = v76 + (1848 - (137 + 1710));
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[8 - 5]][v84[542 - (100 + 438)]];
									v1111 = 1375 - (205 + 1160);
								end
								if ((1654 > 941) and (v1111 == (9 + 3))) then
									v82[v1112] = v82[v1112](v13(v82, v1112 + 1, v84[2 + 1]));
									v76 = v76 + (1306 - (535 + 770));
									v84 = v72[v76];
									v82[v84[1 + 1]][v84[2 + 1]] = v82[v84[1998 - (211 + 1783)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v1111 = 1442 - (1236 + 193);
								end
								if ((2985 > 412) and (v1111 == (914 - (793 + 117)))) then
									v84 = v72[v76];
									v82[v84[1894 - (1607 + 285)]] = v82[v84[863 - (747 + 113)]] * v84[4];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1978 - (80 + 1896)]] = v82[v84[3]] + v82[v84[19 - 15]];
									v76 = v76 + (1 - 0);
									v1111 = 5 + 0;
								end
								if ((v1111 == 3) or (4355 < 2731)) then
									v84 = v72[v76];
									v82[v84[4 - 2]] = v82[v84[3]][v84[3 + 1]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[2 + 0]] = v62[v84[1 + 2]];
									v76 = v76 + (2 - 1);
									v1111 = 458 - (246 + 208);
								end
								if ((v1111 == (1898 - (614 + 1278))) or (1257 > 4918)) then
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[316 - (249 + 65)]] = v63[v84[6 - 3]];
									v76 = v76 + (1276 - (726 + 549));
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[3]][v84[1428 - (916 + 508)]];
									v1111 = 23 - 16;
								end
								if (v1111 == (1 + 0)) then
									v84 = v72[v76];
									v82[v84[325 - (140 + 183)]] = v82[v84[3 + 0]][v84[568 - (297 + 267)]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v62[v84[3]];
									v76 = v76 + (343 - (37 + 305));
									v1111 = 1268 - (323 + 943);
								end
								if ((1998 < 4622) and (v1111 == (6 + 7))) then
									v76 = v84[3 - 0];
									break;
								end
							end
						else
							local v1113 = 1535 - (394 + 1141);
							local v1114;
							local v1115;
							while true do
								if (v1113 == (0 + 0)) then
									v1114 = nil;
									v1115 = nil;
									v82[v84[1 + 1]] = v63[v84[1 + 2]];
									v76 = v76 + 1;
									v1113 = 1 - 0;
								end
								if ((v1113 == (2 - 0)) or (4941 <= 2475)) then
									v82[v84[2 + 0]] = v82[v84[3 + 0]][v84[533 - (87 + 442)]];
									v76 = v76 + (806 - (13 + 792));
									v84 = v72[v76];
									v1115 = v84[2 + 0];
									v1113 = 2 + 1;
								end
								if (v1113 == (7 + 0)) then
									v1115 = v84[2];
									v1114 = v82[v84[3]];
									v82[v1115 + (1866 - (1231 + 634))] = v1114;
									v82[v1115] = v1114[v84[4]];
									v1113 = 1774 - (1362 + 404);
								end
								if (v1113 == (24 - 15)) then
									v84 = v72[v76];
									v82[v84[2 + 0]] = v84[8 - 5];
									break;
								end
								if (v1113 == 8) then
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1018 - (660 + 356)]] = v84[3];
									v76 = v76 + (1 - 0);
									v1113 = 9 + 0;
								end
								if (v1113 == (1953 - (1111 + 839))) then
									v82[v1115] = v82[v1115](v13(v82, v1115 + (952 - (496 + 455)), v84[701 - (66 + 632)]));
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v1115 = v84[1138 - (441 + 695)];
									v1113 = 10 - 6;
								end
								if (v1113 == (7 - 3)) then
									v1114 = v82[v84[14 - 11]];
									v82[v1115 + 1 + 0] = v1114;
									v82[v1115] = v1114[v84[4]];
									v76 = v76 + (1839 - (286 + 1552));
									v1113 = 1282 - (1016 + 261);
								end
								if (v1113 == (1325 - (708 + 612))) then
									v84 = v72[v76];
									v82[v84[5 - 3]] = v84[2 + 1];
									v76 = v76 + (380 - (113 + 266));
									v84 = v72[v76];
									v1113 = 1176 - (979 + 191);
								end
								if ((1 - 0) == v1113) then
									v84 = v72[v76];
									v82[v84[1737 - (339 + 1396)]] = v82[v84[1 + 2]][v84[4 + 0]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v1113 = 2;
								end
								if ((6 + 0) == v1113) then
									v1115 = v84[1 + 1];
									v82[v1115] = v82[v1115](v13(v82, v1115 + (348 - (187 + 160)), v84[3]));
									v76 = v76 + 1;
									v84 = v72[v76];
									v1113 = 15 - 8;
								end
							end
						end
					elseif (v85 <= (386 - 274)) then
						if (v85 <= (16 + 88)) then
							if (v85 <= (313 - 213)) then
								if (v85 <= (12 + 86)) then
									if ((1866 == 1866) and (v85 == 97)) then
										local v1116 = 0;
										local v1117;
										local v1118;
										while true do
											if (v1116 == (1 + 9)) then
												v84 = v72[v76];
												v82[v84[3 - 1]] = v84[331 - (56 + 272)];
												break;
											end
											if (v1116 == (2 + 1)) then
												v82[v84[2 + 0]] = v84[6 - 3];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v1118 = v84[642 - (455 + 185)];
												v1116 = 792 - (757 + 31);
											end
											if (v1116 == (2000 - (762 + 1237))) then
												v76 = v76 + 1;
												v84 = v72[v76];
												v1118 = v84[3 - 1];
												v1117 = v82[v84[272 - (265 + 4)]];
												v1116 = 4 - 2;
											end
											if (v1116 == (3 + 1)) then
												v82[v1118] = v82[v1118](v13(v82, v1118 + (1 - 0), v84[8 - 5]));
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v1118 = v84[2];
												v1116 = 13 - 8;
											end
											if ((10 - 5) == v1116) then
												v1117 = v82[v84[5 - 2]];
												v82[v1118 + 1] = v1117;
												v82[v1118] = v1117[v84[4]];
												v76 = v76 + (1735 - (1691 + 43));
												v1116 = 6;
											end
											if (v1116 == (0 + 0)) then
												v1117 = nil;
												v1118 = nil;
												v1118 = v84[2];
												v82[v1118](v13(v82, v1118 + 1, v84[9 - 6]));
												v1116 = 1 + 0;
											end
											if (v1116 == (32 - 23)) then
												v1117 = v82[v84[179 - (127 + 49)]];
												v82[v1118 + 1] = v1117;
												v82[v1118] = v1117[v84[1684 - (281 + 1399)]];
												v76 = v76 + (1660 - (184 + 1475));
												v1116 = 12 - 2;
											end
											if (v1116 == 2) then
												v82[v1118 + 1] = v1117;
												v82[v1118] = v1117[v84[4]];
												v76 = v76 + 1;
												v84 = v72[v76];
												v1116 = 6 - 3;
											end
											if (v1116 == (15 - 8)) then
												v82[v84[2]] = v84[3];
												v76 = v76 + 1 + 0;
												v84 = v72[v76];
												v1118 = v84[2 + 0];
												v1116 = 1299 - (260 + 1031);
											end
											if (v1116 == (1185 - (313 + 864))) then
												v82[v1118] = v82[v1118](v13(v82, v1118 + (693 - (655 + 37)), v84[3 + 0]));
												v76 = v76 + (1 - 0);
												v84 = v72[v76];
												v1118 = v84[4 - 2];
												v1116 = 4 + 5;
											end
											if ((6 == v1116) or (2064 <= 952)) then
												v84 = v72[v76];
												v82[v84[2 + 0]] = v84[3];
												v76 = v76 + (1 - 0);
												v84 = v72[v76];
												v1116 = 7;
											end
										end
									else
										local v1119;
										local v1120;
										local v1119, v1121;
										local v1122;
										local v1123;
										v82[v84[772 - (383 + 387)]] = v63[v84[1 + 2]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[6 - 4]] = v82[v84[1 + 2]][v84[1 + 3]];
										v76 = v76 + (511 - (304 + 206));
										v84 = v72[v76];
										v1123 = v84[227 - (182 + 43)];
										v1122 = v82[v84[778 - (264 + 511)]];
										v82[v1123 + 1 + 0] = v1122;
										v82[v1123] = v1122[v84[9 - 5]];
										v76 = v76 + (982 - (128 + 853));
										v84 = v72[v76];
										v1123 = v84[2];
										v1119, v1121 = v75(v82[v1123](v82[v1123 + (1703 - (1635 + 67))]));
										v77 = (v1121 + v1123) - (1 + 0);
										v1120 = 0;
										for v3498 = v1123, v77 do
											local v3499 = 0 + 0;
											while true do
												if ((v3499 == (197 - (131 + 66))) or (3391 <= 2819)) then
													v1120 = v1120 + (3 - 2);
													v82[v3498] = v1119[v1120];
													break;
												end
											end
										end
										v76 = v76 + (4 - 3);
										v84 = v72[v76];
										v1123 = v84[1 + 1];
										v1119 = {v82[v1123](v13(v82, v1123 + 1, v77))};
										v1120 = 0 - 0;
										for v3500 = v1123, v84[6 - 2] do
											local v3501 = 1605 - (306 + 1299);
											while true do
												if ((v3501 == (0 + 0)) or (2212 < 1510)) then
													v1120 = v1120 + (2 - 1);
													v82[v3500] = v1119[v1120];
													break;
												end
											end
										end
										v76 = v76 + (790 - (671 + 118));
										v84 = v72[v76];
										v76 = v84[11 - 8];
									end
								elseif ((3413 < 4845) and (v85 == (175 - (73 + 3)))) then
									local v1137 = 0 - 0;
									local v1138;
									while true do
										if (v1137 == (23 - 18)) then
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v82[v84[2]] = v84[1758 - (1668 + 87)];
											v1137 = 1 + 5;
										end
										if ((4586 > 2994) and (v1137 == 6)) then
											v76 = v76 + (1900 - (296 + 1603));
											v84 = v72[v76];
											v76 = v84[109 - (79 + 27)];
											break;
										end
										if (v1137 == (0 + 0)) then
											v1138 = nil;
											v82[v84[1009 - (700 + 307)]] = v82[v84[3 + 0]][v84[4]];
											v76 = v76 + (1800 - (1477 + 322));
											v1137 = 1 + 0;
										end
										if (v1137 == (2 - 1)) then
											v84 = v72[v76];
											v82[v84[2 + 0]] = v84[9 - 6];
											v76 = v76 + 1;
											v1137 = 2;
										end
										if ((v1137 == (4 + 0)) or (2708 == 865)) then
											v76 = v76 + (4 - 3);
											v84 = v72[v76];
											v82[v84[2]][v84[7 - 4]] = v82[v84[4]];
											v1137 = 3 + 2;
										end
										if (v1137 == (4 - 2)) then
											v84 = v72[v76];
											v82[v84[2 - 0]] = v84[5 - 2];
											v76 = v76 + 1;
											v1137 = 3;
										end
										if ((196 < 810) and (v1137 == (1789 - (20 + 1766)))) then
											v84 = v72[v76];
											v1138 = v84[3 - 1];
											v82[v1138] = v82[v1138](v13(v82, v1138 + (810 - (88 + 721)), v84[3]));
											v1137 = 4;
										end
									end
								else
									local v1139;
									local v1140;
									v1140 = v84[2 + 0];
									v82[v1140](v13(v82, v1140 + 1 + 0, v84[2 + 1]));
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v1140 = v84[4 - 2];
									v1139 = v82[v84[5 - 2]];
									v82[v1140 + (438 - (93 + 344))] = v1139;
									v82[v1140] = v1139[v84[1217 - (960 + 253)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[5 - 3]] = v84[8 - 5];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1418 - (74 + 1342)]] = v84[1 + 2];
									v76 = v76 + (475 - (33 + 441));
									v84 = v72[v76];
									v1140 = v84[5 - 3];
									v82[v1140] = v82[v1140](v13(v82, v1140 + 1, v84[1422 - (64 + 1355)]));
									v76 = v76 + 1;
									v84 = v72[v76];
									v1140 = v84[2 - 0];
									v1139 = v82[v84[14 - (5 + 6)]];
									v82[v1140 + 1 + 0] = v1139;
									v82[v1140] = v1139[v84[4]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v84[449 - (369 + 77)];
								end
							elseif (v85 <= (26 + 76)) then
								if ((1352 <= 4245) and (v85 == (839 - (438 + 300)))) then
									local v1159 = 294 - (50 + 244);
									local v1160;
									while true do
										if (v1159 == (1204 - (95 + 1106))) then
											v84 = v72[v76];
											v1160 = v84[3 - 1];
											v82[v1160](v13(v82, v1160 + (4 - 3), v84[1899 - (1741 + 155)]));
											v1159 = 11 - 7;
										end
										if (v1159 == 2) then
											v84 = v72[v76];
											v82[v84[2 - 0]] = v84[3];
											v76 = v76 + (1 - 0);
											v1159 = 2 + 1;
										end
										if (v1159 == (2 + 2)) then
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v76 = v84[7 - 4];
											break;
										end
										if ((4997 >= 3607) and ((2 - 1) == v1159)) then
											v84 = v72[v76];
											v82[v84[1779 - (1263 + 514)]] = v84[500 - (73 + 424)];
											v76 = v76 + 1;
											v1159 = 4 - 2;
										end
										if (v1159 == (308 - (93 + 215))) then
											v1160 = nil;
											v82[v84[6 - 4]] = v84[3];
											v76 = v76 + (1936 - (1756 + 179));
											v1159 = 1680 - (550 + 1129);
										end
									end
								else
									local v1161 = 0;
									local v1162;
									local v1163;
									local v1164;
									while true do
										if (v1161 == 0) then
											v1162 = v84[109 - (57 + 50)];
											v1163 = v82[v1162];
											v1161 = 630 - (30 + 599);
										end
										if (v1161 == 1) then
											v1164 = v82[v1162 + 1 + 1];
											if (v1164 > 0) then
												if (v1163 > v82[v1162 + (1 - 0)]) then
													v76 = v84[921 - (794 + 124)];
												else
													v82[v1162 + 1 + 2] = v1163;
												end
											elseif (v1163 < v82[v1162 + 1 + 0]) then
												v76 = v84[3];
											else
												v82[v1162 + 3] = v1163;
											end
											break;
										end
									end
								end
							elseif (v85 == 103) then
								local v1165;
								local v1166;
								v1166 = v84[2];
								v82[v1166](v13(v82, v1166 + (1 - 0), v84[1930 - (1299 + 628)]));
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v1166 = v84[5 - 3];
								v1165 = v82[v84[3 + 0]];
								v82[v1166 + (2 - 1)] = v1165;
								v82[v1166] = v1165[v84[1449 - (335 + 1110)]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v84[3 + 0];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[3 - 1]] = v84[335 - (268 + 64)];
								v76 = v76 + 1;
								v84 = v72[v76];
								v1166 = v84[2];
								v82[v1166] = v82[v1166](v13(v82, v1166 + 1 + 0, v84[1281 - (243 + 1035)]));
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v1166 = v84[9 - 7];
								v1165 = v82[v84[3]];
								v82[v1166 + (4 - 3)] = v1165;
								v82[v1166] = v1165[v84[3 + 1]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v84[3 - 0];
							else
								local v1183 = v84[102 - (90 + 10)];
								local v1184 = {v82[v1183](v13(v82, v1183 + (805 - (209 + 595)), v84[3]))};
								local v1185 = 805 - (603 + 202);
								for v3502 = v1183, v84[3 + 1] do
									v1185 = v1185 + (3 - 2);
									v82[v3502] = v1184[v1185];
								end
							end
						elseif (v85 <= 108) then
							if (v85 <= (52 + 54)) then
								if (v85 > (297 - 192)) then
									local v1186;
									v82[v84[1 + 1]] = v63[v84[8 - 5]];
									v76 = v76 + (4 - 3);
									v84 = v72[v76];
									v82[v84[281 - (174 + 105)]] = v82[v84[9 - 6]][v84[917 - (532 + 381)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[841 - (137 + 702)]] = v84[8 - 5];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[7 - 5]] = v84[1889 - (1819 + 67)];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v84[1 + 2];
									v76 = v76 + (1358 - (259 + 1098));
									v84 = v72[v76];
									v1186 = v84[2 + 0];
									v82[v1186] = v82[v1186](v13(v82, v1186 + 1, v84[1 + 2]));
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[6 - 4]][v84[2 + 1]] = v82[v84[4 + 0]];
									v76 = v76 + (4 - 3);
									v84 = v72[v76];
									v82[v84[1708 - (667 + 1039)]] = v84[1022 - (274 + 745)];
								else
									local v1204 = 0;
									local v1205;
									while true do
										if (v1204 == 2) then
											v82[v84[2 + 0]] = v84[3];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[432 - (288 + 142)]] = v84[1309 - (301 + 1005)];
											v76 = v76 + 1 + 0;
											v1204 = 3;
										end
										if ((v1204 == (14 - 8)) or (3251 >= 3431)) then
											v76 = v76 + (1874 - (674 + 1199));
											v84 = v72[v76];
											v82[v84[2 + 0]] = v82[v84[2 + 1]][v84[4]];
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v1204 = 29 - 22;
										end
										if ((v1204 == (1 + 3)) or (2941 < 2668)) then
											v82[v84[447 - (92 + 353)]][v84[3 + 0]] = v82[v84[9 - 5]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[3 - 1]] = v62[v84[8 - 5]];
											v76 = v76 + 1 + 0;
											v1204 = 8 - 3;
										end
										if (v1204 == (0 - 0)) then
											v1205 = nil;
											v82[v84[2]] = v82[v84[12 - 9]][v84[4 + 0]];
											v76 = v76 + (1 - 0);
											v84 = v72[v76];
											v82[v84[267 - (34 + 231)]] = v63[v84[3]];
											v1204 = 1318 - (930 + 387);
										end
										if (v1204 == (8 + 0)) then
											v84 = v72[v76];
											v1205 = v84[2 + 0];
											v82[v1205] = v82[v1205](v13(v82, v1205 + (2 - 1), v84[700 - (389 + 308)]));
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v1204 = 9;
										end
										if (v1204 == (15 - 8)) then
											v82[v84[5 - 3]] = v84[3];
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[2]] = v84[3];
											v76 = v76 + 1;
											v1204 = 4 + 4;
										end
										if ((v1204 == (323 - (125 + 197))) or (1107 > 2054)) then
											v76 = v76 + (998 - (339 + 658));
											v84 = v72[v76];
											v82[v84[4 - 2]] = v82[v84[5 - 2]][v84[4]];
											v76 = v76 + (1349 - (743 + 605));
											v84 = v72[v76];
											v1204 = 2 + 0;
										end
										if ((2878 >= 701) and (3 == v1204)) then
											v84 = v72[v76];
											v1205 = v84[1 + 1];
											v82[v1205] = v82[v1205](v13(v82, v1205 + 1, v84[11 - 8]));
											v76 = v76 + 1;
											v84 = v72[v76];
											v1204 = 12 - 8;
										end
										if ((v1204 == 5) or (185 >= 3102)) then
											v84 = v72[v76];
											v82[v84[2 + 0]] = v82[v84[252 - (197 + 52)]][v84[8 - 4]];
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v82[v84[2 + 0]] = v63[v84[2 + 1]];
											v1204 = 10 - 4;
										end
										if ((v1204 == (30 - 21)) or (2456 > 3197)) then
											v82[v84[4 - 2]][v84[2 + 1]] = v82[v84[5 - 1]];
											v76 = v76 + (1098 - (97 + 1000));
											v84 = v72[v76];
											v82[v84[6 - 4]] = v84[1848 - (143 + 1702)];
											break;
										end
									end
								end
							elseif (v85 > (224 - 117)) then
								local v1206;
								local v1207;
								local v1208;
								local v1209;
								local v1210;
								local v1211;
								v82[v84[371 - (40 + 329)]] = v84[3] ~= (0 + 0);
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v62[v84[3 - 0]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v1211 = v84[1 + 1];
								v82[v1211](v13(v82, v1211 + (66 - (9 + 56)), v84[587 - (531 + 53)]));
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v1211 = v84[775 - (89 + 684)];
								v1210 = {};
								for v3505 = 1 + 0, #v81 do
									v1209 = v81[v3505];
									for v3636 = 0, #v1209 do
										v1208 = v1209[v3636];
										v1207 = v1208[1 + 0];
										v1206 = v1208[1 + 1];
										if ((3756 >= 1313) and (v1207 == v82) and (v1206 >= v1211)) then
											local v5658 = 0;
											while true do
												if ((v5658 == (0 - 0)) or (1685 >= 1846)) then
													v1210[v1206] = v1207[v1206];
													v1208[1] = v1210;
													break;
												end
											end
										end
									end
								end
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v76 = v84[3 + 0];
							else
								local v1219 = 613 - (238 + 375);
								local v1220;
								local v1221;
								while true do
									if (v1219 == (0 + 0)) then
										v1220 = nil;
										v1221 = nil;
										v82[v84[2 - 0]] = v82[v84[3 + 0]][v84[11 - 7]];
										v76 = v76 + 1;
										v1219 = 1;
									end
									if (1 == v1219) then
										v84 = v72[v76];
										v1221 = v84[5 - 3];
										v1220 = v82[v84[8 - 5]];
										v82[v1221 + 1] = v1220;
										v1219 = 3 - 1;
									end
									if ((v1219 == (14 - 10)) or (2731 < 1524)) then
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										if ((v82[v84[2 + 0]] ~= v84[1 + 3]) or (1199 == 2716)) then
											v76 = v76 + 1;
										else
											v76 = v84[2 + 1];
										end
										break;
									end
									if (v1219 == (465 - (428 + 34))) then
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v1221 = v84[2 - 0];
										v82[v1221] = v82[v1221](v13(v82, v1221 + (2 - 1), v84[6 - 3]));
										v1219 = 4;
									end
									if (v1219 == (920 - (223 + 695))) then
										v82[v1221] = v1220[v84[4]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[513 - (329 + 182)]] = v84[3];
										v1219 = 1 + 2;
									end
								end
							end
						elseif (v85 <= (188 - 78)) then
							if (v85 == (15 + 94)) then
								local v1222;
								v82[v84[1 + 1]] = v63[v84[2 + 1]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[3 - 1]] = v82[v84[3]][v84[4]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v63[v84[3 - 0]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1202 - (177 + 1023)]] = v82[v84[5 - 2]][v84[2 + 2]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[4 - 2]] = v82[v84[1468 - (120 + 1345)]];
								v76 = v76 + (338 - (8 + 329));
								v84 = v72[v76];
								v1222 = v84[127 - (19 + 106)];
								v82[v1222](v13(v82, v1222 + (3 - 2), v84[3 - 0]));
								v76 = v76 + 1;
								v84 = v72[v76];
								v76 = v84[3 + 0];
							else
								local v1236;
								v82[v84[5 - 3]] = v63[v84[7 - 4]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[3 - 1]] = v82[v84[1 + 2]][v84[1507 - (957 + 546)]];
								v76 = v76 + (4 - 3);
								v84 = v72[v76];
								v82[v84[1 + 1]] = v63[v84[1 + 2]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[2 + 1]][v84[707 - (227 + 476)]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[3 - 1]] = v82[v84[4 - 1]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v1236 = v84[3 - 1];
								v82[v1236](v13(v82, v1236 + (1 - 0), v84[957 - (166 + 788)]));
								v76 = v76 + 1;
								v84 = v72[v76];
								v76 = v84[989 - (21 + 965)];
							end
						elseif (v85 > 111) then
							if (v82[v84[2]] < v82[v84[4]]) then
								v76 = v76 + (697 - (127 + 569));
							else
								v76 = v84[3];
							end
						else
							v82[v84[2]] = v82[v84[3]];
						end
					elseif (v85 <= (102 + 18)) then
						if (v85 <= (38 + 78)) then
							if (v85 <= 114) then
								if ((v85 > (41 + 72)) or (2248 < 1392)) then
									local v1250;
									local v1251, v1252;
									local v1253;
									v82[v84[2]] = v82[v84[4 - 1]][v84[3 + 1]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[1 + 1]]();
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v62[v84[1295 - (1162 + 130)]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[3 + 0]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[2]] = v63[v84[3]];
									v76 = v76 + (937 - (889 + 47));
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[1267 - (1153 + 111)]][v84[4]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2]] = v84[2 + 1];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v84[1 + 2];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v84[5 - 2];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v1253 = v84[98 - (23 + 73)];
									v82[v1253] = v82[v1253](v13(v82, v1253 + (286 - (26 + 259)), v84[2 + 1]));
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2]] = v62[v84[3]];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[1632 - (1094 + 535)]][v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1878 - (1554 + 322)]] = v82[v84[1428 - (989 + 436)]] + v82[v84[1182 - (816 + 362)]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[4 - 2]] = v63[v84[11 - 8]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[4 - 1]][v84[9 - 5]];
									v76 = v76 + (4 - 3);
									v84 = v72[v76];
									v82[v84[1 + 1]] = v63[v84[766 - (86 + 677)]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[1 + 2]][v84[1030 - (263 + 763)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[860 - (649 + 209)]] = v82[v84[3]];
									v76 = v76 + (4 - 3);
									v84 = v72[v76];
									v1253 = v84[733 - (643 + 88)];
									v82[v1253] = v82[v1253](v82[v1253 + (1770 - (54 + 1715))]);
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[7 - 5]] = v84[8 - 5];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2]] = v84[3 + 0];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v1253 = v84[7 - 5];
									v1251, v1252 = v75(v82[v1253](v13(v82, v1253 + 1, v84[1386 - (132 + 1251)])));
									v77 = (v1252 + v1253) - (1 + 0);
									v1250 = 0 - 0;
									for v3507 = v1253, v77 do
										local v3508 = 0;
										while true do
											if (v3508 == 0) then
												v1250 = v1250 + 1;
												v82[v3507] = v1251[v1250];
												break;
											end
										end
									end
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v1253 = v84[460 - (185 + 273)];
									v82[v1253](v13(v82, v1253 + 1 + 0, v77));
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[1 + 1]] = v63[v84[1227 - (361 + 863)]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[1329 - (443 + 884)]] = v82[v84[7 - 4]][v84[1 + 3]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2]]();
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v62[v84[3]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[4 - 2]] = v82[v84[750 - (16 + 731)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v63[v84[3 + 0]];
									v76 = v76 + (761 - (527 + 233));
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[3]][v84[8 - 4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1787 - (1107 + 678)]] = v84[3 + 0];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[52 - (4 + 46)]] = v84[3];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[7 - 5]] = v84[5 - 2];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v1253 = v84[2];
									v82[v1253] = v82[v1253](v13(v82, v1253 + (1 - 0), v84[4 - 1]));
									v76 = v76 + (1397 - (1262 + 134));
									v84 = v72[v76];
									v82[v84[4 - 2]] = v62[v84[1 + 2]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[797 - (383 + 412)]] = v82[v84[3 + 0]][v84[1 + 3]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[1 + 2]] + v82[v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2 - 0]] = v63[v84[3 + 0]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[3]][v84[4 - 0]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[1 + 1]] = v63[v84[3]];
									v76 = v76 + (708 - (667 + 40));
									v84 = v72[v76];
									v82[v84[1312 - (436 + 874)]] = v82[v84[1609 - (762 + 844)]][v84[6 - 2]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[1 + 2]];
									v76 = v76 + (477 - (209 + 267));
									v84 = v72[v76];
									v1253 = v84[3 - 1];
									v82[v1253] = v82[v1253](v82[v1253 + (2 - 1)]);
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1713 - (1611 + 100)]] = v84[3 + 0];
									v76 = v76 + (785 - (14 + 770));
									v84 = v72[v76];
									v82[v84[1786 - (1165 + 619)]] = v84[4 - 1];
									v76 = v76 + (382 - (229 + 152));
									v84 = v72[v76];
									v1253 = v84[196 - (107 + 87)];
									v1251, v1252 = v75(v82[v1253](v13(v82, v1253 + (1 - 0), v84[2 + 1])));
									v77 = (v1252 + v1253) - (1 + 0);
									v1250 = 0 - 0;
									for v3509 = v1253, v77 do
										v1250 = v1250 + (3 - 2);
										v82[v3509] = v1251[v1250];
									end
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v1253 = v84[2];
									v82[v1253](v13(v82, v1253 + 1, v77));
									v76 = v76 + (15 - (13 + 1));
									v84 = v72[v76];
									v82[v84[2 + 0]] = v84[2 + 1];
								else
									local v1307;
									v82[v84[1060 - (987 + 71)]] = v82[v84[8 - 5]][v84[4]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[701 - (514 + 185)]] = v62[v84[1 + 2]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[3]][v84[7 - 3]];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[1506 - (771 + 733)]] = v62[v84[5 - 2]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[1169 - (407 + 760)]] = v82[v84[2 + 1]] + v82[v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v62[v84[3]];
									v76 = v76 + (1855 - (169 + 1685));
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[3]][v84[395 - (41 + 350)]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[5 - 3]] = v62[v84[12 - 9]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[890 - (790 + 97)]] * v84[18 - 14];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[3]] - v82[v84[2 + 2]];
									v76 = v76 + (246 - (235 + 10));
									v84 = v72[v76];
									v1307 = v84[2 + 0];
									v82[v1307] = v82[v1307](v13(v82, v1307 + 1, v84[5 - 2]));
									v76 = v76 + (1184 - (887 + 296));
									v84 = v72[v76];
									v82[v84[2]][v84[1048 - (512 + 533)]] = v82[v84[1428 - (662 + 762)]];
									v76 = v76 + (678 - (334 + 343));
									v84 = v72[v76];
									v82[v84[6 - 4]] = v63[v84[492 - (198 + 291)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[3]][v84[578 - (141 + 433)]];
									v76 = v76 + (4 - 3);
									v84 = v72[v76];
									v82[v84[2 + 0]] = v62[v84[780 - (227 + 550)]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[5 - 3]] = v82[v84[106 - (72 + 31)]][v84[352 - (89 + 259)]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v62[v84[3 + 0]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[3 - 1]] = v82[v84[2 + 1]] - v82[v84[4]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2]] = v62[v84[3]];
									v76 = v76 + (1404 - (1333 + 70));
									v84 = v72[v76];
									v82[v84[1834 - (701 + 1131)]] = v82[v84[130 - (55 + 72)]][v84[160 - (99 + 57)]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2]] = v62[v84[3]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1581 - (1243 + 336)]] = v82[v84[1332 - (774 + 555)]] * v84[4];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[2 + 1]] - v82[v84[803 - (150 + 649)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v1307 = v84[2];
									v82[v1307] = v82[v1307](v13(v82, v1307 + (1 - 0), v84[5 - 2]));
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]][v84[3]] = v82[v84[1988 - (1122 + 862)]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[1 + 1]] = v84[5 - 2];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v76 = v84[1 + 2];
								end
							elseif (v85 == 115) then
								local v1343;
								v82[v84[745 - (549 + 194)]] = v84[2 + 1];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[7 - 5]] = v84[3];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 - 0]] = v84[3];
								v76 = v76 + 1;
								v84 = v72[v76];
								v1343 = v84[2 + 0];
								v82[v1343](v13(v82, v1343 + (3 - 2), v84[1706 - (453 + 1250)]));
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v76 = v84[3 + 0];
							else
								local v1352;
								local v1353, v1354;
								local v1355;
								v82[v84[577 - (203 + 372)]] = v82[v84[1 + 2]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[5 - 3]] = v63[v84[1385 - (978 + 404)]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[321 - (56 + 262)]][v84[2 + 2]];
								v76 = v76 + (115 - (108 + 6));
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[3 + 0];
								v76 = v76 + (1953 - (653 + 1299));
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[2 + 1];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[2]] = v62[v84[1925 - (1042 + 880)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[1005 - (16 + 986)]][v84[1222 - (700 + 518)]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3 - 0]][v84[1515 - (617 + 894)]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = -v82[v84[3]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[5 - 2]] / v84[462 - (271 + 187)];
								v76 = v76 + 1;
								v84 = v72[v76];
								v1355 = v84[1586 - (731 + 853)];
								v82[v1355] = v82[v1355](v13(v82, v1355 + 1, v84[10 - 7]));
								v76 = v76 + (1522 - (199 + 1322));
								v84 = v72[v76];
								v82[v84[3 - 1]] = v63[v84[2 + 1]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1662 - (1291 + 369)]] = v82[v84[1 + 2]][v84[4]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[3];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v84[3];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[687 - (561 + 124)]] = v84[3 + 0];
								v76 = v76 + (854 - (25 + 828));
								v84 = v72[v76];
								v1355 = v84[2];
								v1353, v1354 = v75(v82[v1355](v13(v82, v1355 + (2 - 1), v84[4 - 1])));
								v77 = (v1354 + v1355) - 1;
								v1352 = 590 - (99 + 491);
								for v3512 = v1355, v77 do
									v1352 = v1352 + (49 - (18 + 30));
									v82[v3512] = v1353[v1352];
								end
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v1355 = v84[3 - 1];
								v82[v1355](v13(v82, v1355 + (1 - 0), v77));
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v63[v84[9 - 6]];
								v76 = v76 + (733 - (501 + 231));
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[1701 - (470 + 1228)]][v84[4 + 0]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]]();
								v76 = v76 + (687 - (537 + 149));
								v84 = v72[v76];
								v82[v84[2]] = v62[v84[3 - 0]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[2 + 1]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[6 - 4]] = v63[v84[8 - 5]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[2 + 1]][v84[2 + 2]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v84[3];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 - 0]] = v84[3];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[581 - (134 + 445)]] = v62[v84[5 - 2]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[3]][v84[15 - 11]];
								v76 = v76 + (261 - (36 + 224));
								v84 = v72[v76];
								v82[v84[1862 - (1033 + 827)]] = v82[v84[1849 - (1002 + 844)]][v84[1354 - (1126 + 224)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[9 - 6]] / v84[68 - (48 + 16)];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v1355 = v84[9 - 7];
								v82[v1355] = v82[v1355](v13(v82, v1355 + (3 - 2), v84[3]));
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v63[v84[1092 - (910 + 179)]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[3 - 1]] = v82[v84[3]][v84[4]];
								v76 = v76 + (1380 - (933 + 446));
								v84 = v72[v76];
								v82[v84[1 + 1]] = v63[v84[1527 - (248 + 1276)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[2 + 1]][v84[13 - 9]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[6 - 4]] = v84[3];
								v76 = v76 + (1546 - (151 + 1394));
								v84 = v72[v76];
								v1355 = v84[2];
								v82[v1355] = v82[v1355](v82[v1355 + (945 - (929 + 15))]);
								v76 = v76 + (1997 - (1173 + 823));
								v84 = v72[v76];
								v82[v84[2 - 0]] = v84[1779 - (482 + 1294)];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[2]] = v84[2 + 1];
								v76 = v76 + (1307 - (1125 + 181));
								v84 = v72[v76];
								v1355 = v84[5 - 3];
								v1353, v1354 = v75(v82[v1355](v13(v82, v1355 + 1, v84[2 + 1])));
								v77 = (v1354 + v1355) - 1;
								v1352 = 0 - 0;
								for v3515 = v1355, v77 do
									v1352 = v1352 + (1190 - (626 + 563));
									v82[v3515] = v1353[v1352];
								end
								v76 = v76 + (1251 - (153 + 1097));
								v84 = v72[v76];
								v1355 = v84[2];
								v82[v1355](v13(v82, v1355 + 1, v77));
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[1 + 1]] = v63[v84[7 - 4]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[1 + 2]][v84[3 + 1]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1159 - (199 + 958)]]();
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v84[3];
							end
						elseif (v85 <= 118) then
							if (v85 == (276 - 159)) then
								local v1402 = 0;
								local v1403;
								local v1404;
								while true do
									if ((6 - 3) == v1402) then
										v76 = v76 + (1177 - (1169 + 7));
										v84 = v72[v76];
										v1404 = v84[2];
										v82[v1404] = v82[v1404](v13(v82, v1404 + (1874 - (751 + 1122)), v84[1 + 2]));
										v1402 = 4 + 0;
									end
									if (4 == v1402) then
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[1 + 2]][v84[6 - 2]];
										v76 = v76 + (1182 - (589 + 592));
										v1402 = 9 - 4;
									end
									if (v1402 == (2 + 3)) then
										v84 = v72[v76];
										v1404 = v84[26 - (13 + 11)];
										v1403 = v82[v84[3]];
										v82[v1404 + 1 + 0] = v1403;
										v1402 = 1 + 5;
									end
									if (v1402 == 2) then
										v82[v1404] = v1403[v84[4]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1262 - (684 + 576)]] = v84[2 + 1];
										v1402 = 7 - 4;
									end
									if ((4912 > 2728) and (v1402 == (1 + 0))) then
										v84 = v72[v76];
										v1404 = v84[1 + 1];
										v1403 = v82[v84[3 - 0]];
										v82[v1404 + 1 + 0] = v1403;
										v1402 = 2;
									end
									if (v1402 == (6 + 0)) then
										v82[v1404] = v1403[v84[3 + 1]];
										break;
									end
									if ((0 + 0) == v1402) then
										v1403 = nil;
										v1404 = nil;
										v82[v84[1 + 1]] = v63[v84[1851 - (230 + 1618)]];
										v76 = v76 + 1;
										v1402 = 1 + 0;
									end
								end
							else
								local v1405 = v84[1 + 1];
								local v1406, v1407 = v75(v82[v1405](v13(v82, v1405 + 1 + 0, v84[3])));
								v77 = (v1407 + v1405) - (204 - (131 + 72));
								local v1408 = 0 + 0;
								for v3518 = v1405, v77 do
									v1408 = v1408 + 1;
									v82[v3518] = v1406[v1408];
								end
							end
						elseif ((3218 == 3218) and (v85 > (323 - (144 + 60)))) then
							local v1409;
							local v1410;
							v82[v84[8 - 6]] = v63[v84[4 - 1]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[9 - 7]] = v63[v84[1 + 2]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[1924 - (523 + 1399)]][v84[3 + 0]] = v82[v84[408 - (72 + 332)]];
							v76 = v76 + (977 - (269 + 707));
							v84 = v72[v76];
							v82[v84[3 - 1]] = v63[v84[7 - 4]];
							v76 = v76 + (131 - (123 + 7));
							v84 = v72[v76];
							v82[v84[2]] = v82[v84[3]][v84[4 + 0]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2 + 0]] = v84[13 - 10];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v1410 = v84[1090 - (38 + 1050)];
							v82[v1410] = v82[v1410](v82[v1410 + 1 + 0]);
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2 + 0]][v84[826 - (426 + 397)]] = v84[4];
							v76 = v76 + (1407 - (751 + 655));
							v84 = v72[v76];
							v82[v84[2]][v84[5 - 2]] = v82[v84[1 + 3]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[1247 - (39 + 1206)]] = v63[v84[8 - 5]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2]] = v82[v84[844 - (566 + 275)]][v84[4]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2]] = v84[938 - (167 + 768)];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[1 + 1]] = v84[4 - 1];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2 + 0]] = v84[3 - 0];
							v76 = v76 + (16 - (8 + 7));
							v84 = v72[v76];
							v1410 = v84[1685 - (1510 + 173)];
							v82[v1410] = v82[v1410](v13(v82, v1410 + (1 - 0), v84[1 + 2]));
							v76 = v76 + (254 - (30 + 223));
							v84 = v72[v76];
							v82[v84[1258 - (300 + 956)]][v84[125 - (22 + 100)]] = v82[v84[8 - 4]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[284 - (47 + 235)]] = v63[v84[9 - 6]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2]] = v82[v84[489 - (21 + 465)]][v84[3 + 1]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2]] = v84[1 + 2] / v84[4 - 0];
							v76 = v76 + (1218 - (553 + 664));
							v84 = v72[v76];
							v82[v84[1 + 1]] = v84[81 - (73 + 5)] / v84[4];
							v76 = v76 + (1716 - (1128 + 587));
							v84 = v72[v76];
							v82[v84[7 - 5]] = v84[3] / v84[4];
							v76 = v76 + 1;
							v84 = v72[v76];
							v1410 = v84[692 - (558 + 132)];
							v82[v1410] = v82[v1410](v13(v82, v1410 + 1, v84[3]));
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v82[v84[5 - 3]][v84[1 + 2]] = v82[v84[4]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v1410 = v84[1 + 1];
							v1409 = v82[v84[3]];
							v82[v1410 + 1 + 0] = v1409;
							v82[v1410] = v1409[v84[5 - 1]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2 + 0]] = v63[v84[774 - (294 + 477)]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[4 - 2]] = v82[v84[5 - 2]][v84[2 + 2]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[4 - 2]] = v82[v84[985 - (97 + 885)]][v84[4]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2 - 0]] = v84[368 - (271 + 94)] ~= (1603 - (777 + 826));
							v76 = v76 + 1;
							v84 = v72[v76];
							v1410 = v84[1 + 1];
							v82[v1410](v13(v82, v1410 + (1356 - (117 + 1238)), v84[1718 - (686 + 1029)]));
							v76 = v76 + (1357 - (1074 + 282));
							v84 = v72[v76];
							if ((1418 <= 4245) and v82[v84[1619 - (1359 + 258)]]) then
								v76 = v76 + (2 - 1);
							else
								v76 = v84[3];
							end
						else
							local v1456;
							local v1457, v1458;
							local v1459;
							v82[v84[1937 - (1730 + 205)]] = v82[v84[531 - (67 + 461)]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[3 - 1]] = v63[v84[4 - 1]];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v82[v84[1 + 1]] = v82[v84[632 - (129 + 500)]][v84[1715 - (1157 + 554)]];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v82[v84[609 - (82 + 525)]] = v84[3];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2 + 0]] = v84[6 - 3];
							v76 = v76 + (1624 - (948 + 675));
							v84 = v72[v76];
							v82[v84[2]] = v84[3];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v1459 = v84[2 + 0];
							v82[v1459] = v82[v1459](v13(v82, v1459 + 1, v84[7 - 4]));
							v76 = v76 + (854 - (406 + 447));
							v84 = v72[v76];
							v82[v84[2]] = v63[v84[3]];
							v76 = v76 + (118 - (91 + 26));
							v84 = v72[v76];
							v82[v84[6 - 4]] = v82[v84[3 + 0]][v84[4]];
							v76 = v76 + (987 - (968 + 18));
							v84 = v72[v76];
							v82[v84[2]] = v63[v84[3 + 0]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2]] = v82[v84[3 + 0]][v84[7 - 3]];
							v76 = v76 + (268 - (172 + 95));
							v84 = v72[v76];
							v82[v84[2]] = v84[9 - 6];
							v76 = v76 + (266 - (260 + 5));
							v84 = v72[v76];
							v1459 = v84[5 - 3];
							v82[v1459] = v82[v1459](v82[v1459 + (820 - (265 + 554))]);
							v76 = v76 + (1572 - (1440 + 131));
							v84 = v72[v76];
							v82[v84[5 - 3]] = v84[1398 - (253 + 1142)];
							v76 = v76 + (254 - (133 + 120));
							v84 = v72[v76];
							v82[v84[2]] = v84[5 - 2];
							v76 = v76 + 1;
							v84 = v72[v76];
							v1459 = v84[1958 - (809 + 1147)];
							v1457, v1458 = v75(v82[v1459](v13(v82, v1459 + 1, v84[500 - (178 + 319)])));
							v77 = (v1458 + v1459) - (1 - 0);
							v1456 = 0 + 0;
							for v3521 = v1459, v77 do
								v1456 = v1456 + (1271 - (1255 + 15));
								v82[v3521] = v1457[v1456];
							end
							v76 = v76 + (1543 - (1221 + 321));
							v84 = v72[v76];
							v1459 = v84[5 - 3];
							v82[v1459](v13(v82, v1459 + 1 + 0, v77));
							v76 = v76 + (3 - 2);
							v84 = v72[v76];
							v82[v84[2]] = v63[v84[11 - 8]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2 + 0]] = v82[v84[6 - 3]][v84[4]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2]]();
							v76 = v76 + (408 - (204 + 203));
							v84 = v72[v76];
							v82[v84[80 - (48 + 30)]] = v62[v84[3]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[1 + 1]] = v82[v84[1967 - (1472 + 492)]];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v82[v84[2]] = v63[v84[2 + 1]];
							v76 = v76 + (612 - (258 + 353));
							v84 = v72[v76];
							v82[v84[2]] = v82[v84[1997 - (1382 + 612)]][v84[4 + 0]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[1 + 1]] = v84[8 - 5];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[121 - (35 + 84)]] = v84[218 - (75 + 140)];
							v76 = v76 + (3 - 2);
							v84 = v72[v76];
							v82[v84[1801 - (923 + 876)]] = v84[7 - 4];
							v76 = v76 + (813 - (284 + 528));
							v84 = v72[v76];
							v1459 = v84[1021 - (867 + 152)];
							v82[v1459] = v82[v1459](v13(v82, v1459 + (1107 - (709 + 397)), v84[3]));
							v76 = v76 + (3 - 2);
							v84 = v72[v76];
							v82[v84[38 - (21 + 15)]] = v63[v84[4 - 1]];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v82[v84[2]] = v82[v84[3]][v84[1 + 3]];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v82[v84[4 - 2]] = v84[2 + 1];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[137 - (97 + 38)]] = v84[83 - (52 + 28)];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[851 - (59 + 790)]] = v84[3 + 0];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v1459 = v84[942 - (467 + 473)];
							v1457, v1458 = v75(v82[v1459](v13(v82, v1459 + (4 - 3), v84[7 - 4])));
							v77 = (v1458 + v1459) - (2 - 1);
							v1456 = 0 - 0;
							for v3524 = v1459, v77 do
								local v3525 = 0 + 0;
								while true do
									if (v3525 == (0 - 0)) then
										v1456 = v1456 + (3 - 2);
										v82[v3524] = v1457[v1456];
										break;
									end
								end
							end
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v1459 = v84[1 + 1];
							v82[v1459](v13(v82, v1459 + 1, v77));
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[1 + 1]] = v84[240 - (58 + 179)];
						end
					elseif (v85 <= (302 - 178)) then
						if (v85 <= (1375 - (677 + 576))) then
							if ((3619 >= 1168) and (v85 == (53 + 68))) then
								v82[v84[3 - 1]] = v82[v84[223 - (88 + 132)]] / v82[v84[4 + 0]];
							else
								local v1510;
								local v1511;
								v82[v84[9 - 7]] = v63[v84[10 - 7]];
								v76 = v76 + (292 - (12 + 279));
								v84 = v72[v76];
								v1511 = v84[3 - 1];
								v1510 = v82[v84[3]];
								v82[v1511 + 1 + 0] = v1510;
								v82[v1511] = v1510[v84[4]];
								v76 = v76 + (948 - (652 + 295));
								v84 = v72[v76];
								v82[v84[1 + 1]] = v84[2 + 1];
								v76 = v76 + 1;
								v84 = v72[v76];
								v1511 = v84[991 - (848 + 141)];
								v82[v1511] = v82[v1511](v13(v82, v1511 + 1, v84[3]));
								v76 = v76 + (741 - (372 + 368));
								v84 = v72[v76];
								v1511 = v84[2 + 0];
								v1510 = v82[v84[3]];
								v82[v1511 + 1] = v1510;
								v82[v1511] = v1510[v84[1134 - (542 + 588)]];
								v76 = v76 + (819 - (6 + 812));
								v84 = v72[v76];
								v82[v84[1707 - (1599 + 106)]] = v84[7 - 4];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1 + 1]] = {};
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[2]][v84[5 - 2]] = v82[v84[1 + 3]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1 + 1]][v84[3 + 0]] = v82[v84[1 + 3]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1 + 1]][v84[3]] = v82[v84[1933 - (1690 + 239)]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v1511 = v84[2];
								v82[v1511](v13(v82, v1511 + (3 - 2), v84[3 + 0]));
								v76 = v76 + 1;
								v84 = v72[v76];
								do
									return;
								end
							end
						elseif ((3661 >= 1833) and (v85 == 123)) then
							local v1534 = 0;
							local v1535;
							while true do
								if (v1534 == 4) then
									v84 = v72[v76];
									v82[v84[3 - 1]][v84[7 - 4]] = v82[v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v1534 = 5;
								end
								if ((v1534 == (3 - 2)) or (481 > 1266)) then
									v82[v84[2]] = v84[1871 - (1736 + 132)];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[6 - 4]] = v82[v84[13 - 10]];
									v1534 = 1 + 1;
								end
								if (v1534 == (32 - (27 + 5))) then
									v1535 = nil;
									v82[v84[2]] = v82[v84[1 + 2]][v84[3 + 1]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v1534 = 1;
								end
								if (v1534 == 2) then
									v76 = v76 + 1;
									v84 = v72[v76];
									v1535 = v84[1 + 1];
									v82[v1535] = v82[v1535](v13(v82, v1535 + 1 + 0, v84[1120 - (771 + 346)]));
									v1534 = 1637 - (1577 + 57);
								end
								if ((8 - 3) == v1534) then
									v82[v84[1082 - (684 + 396)]] = v84[8 - 5];
									v76 = v76 + 1;
									v84 = v72[v76];
									v76 = v84[1199 - (700 + 496)];
									break;
								end
								if (v1534 == (3 + 0)) then
									v76 = v76 + (253 - (65 + 187));
									v84 = v72[v76];
									v82[v84[941 - (827 + 112)]] = v82[v84[3 + 0]];
									v76 = v76 + (2 - 1);
									v1534 = 10 - 6;
								end
							end
						else
							local v1536;
							v82[v84[9 - 7]] = v63[v84[1 + 2]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[1198 - (551 + 645)]] = v82[v84[346 - (166 + 177)]][v84[1860 - (1361 + 495)]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[5 - 3]] = v84[2 + 1];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v82[v84[2 + 0]] = v84[3];
							v76 = v76 + (225 - (148 + 76));
							v84 = v72[v76];
							v82[v84[2]] = v84[10 - 7];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v1536 = v84[2 + 0];
							v82[v1536] = v82[v1536](v13(v82, v1536 + (1743 - (735 + 1007)), v84[282 - (111 + 168)]));
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[1 + 1]][v84[6 - 3]] = v82[v84[1 + 3]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[1 + 1]] = v84[12 - 9];
						end
					elseif ((v85 <= 126) or (1520 < 292)) then
						if ((v85 > (67 + 58)) or (1884 >= 2241)) then
							local v1554;
							local v1555;
							v1555 = v84[934 - (147 + 785)];
							v82[v1555] = v82[v1555]();
							v76 = v76 + (667 - (483 + 183));
							v84 = v72[v76];
							v82[v84[5 - 3]] = v82[v84[3 + 0]][v84[1915 - (1790 + 121)]];
							v76 = v76 + (3 - 2);
							v84 = v72[v76];
							v82[v84[1541 - (259 + 1280)]] = v63[v84[1587 - (160 + 1424)]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2]] = v82[v84[1 + 2]][v84[774 - (479 + 291)]];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v82[v84[2]] = v84[974 - (569 + 402)];
							v76 = v76 + (1306 - (635 + 670));
							v84 = v72[v76];
							v82[v84[4 - 2]] = v84[11 - 8];
							v76 = v76 + (599 - (42 + 556));
							v84 = v72[v76];
							v82[v84[1403 - (1246 + 155)]] = v84[3];
							v76 = v76 + 1;
							v84 = v72[v76];
							v1555 = v84[734 - (31 + 701)];
							v82[v1555] = v82[v1555](v13(v82, v1555 + (3 - 2), v84[502 - (393 + 106)]));
							v76 = v76 + (1172 - (727 + 444));
							v84 = v72[v76];
							v82[v84[5 - 3]] = v82[v84[2 + 1]] * v82[v84[657 - (269 + 384)]];
							v76 = v76 + (1570 - (598 + 971));
							v84 = v72[v76];
							v82[v84[1 + 1]][v84[9 - 6]] = v82[v84[18 - 14]];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v1555 = v84[1447 - (800 + 645)];
							v1554 = v82[v84[1 + 2]];
							v82[v1555 + (791 - (687 + 103))] = v1554;
							v82[v1555] = v1554[v84[4]];
							v76 = v76 + (1163 - (142 + 1020));
							v84 = v72[v76];
							v82[v84[4 - 2]] = v63[v84[1 + 2]];
							v76 = v76 + (514 - (306 + 207));
							v84 = v72[v76];
							v1555 = v84[1406 - (112 + 1292)];
							v82[v1555] = v82[v1555]();
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[954 - (587 + 365)]] = v82[v84[1718 - (829 + 886)]][v84[4]];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v82[v84[1 + 1]] = v63[v84[11 - 8]];
							v76 = v76 + (3 - 2);
							v84 = v72[v76];
							v82[v84[2 + 0]] = v82[v84[3]][v84[2 + 2]];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v82[v84[979 - (613 + 364)]] = v84[3];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[1 + 1]] = v84[1 + 2];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v82[v84[2]] = v84[10 - 7];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v1555 = v84[2 + 0];
							v82[v1555] = v82[v1555](v13(v82, v1555 + 1, v84[1942 - (1467 + 472)]));
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v82[v84[2]] = v82[v84[1550 - (1077 + 470)]] * v82[v84[1 + 3]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v1555 = v84[9 - 7];
							v82[v1555](v13(v82, v1555 + (430 - (12 + 417)), v84[3]));
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v82[v84[2 + 0]] = v84[3];
						else
							local v1590 = 0 - 0;
							local v1591;
							while true do
								if (v1590 == (3 - 1)) then
									v84 = v72[v76];
									v82[v84[3 - 1]] = v84[1 + 2];
									v76 = v76 + 1 + 0;
									v1590 = 1 + 2;
								end
								if ((v1590 == (20 - 13)) or (4961 == 4982)) then
									v76 = v76 + (1106 - (924 + 181));
									v84 = v72[v76];
									v82[v84[799 - (263 + 534)]] = v84[1 + 2];
									break;
								end
								if (v1590 == (0 + 0)) then
									v1591 = nil;
									v82[v84[2]] = v63[v84[5 - 2]];
									v76 = v76 + 1;
									v1590 = 2 - 1;
								end
								if (v1590 == (1 + 0)) then
									v84 = v72[v76];
									v82[v84[709 - (562 + 145)]] = v82[v84[1 + 2]][v84[2 + 2]];
									v76 = v76 + 1 + 0;
									v1590 = 2;
								end
								if ((786 <= 4977) and (v1590 == (1 + 2))) then
									v84 = v72[v76];
									v82[v84[2]] = v84[3];
									v76 = v76 + 1 + 0;
									v1590 = 8 - 4;
								end
								if (v1590 == (6 + 0)) then
									v76 = v76 + (4 - 3);
									v84 = v72[v76];
									v82[v84[1 + 1]][v84[3]] = v82[v84[4]];
									v1590 = 5 + 2;
								end
								if (v1590 == (1881 - (1459 + 417))) then
									v84 = v72[v76];
									v1591 = v84[288 - (194 + 92)];
									v82[v1591] = v82[v1591](v13(v82, v1591 + (1386 - (1057 + 328)), v84[8 - 5]));
									v1590 = 29 - 23;
								end
								if ((v1590 == (536 - (5 + 527))) or (1698 < 367)) then
									v84 = v72[v76];
									v82[v84[2 + 0]] = v84[783 - (342 + 438)];
									v76 = v76 + 1;
									v1590 = 5;
								end
							end
						end
					elseif (v85 <= (57 + 70)) then
						local v1592;
						v82[v84[1 + 1]] = v63[v84[3]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[3 - 1]] = v82[v84[3]][v84[4]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[2]] = v84[1 + 2];
						v76 = v76 + (1 - 0);
						v84 = v72[v76];
						v82[v84[2]] = v84[3];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[2 - 0]] = v84[15 - (6 + 6)];
						v76 = v76 + (2 - 1);
						v84 = v72[v76];
						v1592 = v84[5 - 3];
						v82[v1592] = v82[v1592](v13(v82, v1592 + 1 + 0, v84[1256 - (206 + 1047)]));
					elseif (v85 > (1240 - (470 + 642))) then
						v82[v84[1 + 1]] = v82[v84[1070 - (552 + 515)]][v82[v84[4 + 0]]];
					else
						local v3644;
						v82[v84[2 + 0]] = v82[v84[3]][v84[4 + 0]];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[2 + 0]] = v82[v84[2 + 1]][v84[3 + 1]];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[1053 - (701 + 350)]] = v63[v84[2 + 1]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[2 + 0]] = v82[v84[3 - 0]][v84[12 - 8]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[2]] = v84[7 - 4];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[2 + 0]] = v82[v84[11 - 8]][v84[1350 - (281 + 1065)]];
						v76 = v76 + (4 - 3);
						v84 = v72[v76];
						v3644 = v84[7 - 5];
						v82[v3644] = v82[v3644](v13(v82, v3644 + (1212 - (1114 + 97)), v84[3]));
						v76 = v76 + (1 - 0);
						v84 = v72[v76];
						v82[v84[1915 - (279 + 1634)]] = v82[v84[3]];
						v76 = v76 + (1281 - (1213 + 67));
						v84 = v72[v76];
						v82[v84[2]] = v63[v84[194 - (65 + 126)]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[1087 - (189 + 896)]] = v82[v84[3]][v84[4]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[2]] = v84[1966 - (1872 + 91)];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[2]] = v84[6 - 3];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[2 + 0]] = v84[10 - 7];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v3644 = v84[1 + 1];
						v82[v3644] = v82[v3644](v13(v82, v3644 + (3 - 2), v84[3]));
						v76 = v76 + (77 - (22 + 54));
						v84 = v72[v76];
						v82[v84[4 - 2]][v84[7 - 4]] = v82[v84[4]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[7 - 5]][v84[1537 - (553 + 981)]] = v84[4 + 0];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[2 + 0]] = v84[3 + 0];
					end
				elseif (v85 <= (574 - 380)) then
					if ((4066 >= 3436) and (v85 <= (239 - 78))) then
						if ((321 == 321) and (v85 <= (2042 - (1320 + 577)))) then
							if (v85 <= (986 - (667 + 182))) then
								if (v85 <= (1421 - (1115 + 173))) then
									if (v85 <= (219 - 88)) then
										if ((v85 == (104 + 26)) or (437 > 2005)) then
											local v1605 = 1755 - (1375 + 380);
											local v1606;
											local v1607;
											while true do
												if (v1605 == (0 + 0)) then
													v1606 = v84[2];
													v1607 = {};
													v1605 = 27 - (12 + 14);
												end
												if (v1605 == (2 - 1)) then
													for v5663 = 2 - 1, #v81 do
														local v5664 = v81[v5663];
														for v5742 = 0 - 0, #v5664 do
															local v5743 = v5664[v5742];
															local v5744 = v5743[1];
															local v5745 = v5743[5 - 3];
															if ((v5744 == v82) and (v5745 >= v1606)) then
																local v5947 = 0;
																while true do
																	if (v5947 == (0 - 0)) then
																		v1607[v5745] = v5744[v5745];
																		v5743[1 - 0] = v1607;
																		break;
																	end
																end
															end
														end
													end
													break;
												end
											end
										else
											local v1608 = 731 - (354 + 377);
											local v1609;
											local v1610;
											local v1611;
											local v1612;
											while true do
												if (v1608 == (56 - 44)) then
													v76 = v76 + (2 - 1);
													v84 = v72[v76];
													v1612 = v84[2];
													v82[v1612] = v82[v1612](v82[v1612 + 1]);
													v76 = v76 + 1;
													v84 = v72[v76];
													v82[v84[2]] = v84[1985 - (263 + 1719)];
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v82[v84[361 - (335 + 24)]] = v84[3];
													v1608 = 964 - (882 + 69);
												end
												if ((v1608 == 14) or (2281 == 15)) then
													v82[v1612](v13(v82, v1612 + (1687 - (657 + 1029)), v77));
													v76 = v76 + (1201 - (685 + 515));
													v84 = v72[v76];
													v82[v84[1640 - (745 + 893)]] = v63[v84[1 + 2]];
													v76 = v76 + (773 - (274 + 498));
													v84 = v72[v76];
													v82[v84[1 + 1]] = v82[v84[2 + 1]][v84[1610 - (1035 + 571)]];
													v76 = v76 + 1;
													v84 = v72[v76];
													v82[v84[1 + 1]]();
													v1608 = 15;
												end
												if (v1608 == 4) then
													v82[v84[1 + 1]] = v84[3];
													v76 = v76 + 1;
													v84 = v72[v76];
													v1612 = v84[2];
													v82[v1612] = v82[v1612](v82[v1612 + 1]);
													v76 = v76 + (3 - 2);
													v84 = v72[v76];
													v82[v84[2]] = v84[3];
													v76 = v76 + 1;
													v84 = v72[v76];
													v1608 = 15 - 10;
												end
												if (v1608 == (5 + 0)) then
													v82[v84[2 + 0]] = v84[8 - 5];
													v76 = v76 + (225 - (109 + 115));
													v84 = v72[v76];
													v1612 = v84[1401 - (1047 + 352)];
													v1610, v1611 = v75(v82[v1612](v13(v82, v1612 + (1766 - (852 + 913)), v84[3 + 0])));
													v77 = (v1611 + v1612) - (1346 - (384 + 961));
													v1609 = 0 - 0;
													for v5665 = v1612, v77 do
														v1609 = v1609 + (2 - 1);
														v82[v5665] = v1610[v1609];
													end
													v76 = v76 + 1;
													v84 = v72[v76];
													v1608 = 21 - 15;
												end
												if (v1608 == 13) then
													v76 = v76 + (593 - (591 + 1));
													v84 = v72[v76];
													v1612 = v84[2];
													v1610, v1611 = v75(v82[v1612](v13(v82, v1612 + 1 + 0, v84[1473 - (218 + 1252)])));
													v77 = (v1611 + v1612) - (1 + 0);
													v1609 = 356 - (321 + 35);
													for v5668 = v1612, v77 do
														local v5669 = 394 - (239 + 155);
														while true do
															if (v5669 == (0 + 0)) then
																v1609 = v1609 + (43 - (41 + 1));
																v82[v5668] = v1610[v1609];
																break;
															end
														end
													end
													v76 = v76 + (201 - (80 + 120));
													v84 = v72[v76];
													v1612 = v84[2 + 0];
													v1608 = 26 - 12;
												end
												if (v1608 == (3 + 8)) then
													v82[v84[2 + 0]] = v82[v84[3]][v84[4]];
													v76 = v76 + (4 - 3);
													v84 = v72[v76];
													v82[v84[2]] = v63[v84[3]];
													v76 = v76 + (2 - 1);
													v84 = v72[v76];
													v82[v84[2]] = v82[v84[12 - 9]][v84[6 - 2]];
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v82[v84[1 + 1]] = v84[1 + 2];
													v1608 = 12;
												end
												if (v1608 == (1228 - (165 + 1061))) then
													v84 = v72[v76];
													v82[v84[2 + 0]] = v82[v84[3 + 0]][v84[1647 - (596 + 1047)]];
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v1612 = v84[2 + 0];
													v82[v1612] = v82[v1612](v13(v82, v1612 + (1 - 0), v84[2 + 1]));
													v76 = v76 + 1;
													v84 = v72[v76];
													v82[v84[739 - (185 + 552)]] = v63[v84[3]];
													v76 = v76 + 1 + 0;
													v1608 = 604 - (507 + 94);
												end
												if (v1608 == 7) then
													v82[v84[8 - 6]]();
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v82[v84[2 - 0]] = v62[v84[3]];
													v76 = v76 + (1738 - (569 + 1168));
													v84 = v72[v76];
													v82[v84[3 - 1]] = v82[v84[3]];
													v76 = v76 + (1 - 0);
													v84 = v72[v76];
													v82[v84[353 - (118 + 233)]] = v63[v84[3]];
													v1608 = 352 - (279 + 65);
												end
												if ((v1608 == (4 - 1)) or (2893 < 1047)) then
													v84 = v72[v76];
													v82[v84[3 - 1]] = v82[v84[6 - 3]][v84[4]];
													v76 = v76 + (2 - 1);
													v84 = v72[v76];
													v82[v84[1820 - (1414 + 404)]] = v63[v84[759 - (347 + 409)]];
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v82[v84[2 + 0]] = v82[v84[3]][v84[3 + 1]];
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v1608 = 1582 - (420 + 1158);
												end
												if (v1608 == (36 - 21)) then
													v76 = v76 + (612 - (406 + 205));
													v84 = v72[v76];
													v82[v84[6 - 4]] = v84[2 + 1];
													v76 = v76 + 1;
													v84 = v72[v76];
													v76 = v84[3 + 0];
													break;
												end
												if ((22 - 13) == v1608) then
													v84 = v72[v76];
													v82[v84[63 - (28 + 33)]] = v62[v84[1 + 2]];
													v76 = v76 + (1008 - (858 + 149));
													v84 = v72[v76];
													v82[v84[1 + 1]] = v82[v84[4 - 1]][v84[1511 - (829 + 678)]];
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v82[v84[1218 - (143 + 1073)]] = v82[v84[1818 - (898 + 917)]][v84[7 - 3]];
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v1608 = 1479 - (882 + 587);
												end
												if ((v1608 == (8 + 2)) or (4335 < 1853)) then
													v82[v84[1 + 1]] = v82[v84[3]] / v84[4];
													v76 = v76 + (265 - (140 + 124));
													v84 = v72[v76];
													v1612 = v84[2];
													v82[v1612] = v82[v1612](v13(v82, v1612 + 1 + 0, v84[1538 - (1105 + 430)]));
													v76 = v76 + (2 - 1);
													v84 = v72[v76];
													v82[v84[6 - 4]] = v63[v84[6 - 3]];
													v76 = v76 + (1 - 0);
													v84 = v72[v76];
													v1608 = 9 + 2;
												end
												if (v1608 == (0 + 0)) then
													v1609 = nil;
													v1610, v1611 = nil;
													v1612 = nil;
													v82[v84[2 + 0]] = v82[v84[3]];
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v82[v84[2]] = v63[v84[1994 - (1047 + 944)]];
													v76 = v76 + (1303 - (206 + 1096));
													v84 = v72[v76];
													v82[v84[2]] = v82[v84[197 - (30 + 164)]][v84[17 - 13]];
													v1608 = 1 + 0;
												end
												if (v1608 == (1480 - (1383 + 91))) then
													v1612 = v84[2];
													v82[v1612](v13(v82, v1612 + (3 - 2), v77));
													v76 = v76 + (1 - 0);
													v84 = v72[v76];
													v82[v84[1662 - (1174 + 486)]] = v63[v84[430 - (172 + 255)]];
													v76 = v76 + (3 - 2);
													v84 = v72[v76];
													v82[v84[4 - 2]] = v82[v84[1531 - (594 + 934)]][v84[572 - (211 + 357)]];
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v1608 = 6 + 1;
												end
												if ((1427 >= 145) and (v1608 == (13 - 5))) then
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v82[v84[1416 - (159 + 1255)]] = v82[v84[3 + 0]][v84[781 - (24 + 753)]];
													v76 = v76 + 1 + 0;
													v84 = v72[v76];
													v82[v84[2]] = v84[3];
													v76 = v76 + (1 - 0);
													v84 = v72[v76];
													v82[v84[1134 - (898 + 234)]] = v84[538 - (333 + 202)];
													v76 = v76 + 1 + 0;
													v1608 = 9;
												end
												if ((v1608 == 1) or (36 >= 4791)) then
													v76 = v76 + 1;
													v84 = v72[v76];
													v82[v84[1 + 1]] = v84[5 - 2];
													v76 = v76 + (1280 - (1018 + 261));
													v84 = v72[v76];
													v82[v84[2]] = v84[3];
													v76 = v76 + (2 - 1);
													v84 = v72[v76];
													v82[v84[133 - (93 + 38)]] = v62[v84[3]];
													v76 = v76 + 1 + 0;
													v1608 = 2 + 0;
												end
											end
										end
									elseif ((v85 > (32 + 100)) or (375 == 3804)) then
										local v1613;
										v82[v84[2 + 0]] = v82[v84[3]][v84[4]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[7 - 5]] = v84[8 - 5];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v84[14 - 11];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v1613 = v84[1 + 1];
										v82[v1613] = v82[v1613](v13(v82, v1613 + 1, v84[3 - 0]));
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[422 - (14 + 406)]][v84[3]] = v82[v84[7 - 3]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[1632 - (20 + 1610)]] = v63[v84[2 + 1]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[5 - 3]] = v82[v84[520 - (243 + 274)]][v84[4]];
										v76 = v76 + (1623 - (1437 + 185));
										v84 = v72[v76];
										v82[v84[2]] = v84[3];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[1 + 1]] = v84[11 - 8];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v1613 = v84[1 + 1];
										v82[v1613] = v82[v1613](v13(v82, v1613 + 1, v84[3]));
										v76 = v76 + (817 - (326 + 490));
										v84 = v72[v76];
										v82[v84[2]][v84[3 + 0]] = v82[v84[207 - (181 + 22)]];
										v76 = v76 + (76 - (35 + 40));
										v84 = v72[v76];
										v82[v84[7 - 5]] = v84[3 - 0];
									else
										v82[v84[2]] = v82[v84[1 + 2]][v84[882 - (297 + 581)]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[3 - 0]][v84[4]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[12 - 9]][v84[17 - 13]];
										v76 = v76 + (1738 - (1505 + 232));
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[3]] - v82[v84[4]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1320 - (415 + 903)]] = v82[v84[3]][v84[4]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										if (v84[2 - 0] < v82[v84[4]]) then
											v76 = v76 + (718 - (155 + 562));
										else
											v76 = v84[3];
										end
									end
								elseif (v85 <= (64 + 71)) then
									if (v85 > 134) then
										local v1643 = v84[2];
										local v1644 = {v82[v1643](v82[v1643 + (1 - 0)])};
										local v1645 = 685 - (436 + 249);
										for v3526 = v1643, v84[1625 - (56 + 1565)] do
											local v3527 = 0 + 0;
											while true do
												if (v3527 == (984 - (80 + 904))) then
													v1645 = v1645 + 1 + 0;
													v82[v3526] = v1644[v1645];
													break;
												end
											end
										end
									else
										local v1646;
										v82[v84[802 - (595 + 205)]] = v82[v84[3]][v84[4]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[4 - 2]] = v82[v84[3 + 0]][v84[2 + 2]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[9 - 6]] - v82[v84[4]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[3]][v84[4]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[668 - (400 + 265)]] * v84[7 - 3];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[6 - 3]] - v82[v84[2 + 2]];
										v76 = v76 + (1672 - (962 + 709));
										v84 = v72[v76];
										v1646 = v84[2 + 0];
										v82[v1646] = v82[v1646](v13(v82, v1646 + 1 + 0, v84[3 + 0]));
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[4 - 2]] = v63[v84[3]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[783 - (636 + 145)]] = v82[v84[298 - (282 + 13)]][v84[1152 - (366 + 782)]];
										v76 = v76 + (90 - (10 + 79));
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[3]][v84[4]];
										v76 = v76 + (1708 - (1297 + 410));
										v84 = v72[v76];
										v82[v84[6 - 4]] = v82[v84[3 + 0]] - v82[v84[4]];
										v76 = v76 + (279 - (262 + 16));
										v84 = v72[v76];
										v82[v84[4 - 2]] = v82[v84[2 + 1]][v84[4]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1852 - (1056 + 794)]] = v82[v84[3]] * v84[1352 - (741 + 607)];
										v76 = v76 + (1757 - (730 + 1026));
										v84 = v72[v76];
										v82[v84[1795 - (248 + 1545)]] = v82[v84[995 - (191 + 801)]] + v82[v84[4]];
										v76 = v76 + (4 - 3);
										v84 = v72[v76];
										v1646 = v84[562 - (478 + 82)];
										v82[v1646] = v82[v1646](v13(v82, v1646 + (1708 - (434 + 1273)), v84[8 - 5]));
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[8 - 6]] = v82[v84[3]] - v82[v84[4]];
										v76 = v76 + (574 - (349 + 224));
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[867 - (275 + 589)]][v84[6 - 2]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[1534 - (1064 + 468)]] = v62[v84[3 + 0]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[8 - 6]] = v82[v84[3]][v84[707 - (676 + 27)]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[1429 - (48 + 1379)]] = v82[v84[3 + 0]][v84[2 + 2]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[118 - (79 + 36)]][v84[4]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[1 + 1]] = v62[v84[2 + 1]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[6 - 3]][v84[2 + 2]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1016 - (631 + 383)]] = v82[v84[3]][v84[4]];
										v76 = v76 + (1636 - (445 + 1190));
										v84 = v72[v76];
										v82[v84[1427 - (810 + 615)]] = v82[v84[1297 - (819 + 475)]][v84[1339 - (243 + 1092)]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[3]] / v82[v84[4 + 0]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[4 - 1]] * v82[v84[11 - 7]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v62[v84[527 - (119 + 405)]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[10 - 7]][v84[613 - (352 + 257)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1165 - (88 + 1075)]] = v63[v84[1074 - (477 + 594)]];
										v76 = v76 + (724 - (328 + 395));
										v84 = v72[v76];
										v82[v84[506 - (164 + 340)]] = v82[v84[4 - 1]][v84[9 - 5]];
										v76 = v76 + (1230 - (1008 + 221));
										v84 = v72[v76];
										v82[v84[1513 - (1025 + 486)]] = v82[v84[6 - 3]][v84[11 - 7]];
										v76 = v76 + (220 - (108 + 111));
										v84 = v72[v76];
										v82[v84[100 - (82 + 16)]] = v82[v84[1732 - (533 + 1196)]] - v82[v84[5 - 1]];
										v76 = v76 + (213 - (161 + 51));
										v84 = v72[v76];
										v82[v84[436 - (294 + 140)]] = v82[v84[12 - 9]] - v84[842 - (717 + 121)];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[1 + 2]][v84[1714 - (1001 + 709)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1122 - (242 + 878)]] = v82[v84[1786 - (1395 + 388)]] * v84[2 + 2];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[2 + 1]] + v82[v84[1951 - (1289 + 658)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v1646 = v84[3 - 1];
										v82[v1646] = v82[v1646](v13(v82, v1646 + 1 + 0, v84[3 + 0]));
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[1978 - (337 + 1639)]][v84[3 + 0]] = v82[v84[4]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[3 - 1]] = v62[v84[7 - 4]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[1739 - (630 + 1107)]] = v82[v84[3 + 0]][v84[1 + 3]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2]] = v63[v84[2 + 1]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[63 - (13 + 48)]] = v82[v84[3]][v84[703 - (658 + 41)]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[3 - 1]] = v82[v84[3]][v84[1911 - (1591 + 316)]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[3]] - v82[v84[3 + 1]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[1278 - (1241 + 35)]] = v82[v84[43 - (18 + 22)]] - v84[4 - 0];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1304 - (697 + 605)]] = v82[v84[2 + 1]][v84[8 - 4]];
										v76 = v76 + (330 - (188 + 141));
										v84 = v72[v76];
										v82[v84[8 - 6]] = v82[v84[6 - 3]] * v84[954 - (34 + 916)];
										v76 = v76 + (1738 - (357 + 1380));
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[2 + 1]] + v82[v84[4]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1929 - (178 + 1749)]] = v82[v84[3]] - v82[v84[11 - 7]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v1646 = v84[1417 - (142 + 1273)];
										v82[v1646] = v82[v1646](v13(v82, v1646 + (594 - (284 + 309)), v84[3 + 0]));
										v76 = v76 + (691 - (622 + 68));
										v84 = v72[v76];
										v82[v84[2 + 0]][v84[6 - 3]] = v82[v84[4 + 0]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1900 - (855 + 1043)]] = v62[v84[6 - 3]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[6 - 4]] = v82[v84[3]][v84[783 - (576 + 203)]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v63[v84[7 - 4]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[1986 - (709 + 1275)]] = v82[v84[3 + 0]][v84[13 - 9]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[120 - (31 + 87)]] = v82[v84[134 - (44 + 87)]][v84[14 - 10]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[4 - 2]] = v82[v84[8 - 5]] - v82[v84[790 - (284 + 502)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1188 - (124 + 1062)]] = v82[v84[1030 - (847 + 180)]] - v84[4 + 0];
										v76 = v76 + (4 - 3);
										v84 = v72[v76];
										v82[v84[1365 - (369 + 994)]] = v82[v84[966 - (583 + 380)]][v84[1 + 3]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[3 + 0]] * v84[2 + 2];
										v76 = v76 + (1974 - (1085 + 888));
										v84 = v72[v76];
										v82[v84[4 - 2]] = v82[v84[11 - 8]] + v82[v84[18 - 14]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v1646 = v84[1 + 1];
										v82[v1646] = v82[v1646](v13(v82, v1646 + 1, v84[2 + 1]));
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2 - 0]][v84[4 - 1]] = v82[v84[4 + 0]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v62[v84[3 + 0]];
										v76 = v76 + (215 - (153 + 61));
										v84 = v72[v76];
										v82[v84[945 - (704 + 239)]] = v82[v84[2 + 1]][v84[1390 - (740 + 646)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1924 - (1547 + 375)]] = v63[v84[3]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[406 - (211 + 192)]][v84[17 - 13]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2 - 0]] = v82[v84[784 - (425 + 356)]][v84[1 + 3]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[4 - 2]] = v82[v84[1569 - (83 + 1483)]] - v82[v84[1276 - (123 + 1149)]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[2 + 1]] - v84[4];
										v76 = v76 + (1581 - (908 + 672));
										v84 = v72[v76];
										v82[v84[515 - (206 + 307)]] = v82[v84[3 + 0]][v84[66 - (18 + 44)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[3 - 1]] = v82[v84[3]] * v84[4];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[1 + 2]] - v82[v84[939 - (226 + 709)]];
										v76 = v76 + (727 - (235 + 491));
										v84 = v72[v76];
										v1646 = v84[2 - 0];
										v82[v1646] = v82[v1646](v13(v82, v1646 + 1 + 0, v84[1302 - (463 + 836)]));
										v76 = v76 + (405 - (166 + 238));
										v84 = v72[v76];
										v82[v84[2 - 0]][v84[3]] = v82[v84[4 + 0]];
										v76 = v76 + (1442 - (1080 + 361));
										v84 = v72[v76];
										v82[v84[2]] = v63[v84[4 - 1]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2 - 0]] = v82[v84[3]][v84[304 - (254 + 46)]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v84[3];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[258 - (37 + 219)]] = v84[3];
									end
								elseif (v85 == 136) then
									v82[v84[1901 - (1330 + 569)]] = v82[v84[3 - 0]] + v82[v84[5 - 1]];
								else
									local v1735;
									local v1736, v1737;
									local v1738;
									v82[v84[7 - 5]] = v82[v84[3 - 0]][v84[674 - (128 + 542)]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[6 - 4]] = v82[v84[10 - 7]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[6 - 4]] = v63[v84[3]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[5 - 2]][v84[4 + 0]];
									v76 = v76 + (813 - (96 + 716));
									v84 = v72[v76];
									v82[v84[1609 - (85 + 1522)]] = v82[v84[856 - (724 + 129)]];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[375 - (83 + 290)]] = v62[v84[3 - 0]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v1738 = v84[3 - 1];
									v1736, v1737 = v75(v82[v1738](v13(v82, v1738 + 1 + 0, v84[3 + 0])));
									v77 = (v1737 + v1738) - (1 + 0);
									v1735 = 0 - 0;
									for v3528 = v1738, v77 do
										local v3529 = 0;
										while true do
											if (v3529 == (0 + 0)) then
												v1735 = v1735 + (1 - 0);
												v82[v3528] = v1736[v1735];
												break;
											end
										end
									end
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v1738 = v84[2];
									v82[v1738](v13(v82, v1738 + (448 - (190 + 257)), v77));
								end
							elseif (v85 <= 141) then
								if ((1789 < 4804) and (v85 <= 139)) then
									if (v85 == (729 - (402 + 189))) then
										local v1753;
										v82[v84[2 + 0]] = v82[v84[569 - (90 + 476)]][v84[818 - (688 + 126)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v1753 = v84[1 + 1];
										v82[v1753] = v82[v1753]();
										v76 = v76 + (500 - (34 + 465));
										v84 = v72[v76];
										v82[v84[8 - 6]] = v63[v84[6 - 3]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[7 - 4]][v84[4 + 0]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v1753 = v84[2];
										v82[v1753] = v82[v1753]();
										v76 = v76 + (1808 - (587 + 1220));
										v84 = v72[v76];
										v82[v84[1894 - (1211 + 681)]][v84[80 - (64 + 13)]] = v82[v84[4]];
										v76 = v76 + (656 - (121 + 534));
										v84 = v72[v76];
										v82[v84[805 - (622 + 181)]][v84[2 + 1]] = v82[v84[1673 - (296 + 1373)]];
									else
										local v1767;
										v82[v84[1 + 1]] = v62[v84[1 + 2]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1616 - (143 + 1471)]] = v62[v84[9 - 6]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[3]][v84[4]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[7 - 4]] * v84[184 - (103 + 77)];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1159 - (895 + 262)]] = v62[v84[6 - 3]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v1767 = v84[1628 - (581 + 1045)];
										v82[v1767] = v82[v1767](v13(v82, v1767 + (1276 - (582 + 693)), v84[3]));
										v76 = v76 + (1187 - (454 + 732));
										v84 = v72[v76];
										v82[v84[3 - 1]][v84[1 + 2]] = v82[v84[4]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2 - 0]] = v62[v84[653 - (367 + 283)]];
										v76 = v76 + (69 - (7 + 61));
										v84 = v72[v76];
										v82[v84[2]] = v62[v84[8 - 5]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[681 - (332 + 346)]][v84[7 - 3]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[7 - 5]] = v62[v84[3 + 0]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[3]][v84[2 + 2]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v1767 = v84[2 - 0];
										v82[v1767] = v82[v1767](v13(v82, v1767 + (2 - 1), v84[1857 - (815 + 1039)]));
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[778 - (336 + 440)]][v84[3 + 0]] = v82[v84[1 + 3]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[432 - (222 + 208)]] = v62[v84[1 + 2]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v62[v84[833 - (652 + 178)]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[8 - 5]][v84[4 + 0]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[396 - (259 + 135)]] = v82[v84[3]] * v84[1464 - (1393 + 67)];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v62[v84[1451 - (1129 + 319)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v1767 = v84[2];
										v82[v1767] = v82[v1767](v13(v82, v1767 + (1 - 0), v84[3]));
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[414 - (137 + 275)]][v84[442 - (140 + 299)]] = v82[v84[1105 - (421 + 680)]];
										v76 = v76 + (4 - 3);
										v84 = v72[v76];
										v82[v84[5 - 3]] = v62[v84[7 - 4]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[542 - (58 + 482)]] = v62[v84[682 - (310 + 369)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[288 - (274 + 12)]] = v82[v84[3]][v84[4 + 0]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v62[v84[1765 - (681 + 1081)]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[3 - 1]] = v82[v84[3]][v84[9 - 5]];
										v76 = v76 + (878 - (842 + 35));
										v84 = v72[v76];
										v1767 = v84[2 - 0];
										v82[v1767] = v82[v1767](v13(v82, v1767 + (1868 - (180 + 1687)), v84[3]));
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[973 - (269 + 702)]][v84[817 - (776 + 38)]] = v82[v84[2 + 2]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2]] = v62[v84[1 + 2]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v84[1 + 2];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[2 + 0]] = v62[v84[11 - 8]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v1767 = v84[2 + 0];
										v82[v1767] = v82[v1767](v13(v82, v1767 + (956 - (135 + 820)), v84[139 - (118 + 18)]));
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[9 - 7]][v84[3]] = v82[v84[2 + 2]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v62[v84[3]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v84[3 + 0];
										v76 = v76 + (1294 - (741 + 552));
										v84 = v72[v76];
										v82[v84[1 + 1]] = v62[v84[3]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v1767 = v84[2 - 0];
										v82[v1767] = v82[v1767](v13(v82, v1767 + 1, v84[3 + 0]));
										v76 = v76 + (885 - (779 + 105));
										v84 = v72[v76];
										v82[v84[1783 - (1451 + 330)]][v84[1872 - (1259 + 610)]] = v82[v84[854 - (4 + 846)]];
										v76 = v76 + (1858 - (1108 + 749));
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[1744 - (1301 + 440)]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										for v3530 = v84[2 + 0], v84[1 + 2] do
											v82[v3530] = nil;
										end
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[478 - (168 + 308)]] = v84[5 - 2];
									end
								elseif (v85 > (73 + 67)) then
									local v1822;
									v82[v84[1349 - (469 + 878)]] = v82[v84[3 + 0]][v84[14 - 10]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v63[v84[1 + 2]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[3]][v84[15 - 11]];
									v76 = v76 + (1841 - (1332 + 508));
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[1 + 2]][v84[1 + 3]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1144 - (650 + 492)]] = v82[v84[809 - (689 + 117)]][v84[3 + 1]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[1925 - (794 + 1129)]] = v82[v84[3]] * v84[4];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[1 + 2]] + v82[v84[865 - (553 + 308)]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v1822 = v84[3 - 1];
									v82[v1822] = v82[v1822](v13(v82, v1822 + 1 + 0, v84[1 + 2]));
									v76 = v76 + (1769 - (1764 + 4));
									v84 = v72[v76];
									v82[v84[519 - (121 + 396)]][v84[3]] = v82[v84[4]];
									v76 = v76 + (555 - (498 + 56));
									v84 = v72[v76];
									v82[v84[2 + 0]] = v62[v84[3]];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[8 - 5]][v84[4]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2]] = v63[v84[1 + 2]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[1618 - (316 + 1300)]] = v82[v84[175 - (78 + 94)]][v84[4]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1418 - (261 + 1155)]] = v82[v84[1459 - (1040 + 416)]][v84[4]];
									v76 = v76 + (44 - (29 + 14));
									v84 = v72[v76];
									v82[v84[3 - 1]] = v82[v84[965 - (928 + 34)]][v84[2 + 2]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[10 - 7]] * v84[11 - 7];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[512 - (69 + 441)]] = v82[v84[3]] + v82[v84[9 - 5]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v1822 = v84[4 - 2];
									v82[v1822] = v82[v1822](v13(v82, v1822 + (1881 - (517 + 1363)), v84[931 - (802 + 126)]));
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1670 - (1660 + 8)]][v84[3]] = v82[v84[14 - 10]];
									v76 = v76 + (182 - (38 + 143));
									v84 = v72[v76];
									v76 = v84[8 - 5];
								else
									local v1852;
									local v1853;
									local v1854;
									local v1855;
									v1855 = v84[119 - (29 + 88)];
									v1854 = v82[v84[5 - 2]];
									v82[v1855 + (490 - (308 + 181))] = v1854;
									v82[v1855] = v1854[v84[1401 - (537 + 860)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1097 - (691 + 404)]] = v62[v84[1957 - (870 + 1084)]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[131 - (47 + 82)]] = v82[v84[3]][v84[2 + 2]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[3 + 0]][v84[12 - 8]];
									v76 = v76 + (118 - (84 + 33));
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[10 - 7]][v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v1855 = v84[4 - 2];
									v1853 = {v82[v1855](v13(v82, v1855 + (4 - 3), v84[3]))};
									v1852 = 0 - 0;
									for v3532 = v1855, v84[1224 - (87 + 1133)] do
										local v3533 = 0 - 0;
										while true do
											if (v3533 == 0) then
												v1852 = v1852 + 1;
												v82[v3532] = v1853[v1852];
												break;
											end
										end
									end
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									if v82[v84[2 + 0]] then
										v76 = v76 + (668 - (205 + 462));
									else
										v76 = v84[3];
									end
								end
							elseif (v85 <= (47 + 96)) then
								if (v85 > (218 - 76)) then
									local v1871 = 1381 - (1035 + 346);
									local v1872;
									local v1873;
									local v1874;
									local v1875;
									while true do
										if ((v1871 == (2 + 3)) or (4169 == 2785)) then
											v84 = v72[v76];
											v1875 = v84[1782 - (970 + 810)];
											v1873, v1874 = v75(v82[v1875](v13(v82, v1875 + 1 + 0, v84[3])));
											v77 = (v1874 + v1875) - (2 - 1);
											v1871 = 5 + 1;
										end
										if (v1871 == (2 + 1)) then
											v82[v84[5 - 3]] = v82[v84[11 - 8]][v84[1392 - (601 + 787)]];
											v76 = v76 + (611 - (256 + 354));
											v84 = v72[v76];
											v82[v84[3 - 1]] = v82[v84[11 - 8]];
											v1871 = 10 - 6;
										end
										if ((v1871 == 1) or (1179 >= 1868)) then
											v76 = v76 + (1 - 0);
											v84 = v72[v76];
											v82[v84[2]] = v82[v84[4 - 1]];
											v76 = v76 + (2 - 1);
											v1871 = 2;
										end
										if (v1871 == (12 - 8)) then
											v76 = v76 + (1 - 0);
											v84 = v72[v76];
											v82[v84[4 - 2]] = v62[v84[575 - (259 + 313)]];
											v76 = v76 + (1 - 0);
											v1871 = 5;
										end
										if ((v1871 == 6) or (4395 == 2670)) then
											v1872 = 0;
											for v5676 = v1875, v77 do
												local v5677 = 0;
												while true do
													if (v5677 == (0 + 0)) then
														v1872 = v1872 + 1;
														v82[v5676] = v1873[v1872];
														break;
													end
												end
											end
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v1871 = 5 + 2;
										end
										if (v1871 == 0) then
											v1872 = nil;
											v1873, v1874 = nil;
											v1875 = nil;
											v82[v84[5 - 3]] = v82[v84[3]][v84[1342 - (413 + 925)]];
											v1871 = 1 + 0;
										end
										if (v1871 == (4 + 3)) then
											v1875 = v84[2];
											v82[v1875](v13(v82, v1875 + 1, v77));
											break;
										end
										if (v1871 == (1 + 1)) then
											v84 = v72[v76];
											v82[v84[2]] = v63[v84[10 - 7]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v1871 = 3;
										end
									end
								else
									local v1876;
									local v1877;
									v1877 = v84[2];
									v82[v1877](v13(v82, v1877 + (1 - 0), v84[3]));
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v1877 = v84[5 - 3];
									v1876 = v82[v84[1947 - (1164 + 780)]];
									v82[v1877 + 1] = v1876;
									v82[v1877] = v1876[v84[4]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1362 - (596 + 764)]] = v84[285 - (52 + 230)];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[1568 - (806 + 760)]] = v84[3];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v1877 = v84[2 - 0];
									v82[v1877] = v82[v1877](v13(v82, v1877 + (1 - 0), v84[2 + 1]));
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v1877 = v84[2];
									v1876 = v82[v84[11 - 8]];
									v82[v1877 + (1 - 0)] = v1876;
									v82[v1877] = v1876[v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v84[3 + 0];
								end
							elseif (v85 > (2109 - (1000 + 965))) then
								local v1894;
								local v1895;
								local v1894, v1896;
								local v1897;
								local v1898;
								v82[v84[2 + 0]] = v63[v84[12 - 9]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[2 + 0]] = v63[v84[1129 - (261 + 865)]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v1898 = v84[2 - 0];
								v1897 = v82[v84[2 + 1]];
								v82[v1898 + (546 - (33 + 512))] = v1897;
								v82[v1898] = v1897[v84[4]];
								v76 = v76 + (1837 - (1555 + 281));
								v84 = v72[v76];
								v82[v84[2]] = v84[3];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v1898 = v84[2 + 0];
								v82[v1898] = v82[v1898](v13(v82, v1898 + (1 - 0), v84[3 + 0]));
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v1898 = v84[2 + 0];
								v1897 = v82[v84[42 - (34 + 5)]];
								v82[v1898 + 1 + 0] = v1897;
								v82[v1898] = v1897[v84[2 + 2]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v1898 = v84[1 + 1];
								v1894, v1896 = v75(v82[v1898](v82[v1898 + 1 + 0]));
								v77 = (v1896 + v1898) - (3 - 2);
								v1895 = 0 - 0;
								for v3534 = v1898, v77 do
									local v3535 = 1221 - (999 + 222);
									while true do
										if (((0 + 0) == v3535) or (2708 == 2137)) then
											v1895 = v1895 + 1;
											v82[v3534] = v1894[v1895];
											break;
										end
									end
								end
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v1898 = v84[2];
								v1894 = {v82[v1898](v13(v82, v1898 + 1 + 0, v77))};
								v1895 = 0;
								for v3536 = v1898, v84[11 - 7] do
									v1895 = v1895 + (1301 - (587 + 713));
									v82[v3536] = v1894[v1895];
								end
								v76 = v76 + 1;
								v84 = v72[v76];
								v76 = v84[3];
							else
								local v1916;
								local v1917;
								v1917 = v84[2 + 0];
								v1916 = v82[v84[3]];
								v82[v1917 + (1123 - (11 + 1111))] = v1916;
								v82[v1917] = v1916[v84[3 + 1]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[4 - 2]] = v84[1103 - (882 + 218)];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v1917 = v84[964 - (115 + 847)];
								v82[v1917] = v82[v1917](v13(v82, v1917 + (2 - 1), v84[3]));
								v76 = v76 + (1616 - (1231 + 384));
								v84 = v72[v76];
								v82[v84[3 - 1]] = v82[v84[3]][v84[4]];
								v76 = v76 + (1697 - (1202 + 494));
								v84 = v72[v76];
								v82[v84[2]] = v84[181 - (12 + 166)] ~= (0 - 0);
							end
						elseif (v85 <= 153) then
							if (v85 <= (101 + 48)) then
								if (v85 <= (751 - (202 + 402))) then
									if (v85 > 146) then
										local v1930;
										local v1931, v1932;
										local v1933;
										v82[v84[2 + 0]] = v82[v84[3]][v84[4]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1000 - (936 + 62)]]();
										v76 = v76 + (349 - (119 + 229));
										v84 = v72[v76];
										v82[v84[4 - 2]] = v62[v84[11 - 8]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[4 - 2]] = v82[v84[1439 - (513 + 923)]];
										v76 = v76 + (1778 - (507 + 1270));
										v84 = v72[v76];
										v82[v84[2]] = v63[v84[2 + 1]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[7 - 5]] = v82[v84[2 + 1]][v84[15 - 11]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[771 - (644 + 125)]] = v84[3];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v84[1850 - (718 + 1129)];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[5 - 3]] = v84[1412 - (564 + 845)];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v1933 = v84[164 - (46 + 116)];
										v82[v1933] = v82[v1933](v13(v82, v1933 + (651 - (575 + 75)), v84[7 - 4]));
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v62[v84[9 - 6]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[3]][v84[3 + 1]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[3 + 0]][v84[674 - (224 + 446)]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[3]][v84[1 + 3]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[6 - 4]] = v82[v84[321 - (56 + 262)]] * v82[v84[4]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[703 - (666 + 35)]] = v82[v84[8 - 5]] / v84[1184 - (553 + 627)];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1475 - (936 + 537)]] = v82[v84[3]] + v82[v84[1 + 3]];
										v76 = v76 + (1201 - (737 + 463));
										v84 = v72[v76];
										v82[v84[2 + 0]] = v63[v84[670 - (424 + 243)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[7 - 5]] = v82[v84[1349 - (1213 + 133)]][v84[6 - 2]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[62 - (37 + 23)]] = v63[v84[10 - 7]];
										v76 = v76 + (1344 - (122 + 1221));
										v84 = v72[v76];
										v82[v84[244 - (139 + 103)]] = v82[v84[1 + 2]][v84[2 + 2]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[3]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v1933 = v84[1 + 1];
										v82[v1933] = v82[v1933](v82[v1933 + (107 - (9 + 97))]);
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2]] = v84[2 + 1];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v84[3 + 0];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v1933 = v84[1077 - (657 + 418)];
										v1931, v1932 = v75(v82[v1933](v13(v82, v1933 + (1981 - (448 + 1532)), v84[3])));
										v77 = (v1932 + v1933) - (254 - (110 + 143));
										v1930 = 0 - 0;
										for v3539 = v1933, v77 do
											local v3540 = 943 - (549 + 394);
											while true do
												if (v3540 == 0) then
													v1930 = v1930 + 1;
													v82[v3539] = v1931[v1930];
													break;
												end
											end
										end
										v76 = v76 + 1;
										v84 = v72[v76];
										v1933 = v84[2];
										v82[v1933](v13(v82, v1933 + 1 + 0, v77));
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v63[v84[1237 - (500 + 734)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[3]][v84[1 + 3]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[667 - (343 + 322)]]();
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v62[v84[3]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[6 - 4]] = v82[v84[1134 - (297 + 834)]];
										v76 = v76 + (4 - 3);
										v84 = v72[v76];
										v82[v84[1 + 1]] = v63[v84[7 - 4]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[3 + 0]][v84[790 - (494 + 292)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[9 - 7]] = v84[1635 - (888 + 744)];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v84[688 - (206 + 479)];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v84[1176 - (861 + 312)];
										v76 = v76 + (737 - (135 + 601));
										v84 = v72[v76];
										v1933 = v84[1144 - (1085 + 57)];
										v82[v1933] = v82[v1933](v13(v82, v1933 + (1926 - (224 + 1701)), v84[1 + 2]));
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[2]] = v62[v84[3 + 0]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[749 - (730 + 16)]][v84[4 + 0]];
										v76 = v76 + (1583 - (790 + 792));
										v84 = v72[v76];
										v82[v84[1083 - (474 + 607)]] = v82[v84[533 - (129 + 401)]][v84[5 - 1]];
										v76 = v76 + (119 - (51 + 67));
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[116 - (93 + 20)]][v84[15 - 11]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[22 - (12 + 8)]] = v82[v84[201 - (161 + 37)]] * v82[v84[2 + 2]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1559 - (507 + 1050)]] = v82[v84[5 - 2]] / v84[7 - 3];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[1 + 2]] + v82[v84[1 + 3]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[3 - 1]] = v63[v84[867 - (184 + 680)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[5 - 3]] = v82[v84[2 + 1]][v84[4]];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[3 - 1]] = v63[v84[1 + 2]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1052 - (629 + 421)]] = v82[v84[3 + 0]][v84[4]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[6 - 3]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v1933 = v84[942 - (544 + 396)];
										v82[v1933] = v82[v1933](v82[v1933 + (1 - 0)]);
										v76 = v76 + (992 - (904 + 87));
										v84 = v72[v76];
										v82[v84[2]] = v84[10 - 7];
										v76 = v76 + (1475 - (1443 + 31));
										v84 = v72[v76];
										v82[v84[4 - 2]] = v84[3];
										v76 = v76 + (1814 - (1110 + 703));
										v84 = v72[v76];
										v1933 = v84[2];
										v1931, v1932 = v75(v82[v1933](v13(v82, v1933 + 1, v84[7 - 4])));
										v77 = (v1932 + v1933) - (1 + 0);
										v1930 = 0 - 0;
										for v3541 = v1933, v77 do
											v1930 = v1930 + (2 - 1);
											v82[v3541] = v1931[v1930];
										end
										v76 = v76 + 1;
										v84 = v72[v76];
										v1933 = v84[205 - (78 + 125)];
										v82[v1933](v13(v82, v1933 + 1, v77));
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[3 - 1]] = v84[4 - 1];
									else
										v82[v84[1826 - (1392 + 432)]] = v63[v84[1 + 2]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[7 - 4]][v84[1 + 3]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1404 - (963 + 439)]] = v82[v84[6 - 3]][v84[4]];
										v76 = v76 + (1326 - (76 + 1249));
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[1754 - (1165 + 586)]][v84[1932 - (1916 + 12)]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v82[v84[1259 - (604 + 652)]][v84[7 - 3]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2 - 0]][v84[3]] = v84[4];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										do
											return;
										end
									end
								elseif (v85 == (341 - 193)) then
									local v2010 = v84[2 - 0];
									v82[v2010](v13(v82, v2010 + (1 - 0), v84[3]));
								else
									v82[v84[2 - 0]] = v63[v84[16 - (11 + 2)]];
									v76 = v76 + (1443 - (64 + 1378));
									v84 = v72[v76];
									v82[v84[4 - 2]] = v82[v84[1756 - (256 + 1497)]][v84[4 - 0]];
									v76 = v76 + (878 - (562 + 315));
									v84 = v72[v76];
									v82[v84[7 - 5]] = v82[v84[1191 - (577 + 611)]][v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[7 - 4]][v84[6 - 2]];
									v76 = v76 + (72 - (58 + 13));
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[2 + 1]][v84[458 - (404 + 50)]];
									v76 = v76 + (37 - (6 + 30));
									v84 = v72[v76];
									v82[v84[1335 - (770 + 563)]][v84[3 + 0]] = v82[v84[1 + 3]];
									v76 = v76 + 1;
									v84 = v72[v76];
									do
										return;
									end
								end
							elseif (v85 <= (321 - (25 + 145))) then
								if (v85 == (101 + 49)) then
									local v2024 = 699 - (153 + 546);
									local v2025;
									while true do
										if (v2024 == (0 + 0)) then
											v2025 = v84[2];
											do
												return v13(v82, v2025, v77);
											end
											break;
										end
									end
								else
									local v2026;
									v82[v84[929 - (60 + 867)]] = v82[v84[3]][v84[4]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[7 - 5]] = v84[1286 - (309 + 974)];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v2026 = v84[5 - 3];
									v82[v2026](v82[v2026 + (1142 - (677 + 464))]);
									v76 = v76 + (823 - (567 + 255));
									v84 = v72[v76];
									v82[v84[2]] = v62[v84[3]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 - 0]] = v62[v84[3]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v2026 = v84[530 - (384 + 144)];
									v82[v2026](v82[v2026 + (1222 - (1030 + 191))]);
									v76 = v76 + 1;
									v84 = v72[v76];
									v76 = v84[3];
								end
							elseif (v85 == (298 - 146)) then
								local v2038 = 0;
								local v2039;
								local v2040;
								while true do
									if (v2038 == (1 - 0)) then
										v82[v2039 + 1 + 0] = v2040;
										v82[v2039] = v2040[v84[4]];
										break;
									end
									if (v2038 == (857 - (326 + 531))) then
										v2039 = v84[2];
										v2040 = v82[v84[7 - 4]];
										v2038 = 1 + 0;
									end
								end
							else
								local v2041;
								local v2042;
								v63[v84[3]] = v82[v84[2]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[4 - 2]] = v62[v84[1 + 2]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v2042 = v84[1623 - (1367 + 254)];
								v2041 = v82[v84[681 - (305 + 373)]];
								v82[v2042 + 1] = v2041;
								v82[v2042] = v2041[v84[4 - 0]];
								v76 = v76 + (320 - (129 + 190));
								v84 = v72[v76];
								v2042 = v84[2];
								v82[v2042](v82[v2042 + (2 - 1)]);
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[3 + 0];
							end
						elseif (v85 <= (446 - (210 + 79))) then
							if (v85 <= (275 - 120)) then
								if (v85 == (382 - 228)) then
									v82[v84[674 - (32 + 640)]] = -v82[v84[3 + 0]];
								elseif (v82[v84[2 + 0]] == v84[4]) then
									v76 = v76 + 1;
								else
									v76 = v84[2 + 1];
								end
							elseif (v85 > (99 + 57)) then
								local v2057;
								v82[v84[1763 - (847 + 914)]] = v82[v84[3]][v84[11 - 7]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[526 - (163 + 361)]] = v82[v84[888 - (162 + 723)]][v84[1 + 3]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[403 - (258 + 143)]] = v82[v84[12 - 9]] - v82[v84[8 - 4]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[1693 - (486 + 1205)]] = v82[v84[3]][v84[169 - (92 + 73)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[4 - 1]] * v84[276 - (68 + 204)];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[3]] - v82[v84[4]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v2057 = v84[2];
								v82[v2057] = v82[v2057](v13(v82, v2057 + (4 - 3), v84[2 + 1]));
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v63[v84[3 + 0]];
								v76 = v76 + (317 - (20 + 296));
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[12 - 9]][v84[13 - 9]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2 - 0]] = v82[v84[2 + 1]][v84[4]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[5 - 3]] = v82[v84[2 + 1]] - v82[v84[4 + 0]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[5 - 3]] = v82[v84[4 - 1]][v84[3 + 1]];
								v76 = v76 + (250 - (155 + 94));
								v84 = v72[v76];
								v82[v84[2 - 0]] = v82[v84[3]] * v84[4];
								v76 = v76 + (908 - (515 + 392));
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[329 - (7 + 319)]] + v82[v84[4]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v2057 = v84[1 + 1];
								v82[v2057] = v82[v2057](v13(v82, v2057 + 1, v84[1500 - (292 + 1205)]));
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[55 - (13 + 39)]] - v82[v84[4 + 0]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]][v84[4]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[2]] = v62[v84[1041 - (850 + 188)]];
								v76 = v76 + (1037 - (822 + 214));
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[1164 - (317 + 844)]][v84[4]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[3]][v84[1194 - (508 + 682)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[548 - (127 + 418)]][v84[10 - 6]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[9 - 7]] = v62[v84[4 - 1]];
								v76 = v76 + (1121 - (690 + 430));
								v84 = v72[v76];
								v82[v84[7 - 5]] = v82[v84[2 + 1]][v84[4]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[954 - (637 + 315)]] = v82[v84[3]][v84[11 - 7]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[6 - 4]] = v82[v84[3 + 0]][v84[9 - 5]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]] / v82[v84[24 - (13 + 7)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[4 - 1]] * v82[v84[9 - 5]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[1 + 1]] = v62[v84[2 + 1]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[354 - (44 + 307)]][v84[801 - (127 + 670)]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v63[v84[587 - (375 + 209)]];
								v76 = v76 + (1817 - (1673 + 143));
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3 + 0]][v84[3 + 1]];
								v76 = v76 + (1450 - (836 + 613));
								v84 = v72[v76];
								v82[v84[3 - 1]] = v82[v84[3 + 0]][v84[4]];
								v76 = v76 + (1531 - (295 + 1235));
								v84 = v72[v76];
								v82[v84[542 - (328 + 212)]] = v82[v84[6 - 3]] - v82[v84[923 - (517 + 402)]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[5 - 3]] = v82[v84[3]] - v84[1086 - (700 + 382)];
								v76 = v76 + (880 - (677 + 202));
								v84 = v72[v76];
								v82[v84[2 - 0]] = v82[v84[8 - 5]][v84[4 + 0]];
								v76 = v76 + (754 - (360 + 393));
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]] * v84[13 - 9];
								v76 = v76 + (1958 - (1231 + 726));
								v84 = v72[v76];
								v82[v84[2 - 0]] = v82[v84[1913 - (173 + 1737)]] + v82[v84[1951 - (441 + 1506)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v2057 = v84[2];
								v82[v2057] = v82[v2057](v13(v82, v2057 + (3 - 2), v84[697 - (136 + 558)]));
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1224 - (988 + 234)]][v84[3]] = v82[v84[4]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[4 - 2]] = v62[v84[654 - (125 + 526)]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[3]][v84[11 - 7]];
								v76 = v76 + (1127 - (290 + 836));
								v84 = v72[v76];
								v82[v84[1 + 1]] = v63[v84[3]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[682 - (8 + 672)]] = v82[v84[1 + 2]][v84[4]];
								v76 = v76 + (1437 - (740 + 696));
								v84 = v72[v76];
								v82[v84[1048 - (353 + 693)]] = v82[v84[3 + 0]][v84[1497 - (35 + 1458)]];
								v76 = v76 + (1871 - (1821 + 49));
								v84 = v72[v76];
								v82[v84[5 - 3]] = v82[v84[1737 - (727 + 1007)]] - v82[v84[4]];
								v76 = v76 + (168 - (165 + 2));
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[1662 - (1028 + 631)]] - v84[1619 - (311 + 1304)];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[3]][v84[1 + 3]];
								v76 = v76 + (580 - (512 + 67));
								v84 = v72[v76];
								v82[v84[5 - 3]] = v82[v84[1 + 2]] * v84[2 + 2];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[5 - 3]] = v82[v84[1 + 2]] + v82[v84[11 - 7]];
								v76 = v76 + (1790 - (395 + 1394));
								v84 = v72[v76];
								v82[v84[7 - 5]] = v82[v84[3]] - v82[v84[4]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v2057 = v84[5 - 3];
								v82[v2057] = v82[v2057](v13(v82, v2057 + (2 - 1), v84[3]));
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[469 - (143 + 324)]][v84[7 - 4]] = v82[v84[1 + 3]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[1 + 1]] = v62[v84[1106 - (342 + 761)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]][v84[4]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[1 + 1]] = v63[v84[4 - 1]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]][v84[3 + 1]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1159 - (889 + 268)]] = v82[v84[2 + 1]][v84[1 + 3]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[299 - (196 + 101)]] = v82[v84[5 - 2]] - v82[v84[11 - 7]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[2 + 1]] - v84[12 - 8];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[4 - 2]] = v82[v84[8 - 5]][v84[4 + 0]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]] * v84[1587 - (431 + 1152)];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]] + v82[v84[4 + 0]];
								v76 = v76 + (345 - (107 + 237));
								v84 = v72[v76];
								v2057 = v84[1802 - (690 + 1110)];
								v82[v2057] = v82[v2057](v13(v82, v2057 + (1 - 0), v84[1500 - (1374 + 123)]));
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[1 + 1]][v84[3 + 0]] = v82[v84[1 + 3]];
								v76 = v76 + (1604 - (454 + 1149));
								v84 = v72[v76];
								v82[v84[3 - 1]] = v62[v84[6 - 3]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[3]][v84[4]];
								v76 = v76 + (638 - (21 + 616));
								v84 = v72[v76];
								v82[v84[3 - 1]] = v63[v84[1 + 2]];
								v76 = v76 + (438 - (125 + 312));
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3 + 0]][v84[4 + 0]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[1111 - (266 + 842)]][v84[642 - (395 + 243)]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3 + 0]] - v82[v84[1039 - (383 + 652)]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[2 + 1]] - v84[647 - (114 + 529)];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[2 + 1]][v84[1193 - (352 + 837)]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]] * v84[16 - 12];
								v76 = v76 + (551 - (465 + 85));
								v84 = v72[v76];
								v82[v84[533 - (366 + 165)]] = v82[v84[1 + 2]] - v82[v84[12 - 8]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v2057 = v84[2];
								v82[v2057] = v82[v2057](v13(v82, v2057 + (3 - 2), v84[1 + 2]));
								v76 = v76 + (1666 - (521 + 1144));
								v84 = v72[v76];
								v82[v84[3 - 1]][v84[1 + 2]] = v82[v84[94 - (5 + 85)]];
								v76 = v76 + (1694 - (1547 + 146));
								v84 = v72[v76];
								v82[v84[6 - 4]] = v63[v84[3]];
								v76 = v76 + (318 - (272 + 45));
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[6 - 3]][v84[4]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v84[4 - 1];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v84[3 + 0];
							else
								local v2129;
								local v2130;
								local v2129, v2131;
								local v2132;
								local v2133;
								v82[v84[1 + 1]] = v63[v84[1299 - (997 + 299)]];
								v76 = v76 + (1288 - (903 + 384));
								v84 = v72[v76];
								v82[v84[1 + 1]] = v63[v84[1 + 2]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v2133 = v84[3 - 1];
								v2132 = v82[v84[3]];
								v82[v2133 + (3 - 2)] = v2132;
								v82[v2133] = v2132[v84[2 + 2]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[2]] = v84[2 + 1];
								v76 = v76 + (590 - (313 + 276));
								v84 = v72[v76];
								v2133 = v84[1 + 1];
								v82[v2133] = v82[v2133](v13(v82, v2133 + (329 - (168 + 160)), v84[1459 - (1452 + 4)]));
								v76 = v76 + (4 - 3);
								v84 = v72[v76];
								v2133 = v84[422 - (338 + 82)];
								v2132 = v82[v84[576 - (133 + 440)]];
								v82[v2133 + 1 + 0] = v2132;
								v82[v2133] = v2132[v84[5 - 1]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v2133 = v84[1 + 1];
								v2129, v2131 = v75(v82[v2133](v82[v2133 + 1 + 0]));
								v77 = (v2131 + v2133) - (1 + 0);
								v2130 = 1302 - (422 + 880);
								for v3544 = v2133, v77 do
									local v3545 = 1980 - (365 + 1615);
									while true do
										if ((0 - 0) == v3545) then
											v2130 = v2130 + (1353 - (479 + 873));
											v82[v3544] = v2129[v2130];
											break;
										end
									end
								end
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v2133 = v84[2];
								v2129 = {v82[v2133](v13(v82, v2133 + (2 - 1), v77))};
								v2130 = 0 - 0;
								for v3546 = v2133, v84[1 + 3] do
									v2130 = v2130 + 1;
									v82[v3546] = v2129[v2130];
								end
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v76 = v84[3];
							end
						elseif ((740 < 3557) and (v85 <= (1661 - (832 + 670)))) then
							if (v85 > 158) then
								local v2152;
								local v2153;
								local v2154;
								local v2155;
								local v2156;
								local v2157;
								v82[v84[6 - 4]] = v63[v84[3]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v2157 = v84[2];
								v82[v2157] = v82[v2157]();
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1249 - (707 + 540)]] = v82[v84[62 - (18 + 41)]][v84[4 + 0]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]][v84[3]] = v82[v84[3 + 1]];
								v76 = v76 + (1221 - (554 + 666));
								v84 = v72[v76];
								v2157 = v84[2];
								v2156 = {};
								for v3549 = 1, #v81 do
									local v3550 = 500 - (438 + 62);
									while true do
										if (v3550 == (1905 - (1497 + 408))) then
											v2155 = v81[v3549];
											for v5746 = 0 - 0, #v2155 do
												local v5747 = 0 + 0;
												while true do
													if ((v5747 == (1 + 0)) or (765 == 2774)) then
														v2152 = v2154[642 - (508 + 132)];
														if ((v2153 == v82) and (v2152 >= v2157)) then
															v2156[v2152] = v2153[v2152];
															v2154[3 - 2] = v2156;
														end
														break;
													end
													if (v5747 == (0 - 0)) then
														v2154 = v2155[v5746];
														v2153 = v2154[1208 - (49 + 1158)];
														v5747 = 1 + 0;
													end
												end
											end
											break;
										end
									end
								end
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v76 = v84[2 + 1];
							else
								local v2168 = 0 + 0;
								local v2169;
								local v2170;
								while true do
									if (v2168 == (8 - 4)) then
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										if (v82[v84[1223 - (460 + 761)]] ~= v84[10 - 6]) then
											v76 = v76 + 1 + 0;
										else
											v76 = v84[3];
										end
										break;
									end
									if (v2168 == (1 + 1)) then
										v82[v2170] = v2169[v84[600 - (405 + 191)]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v84[1673 - (311 + 1359)];
										v2168 = 6 - 3;
									end
									if (v2168 == (0 + 0)) then
										v2169 = nil;
										v2170 = nil;
										v82[v84[2]] = v82[v84[1 + 2]][v84[1 + 3]];
										v76 = v76 + 1 + 0;
										v2168 = 1 + 0;
									end
									if ((1 - 0) == v2168) then
										v84 = v72[v76];
										v2170 = v84[1 + 1];
										v2169 = v82[v84[3]];
										v82[v2170 + (1 - 0)] = v2169;
										v2168 = 1 + 1;
									end
									if ((5 - 2) == v2168) then
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v2170 = v84[2];
										v82[v2170] = v82[v2170](v13(v82, v2170 + (1521 - (1408 + 112)), v84[985 - (285 + 697)]));
										v2168 = 19 - 15;
									end
								end
							end
						elseif (v85 == (1420 - (737 + 523))) then
							local v2171;
							local v2172;
							v2172 = v84[8 - 6];
							v82[v2172](v13(v82, v2172 + 1 + 0, v84[847 - (789 + 55)]));
							v76 = v76 + (3 - 2);
							v84 = v72[v76];
							v2172 = v84[2 + 0];
							v2171 = v82[v84[3]];
							v82[v2172 + (1 - 0)] = v2171;
							v82[v2172] = v2171[v84[6 - 2]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2 + 0]] = v84[8 - 5];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[1884 - (1492 + 390)]] = v84[5 - 2];
							v76 = v76 + 1;
							v84 = v72[v76];
							v2172 = v84[2];
							v82[v2172] = v82[v2172](v13(v82, v2172 + (994 - (312 + 681)), v84[1914 - (1255 + 656)]));
							v76 = v76 + 1;
							v84 = v72[v76];
							v2172 = v84[1729 - (485 + 1242)];
							v2171 = v82[v84[1 + 2]];
							v82[v2172 + (2 - 1)] = v2171;
							v82[v2172] = v2171[v84[5 - 1]];
							v76 = v76 + (3 - 2);
							v84 = v72[v76];
							v82[v84[6 - 4]] = v84[6 - 3];
						else
							local v2191;
							local v2192;
							local v2193;
							local v2194;
							local v2195;
							local v2196;
							v82[v84[1 + 1]] = v84[962 - (722 + 237)] ~= (0 - 0);
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[718 - (77 + 639)]] = v62[v84[3]];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v2196 = v84[9 - 7];
							v82[v2196](v13(v82, v2196 + 1, v84[3]));
							v76 = v76 + 1;
							v84 = v72[v76];
							v2196 = v84[3 - 1];
							v2195 = {};
							for v3551 = 2 - 1, #v81 do
								v2194 = v81[v3551];
								for v3674 = 0 - 0, #v2194 do
									v2193 = v2194[v3674];
									v2192 = v2193[1 + 0];
									v2191 = v2193[2];
									if ((1105 < 3187) and (v2192 == v82) and (v2191 >= v2196)) then
										v2195[v2191] = v2192[v2191];
										v2193[1] = v2195;
									end
								end
							end
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v76 = v84[1362 - (888 + 471)];
						end
					elseif ((v85 <= (1286 - (1034 + 75))) or (4068 <= 927)) then
						if ((1257 <= 2472) and (v85 <= (1326 - (448 + 709)))) then
							if (v85 <= (15 + 150)) then
								if (v85 <= (577 - 414)) then
									if (v85 > (2017 - (1643 + 212))) then
										v82[v84[482 - (320 + 160)]] = v82[v84[6 - 3]] - v84[10 - 6];
									else
										local v2205;
										v82[v84[2]] = v84[1 + 2];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[138 - (114 + 22)]] = v84[1 + 2];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[1061 - (89 + 970)]] = v84[3];
										v76 = v76 + (1729 - (1083 + 645));
										v84 = v72[v76];
										v2205 = v84[2];
										do
											return v82[v2205](v13(v82, v2205 + (167 - (50 + 116)), v84[3]));
										end
										v76 = v76 + (1963 - (1058 + 904));
										v84 = v72[v76];
										v2205 = v84[4 - 2];
										do
											return v13(v82, v2205, v77);
										end
									end
								elseif (v85 == (654 - 490)) then
									local v2214;
									v82[v84[2]] = v82[v84[11 - 8]][v84[11 - 7]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v84[3];
									v76 = v76 + (197 - (94 + 102));
									v84 = v72[v76];
									v82[v84[2 + 0]] = v84[1267 - (735 + 529)];
									v76 = v76 + (1152 - (875 + 276));
									v84 = v72[v76];
									v2214 = v84[981 - (461 + 518)];
									v82[v2214] = v82[v2214](v13(v82, v2214 + 1 + 0, v84[8 - 5]));
									v76 = v76 + (782 - (656 + 125));
									v84 = v72[v76];
									v82[v84[4 - 2]][v84[3]] = v82[v84[852 - (532 + 316)]];
									v76 = v76 + (255 - (150 + 104));
									v84 = v72[v76];
									v82[v84[2]] = v63[v84[3]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[5 - 3]] = v82[v84[1850 - (564 + 1283)]][v84[4]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v84[8 - 5];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v84[10 - 7];
									v76 = v76 + (1549 - (330 + 1218));
									v84 = v72[v76];
									v2214 = v84[2];
									v82[v2214] = v82[v2214](v13(v82, v2214 + 1 + 0, v84[3 + 0]));
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 + 0]][v84[3]] = v82[v84[3 + 1]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2 + 0]][v84[3]] = v82[v84[4]];
									v76 = v76 + (4 - 3);
									v84 = v72[v76];
									v82[v84[1 + 1]][v84[1572 - (511 + 1058)]] = v84[9 - 5];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1500 - (1315 + 183)]] = v84[3];
								else
									local v2238;
									v82[v84[1 + 1]] = v82[v84[545 - (233 + 309)]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2]] = v62[v84[656 - (267 + 386)]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[855 - (744 + 109)]] = v82[v84[1553 - (1271 + 279)]][v84[10 - 6]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v2238 = v84[2];
									v82[v2238](v82[v2238 + (1645 - (642 + 1002))]);
									v76 = v76 + (1864 - (643 + 1220));
									v84 = v72[v76];
									v82[v84[5 - 3]] = v82[v84[4 - 1]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1419 - (1063 + 354)]] = v62[v84[833 - (739 + 91)]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[1879 - (790 + 1087)]] = v82[v84[3 + 0]][v84[9 - 5]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v2238 = v84[2];
									v82[v2238](v82[v2238 + (3 - 2)]);
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[4 - 2]] = v62[v84[3]];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[6 - 4]] = v82[v84[152 - (82 + 67)]][v84[4 + 0]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									if v82[v84[2]] then
										v76 = v76 + (1986 - (1835 + 150));
									else
										v76 = v84[17 - (12 + 2)];
									end
								end
							elseif (v85 <= (1203 - (784 + 252))) then
								if (v85 > (59 + 107)) then
									local v2257;
									v82[v84[2]] = v82[v84[5 - 2]][v84[4 + 0]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1386 - (1134 + 250)]] = v84[3];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[5 - 2]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v2257 = v84[2 + 0];
									v82[v2257] = v82[v2257](v13(v82, v2257 + (2 - 1), v84[7 - 4]));
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[3 - 1]] = v82[v84[3]];
									v76 = v76 + (1982 - (1940 + 41));
									v84 = v72[v76];
									v82[v84[240 - (39 + 199)]][v84[3 + 0]] = v82[v84[7 - 3]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[1931 - (313 + 1616)]] = v84[9 - 6];
								else
									local v2273;
									v82[v84[2 - 0]] = v63[v84[5 - 2]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v2273 = v84[39 - (7 + 30)];
									v82[v2273] = v82[v2273]();
									v76 = v76 + (1187 - (961 + 225));
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[12 - 9]][v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[842 - (281 + 559)]] = v82[v84[8 - 5]][v84[1 + 3]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[3]] - v82[v84[1 + 3]];
									v76 = v76 + (1441 - (102 + 1338));
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[2 + 1]][v84[445 - (319 + 122)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									if (v82[v84[2]] < v84[1000 - (45 + 951)]) then
										v76 = v76 + 1 + 0;
									else
										v76 = v84[1 + 2];
									end
								end
							elseif (v85 > (72 + 96)) then
								local v2285;
								v82[v84[2 - 0]] = v82[v84[1 + 2]][v84[2 + 2]];
								v76 = v76 + (1376 - (684 + 691));
								v84 = v72[v76];
								v82[v84[1646 - (1161 + 483)]] = v82[v84[969 - (245 + 721)]][v84[4 + 0]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[45 - (31 + 11)]][v84[13 - 9]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[2]] = v63[v84[3]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[838 - (179 + 657)]] = v82[v84[330 - (150 + 177)]][v84[3 + 1]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1207 - (142 + 1063)]] = v82[v84[1908 - (1346 + 559)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[5 - 3]] = v82[v84[11 - 8]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[1729 - (1695 + 31)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v2285 = v84[2];
								do
									return v82[v2285](v13(v82, v2285 + (1438 - (1073 + 364)), v84[820 - (405 + 412)]));
								end
								v76 = v76 + (650 - (518 + 131));
								v84 = v72[v76];
								v2285 = v84[1304 - (667 + 635)];
								do
									return v13(v82, v2285, v77);
								end
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								do
									return;
								end
							else
								local v2304 = v84[2 - 0];
								v82[v2304] = v82[v2304](v13(v82, v2304 + (1911 - (1397 + 513)), v77));
							end
						elseif (v85 <= (292 - 119)) then
							if ((v85 <= (1246 - (454 + 621))) or (594 > 1416)) then
								if ((v85 > (347 - 177)) or (2603 > 4409)) then
									local v2306 = 0 + 0;
									local v2307;
									local v2308;
									local v2309;
									local v2310;
									while true do
										if (v2306 == (13 - 7)) then
											v77 = (v2309 + v2310) - 1;
											v2307 = 598 - (417 + 181);
											for v5688 = v2310, v77 do
												v2307 = v2307 + 1;
												v82[v5688] = v2308[v2307];
											end
											v76 = v76 + (1 - 0);
											v84 = v72[v76];
											v2310 = v84[1 + 1];
											v82[v2310](v13(v82, v2310 + (3 - 2), v77));
											v2306 = 34 - 27;
										end
										if ((3605 <= 4047) and (v2306 == (1128 - (995 + 125)))) then
											v84 = v72[v76];
											v82[v84[2]]();
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v76 = v84[2 + 1];
											break;
										end
										if (v2306 == (7 - 4)) then
											v2310 = v84[1327 - (754 + 571)];
											v82[v2310] = v82[v2310](v13(v82, v2310 + 1 + 0, v84[8 - 5]));
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[1 + 1]] = v63[v84[3]];
											v76 = v76 + (3 - 2);
											v84 = v72[v76];
											v2306 = 3 + 1;
										end
										if (v2306 == (7 - 5)) then
											v84 = v72[v76];
											v82[v84[1 + 1]] = v84[1494 - (1141 + 350)];
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[1 + 1]] = v84[2 + 1];
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v2306 = 3;
										end
										if (v2306 == (1 + 4)) then
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v82[v84[2 + 0]] = v84[1872 - (513 + 1356)];
											v76 = v76 + (1937 - (196 + 1740));
											v84 = v72[v76];
											v2310 = v84[2];
											v2308, v2309 = v75(v82[v2310](v13(v82, v2310 + (1 - 0), v84[3])));
											v2306 = 4 + 2;
										end
										if (v2306 == (1 - 0)) then
											v76 = v76 + (1 - 0);
											v84 = v72[v76];
											v82[v84[2 + 0]] = v82[v84[6 - 3]][v84[1 + 3]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[5 - 3]] = v84[3];
											v76 = v76 + (1632 - (362 + 1269));
											v2306 = 5 - 3;
										end
										if (v2306 == (41 - (26 + 11))) then
											v82[v84[2]] = v82[v84[1 + 2]][v84[1 + 3]];
											v76 = v76 + (1820 - (183 + 1636));
											v84 = v72[v76];
											v82[v84[2 + 0]] = v84[3 + 0];
											v76 = v76 + (1231 - (1161 + 69));
											v84 = v72[v76];
											v82[v84[2]] = v84[1381 - (672 + 706)];
											v2306 = 2 + 3;
										end
										if (v2306 == (112 - (82 + 23))) then
											v76 = v76 + (1522 - (100 + 1421));
											v84 = v72[v76];
											v82[v84[782 - (61 + 719)]] = v63[v84[415 - (180 + 232)]];
											v76 = v76 + 1;
											v84 = v72[v76];
											v82[v84[2 + 0]] = v82[v84[4 - 1]][v84[4]];
											v76 = v76 + (2 - 1);
											v2306 = 1789 - (728 + 1053);
										end
										if ((3190 < 3929) and (v2306 == 0)) then
											v2307 = nil;
											v2308, v2309 = nil;
											v2310 = nil;
											v82[v84[2 + 0]] = v82[v84[562 - (427 + 132)]];
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[2]] = v63[v84[968 - (786 + 179)]];
											v2306 = 1;
										end
									end
								else
									local v2311;
									v82[v84[2]] = v82[v84[1 + 2]][v84[2 + 2]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2 + 0]] = v63[v84[1927 - (1685 + 239)]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[4 - 2]] = v82[v84[6 - 3]][v84[8 - 4]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v84[8 - 5];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1179 - (457 + 720)]] = v84[7 - 4];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v2311 = v84[723 - (124 + 597)];
									v82[v2311] = v82[v2311](v13(v82, v2311 + (4 - 3), v84[567 - (414 + 150)]));
									v76 = v76 + (4 - 3);
									v84 = v72[v76];
									v82[v84[831 - (592 + 237)]][v84[3 + 0]] = v82[v84[10 - 6]];
									v76 = v76 + (614 - (122 + 491));
									v84 = v72[v76];
									v82[v84[9 - 7]] = v62[v84[3]];
									v76 = v76 + (286 - (116 + 169));
									v84 = v72[v76];
									v82[v84[7 - 5]] = v82[v84[3]][v84[4 + 0]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2 - 0]] = v63[v84[5 - 2]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[1233 - (477 + 753)]][v84[1 + 3]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v84[2 + 1];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[6 - 4]] = v84[1 + 2];
									v76 = v76 + (1378 - (649 + 728));
									v84 = v72[v76];
									v2311 = v84[2];
									v82[v2311] = v82[v2311](v13(v82, v2311 + (913 - (478 + 434)), v84[5 - 2]));
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2]][v84[3]] = v82[v84[4]];
									v76 = v76 + (4 - 3);
									v84 = v72[v76];
									v76 = v84[3];
								end
							elseif ((3615 > 1634) and (v85 == 172)) then
								local v2340;
								v82[v84[2 + 0]] = v82[v84[1563 - (1329 + 231)]][v84[4]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[1912 - (1523 + 387)]] = v84[4 - 1];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v2340 = v84[2];
								v82[v2340] = v82[v2340](v82[v2340 + (1308 - (1013 + 294))]);
								v76 = v76 + (1349 - (25 + 1323));
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[1933 - (611 + 1319)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[3 - 1]][v84[2 + 1]] = v84[1 + 3];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[3 - 1]] = v84[3];
							else
								local v2353;
								v82[v84[1 + 1]] = v62[v84[2 + 1]];
								v76 = v76 + (817 - (353 + 463));
								v84 = v72[v76];
								v82[v84[3 - 1]] = v62[v84[3 + 0]];
								v76 = v76 + (1062 - (605 + 456));
								v84 = v72[v76];
								v82[v84[5 - 3]] = v82[v84[3]][v84[788 - (122 + 662)]];
								v76 = v76 + (1493 - (1184 + 308));
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[1171 - (445 + 723)]] * v84[4];
								v76 = v76 + (1641 - (1245 + 395));
								v84 = v72[v76];
								v82[v84[1129 - (191 + 936)]] = v62[v84[6 - 3]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v2353 = v84[1 + 1];
								v82[v2353] = v82[v2353](v13(v82, v2353 + 1, v84[261 - (90 + 168)]));
								v76 = v76 + (172 - (87 + 84));
								v84 = v72[v76];
								v82[v84[2]][v84[5 - 2]] = v82[v84[716 - (176 + 536)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1700 - (858 + 840)]] = v62[v84[663 - (447 + 213)]];
								v76 = v76 + (1461 - (1458 + 2));
								v84 = v72[v76];
								v82[v84[9 - 7]] = v62[v84[4 - 1]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[7 - 4]][v84[484 - (248 + 232)]];
								v76 = v76 + (231 - (109 + 121));
								v84 = v72[v76];
								v82[v84[1 + 1]] = v62[v84[3]];
								v76 = v76 + (1405 - (1288 + 116));
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[239 - (212 + 24)]][v84[3 + 1]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v2353 = v84[2];
								v82[v2353] = v82[v2353](v13(v82, v2353 + 1 + 0, v84[1710 - (1175 + 532)]));
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2 + 0]][v84[3]] = v82[v84[5 - 1]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v62[v84[572 - (252 + 317)]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[805 - (738 + 65)]] = v62[v84[560 - (410 + 147)]];
								v76 = v76 + (901 - (272 + 628));
								v84 = v72[v76];
								v82[v84[4 - 2]] = v82[v84[7 - 4]][v84[172 - (62 + 106)]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[5 - 3]] = v82[v84[3]] * v84[698 - (167 + 527)];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[2]] = v62[v84[4 - 1]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v2353 = v84[3 - 1];
								v82[v2353] = v82[v2353](v13(v82, v2353 + 1 + 0, v84[3]));
								v76 = v76 + (1067 - (326 + 740));
								v84 = v72[v76];
								v82[v84[78 - (68 + 8)]][v84[1474 - (133 + 1338)]] = v82[v84[10 - 6]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v62[v84[3]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v62[v84[2 + 1]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[6 - 4]] = v82[v84[2 + 1]][v84[3 + 1]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[1989 - (1930 + 57)]] = v62[v84[1 + 2]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[3]][v84[908 - (14 + 890)]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v2353 = v84[1 + 1];
								v82[v2353] = v82[v2353](v13(v82, v2353 + (2 - 1), v84[3]));
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[9 - 7]][v84[9 - 6]] = v82[v84[1 + 3]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[8 - 6]] = v62[v84[3 + 0]];
								v76 = v76 + (1782 - (755 + 1026));
								v84 = v72[v76];
								v82[v84[5 - 3]] = v84[13 - 10];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v62[v84[949 - (217 + 729)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v2353 = v84[1 + 1];
								v82[v2353] = v82[v2353](v13(v82, v2353 + (1 - 0), v84[8 - 5]));
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[7 - 5]][v84[3]] = v82[v84[1684 - (619 + 1061)]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v62[v84[3]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[138 - (108 + 28)]] = v84[1930 - (191 + 1736)];
								v76 = v76 + (764 - (757 + 6));
								v84 = v72[v76];
								v82[v84[1 + 1]] = v62[v84[1258 - (337 + 918)]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v2353 = v84[2];
								v82[v2353] = v82[v2353](v13(v82, v2353 + 1 + 0, v84[3]));
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1 + 1]][v84[7 - 4]] = v82[v84[1 + 3]];
								v76 = v76 + (1677 - (754 + 922));
								v84 = v72[v76];
								v82[v84[636 - (487 + 147)]] = v82[v84[3 - 0]];
								v76 = v76 + (1570 - (825 + 744));
								v84 = v72[v76];
								for v3553 = v84[1 + 1], v84[3 + 0] do
									v82[v3553] = nil;
								end
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[1 + 1]] = v84[3];
							end
						elseif (v85 <= (424 - (150 + 99))) then
							if (v85 == 174) then
								local v2406;
								local v2407;
								v2407 = v84[2];
								v2406 = v82[v84[3]];
								v82[v2407 + 1 + 0] = v2406;
								v82[v2407] = v2406[v84[4]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v2407 = v84[1505 - (1335 + 168)];
								v82[v2407] = v82[v2407](v82[v2407 + (940 - (256 + 683))]);
								v76 = v76 + (319 - (33 + 285));
								v84 = v72[v76];
								v82[v84[6 - 4]] = v82[v84[5 - 2]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[1 + 1]] = v63[v84[3 + 0]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[950 - (776 + 171)]][v84[4]];
								v76 = v76 + (264 - (244 + 19));
								v84 = v72[v76];
								v82[v84[2 - 0]] = v82[v84[3]];
								v76 = v76 + (407 - (8 + 398));
								v84 = v72[v76];
								v82[v84[518 - (228 + 288)]] = v62[v84[3 - 0]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v2407 = v84[1 + 1];
								v82[v2407] = v82[v2407](v13(v82, v2407 + (589 - (434 + 154)), v84[2 + 1]));
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								if v82[v84[7 - 5]] then
									v76 = v76 + (1 - 0);
								else
									v76 = v84[3];
								end
							else
								local v2425 = 0 + 0;
								local v2426;
								local v2427;
								while true do
									if (v2425 == (14 - 4)) then
										v84 = v72[v76];
										v82[v84[1 + 1]] = v84[3];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v84[3];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v2427 = v84[1667 - (810 + 855)];
										v82[v2427] = v82[v2427](v13(v82, v2427 + 1, v84[3 + 0]));
										v76 = v76 + 1 + 0;
										v2425 = 1 + 10;
									end
									if ((v2425 == (3 + 3)) or (2840 < 390)) then
										v84 = v72[v76];
										v82[v84[5 - 3]][v84[1617 - (463 + 1151)]] = v84[4 + 0];
										v76 = v76 + (1976 - (29 + 1946));
										v84 = v72[v76];
										v82[v84[1 + 1]] = {};
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[517 - (337 + 178)]][v84[3]] = v84[68 - (4 + 60)];
										v76 = v76 + 1;
										v84 = v72[v76];
										v2425 = 26 - 19;
									end
									if (((1 + 3) == v2425) or (3364 == 3507)) then
										v76 = v76 + (1117 - (425 + 691));
										v84 = v72[v76];
										v2427 = v84[2000 - (354 + 1644)];
										v82[v2427] = v82[v2427](v13(v82, v2427 + 1, v84[844 - (499 + 342)]));
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[162 - (65 + 95)]][v84[3]] = v82[v84[3 + 1]];
										v76 = v76 + (1640 - (1403 + 236));
										v84 = v72[v76];
										v82[v84[1362 - (1117 + 243)]][v84[245 - (67 + 175)]] = v84[2 + 2];
										v2425 = 10 - 5;
									end
									if (v2425 == (740 - (387 + 344))) then
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[976 - (654 + 320)]] = v63[v84[4 - 1]];
										v76 = v76 + (432 - (276 + 155));
										v84 = v72[v76];
										v82[v84[5 - 3]] = v82[v84[2 + 1]][v84[4]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[776 - (65 + 709)]] = v84[2 + 1];
										v76 = v76 + (1745 - (884 + 860));
										v2425 = 14 - 4;
									end
									if (v2425 == (692 - (492 + 188))) then
										v2427 = v84[2 + 0];
										v2426 = v82[v84[10 - 7]];
										v82[v2427 + 1 + 0] = v2426;
										v82[v2427] = v2426[v84[2 + 2]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v84[3];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v2427 = v84[2];
										v2425 = 17 - 4;
									end
									if ((8 == v2425) or (1880 >= 3697)) then
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[1 + 1]] = v84[1 + 2];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v2427 = v84[1 + 1];
										v82[v2427] = v82[v2427](v13(v82, v2427 + 1 + 0, v84[3]));
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[1 + 1]][v84[1 + 2]] = v82[v84[5 - 1]];
										v2425 = 9;
									end
									if (v2425 == 0) then
										v2426 = nil;
										v2427 = nil;
										v82[v84[2]] = {};
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[2 - 0]] = v63[v84[5 - 2]];
										v76 = v76 + (1252 - (1190 + 61));
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[1696 - (1448 + 245)]][v84[5 - 1]];
										v76 = v76 + (2 - 1);
										v2425 = 1;
									end
									if (v2425 == 1) then
										v84 = v72[v76];
										v82[v84[5 - 3]] = v84[7 - 4];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[825 - (528 + 295)]] = v84[3 - 0];
										v76 = v76 + (1348 - (1224 + 123));
										v84 = v72[v76];
										v82[v84[2]] = v84[1 + 2];
										v76 = v76 + (638 - (97 + 540));
										v84 = v72[v76];
										v2425 = 1970 - (484 + 1484);
									end
									if (v2425 == (1559 - (1398 + 154))) then
										v82[v84[2 + 0]] = v63[v84[7 - 4]];
										v76 = v76 + (3 - 2);
										v84 = v72[v76];
										v82[v84[532 - (354 + 176)]] = v82[v84[7 - 4]][v84[1 + 3]];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[2 + 0]] = v84[2 + 1];
										v76 = v76 + (1431 - (649 + 781));
										v84 = v72[v76];
										v82[v84[2 + 0]] = v84[5 - 2];
										v2425 = 23 - 15;
									end
									if ((3639 == 3639) and (v2425 == 3)) then
										v82[v84[779 - (126 + 651)]] = v82[v84[5 - 2]][v84[4]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v84[2 + 1];
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2]] = v84[2 + 1];
										v76 = v76 + (2 - 1);
										v84 = v72[v76];
										v82[v84[2]] = v84[3];
										v2425 = 11 - 7;
									end
									if (v2425 == (1 + 4)) then
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1031 - (179 + 850)]][v84[787 - (34 + 750)]] = v84[309 - (302 + 3)];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2 - 0]][v84[1 + 2]] = v84[10 - 6];
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										v82[v84[3 - 1]][v84[2 + 1]] = v84[4];
										v76 = v76 + 1;
										v2425 = 8 - 2;
									end
									if ((v2425 == (1 + 1)) or (280 == 4724)) then
										v2427 = v84[2];
										v82[v2427] = v82[v2427](v13(v82, v2427 + (105 - (56 + 48)), v84[3 + 0]));
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]][v84[4 - 1]] = v82[v84[86 - (7 + 75)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[7 - 5]] = v63[v84[258 - (170 + 85)]];
										v76 = v76 + (350 - (288 + 61));
										v84 = v72[v76];
										v2425 = 3 + 0;
									end
									if (v2425 == (12 + 2)) then
										v2426 = v82[v84[2 + 1]];
										v82[v2427 + 1 + 0] = v2426;
										v82[v2427] = v2426[v84[9 - 5]];
										v76 = v76 + (738 - (330 + 407));
										v84 = v72[v76];
										v82[v84[190 - (29 + 159)]] = v84[5 - 2];
										v76 = v76 + (4 - 3);
										v84 = v72[v76];
										v2427 = v84[2 - 0];
										v82[v2427] = v82[v2427](v13(v82, v2427 + 1, v84[3]));
										v2425 = 8 + 7;
									end
									if (v2425 == (770 - (15 + 742))) then
										v82[v2427] = v82[v2427](v13(v82, v2427 + (451 - (414 + 36)), v84[1509 - (745 + 761)]));
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v82[v84[2 + 1]][v84[5 - 1]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v63[v84[1082 - (126 + 953)]];
										v76 = v76 + 1;
										v84 = v72[v76];
										v2427 = v84[1702 - (759 + 941)];
										v2425 = 8 + 6;
									end
									if (v2425 == (1619 - (896 + 708))) then
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1579 - (555 + 1022)]] = v82[v84[1 + 2]][v84[145 - (14 + 127)]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v2427 = v84[797 - (141 + 654)];
										v2426 = v82[v84[934 - (156 + 775)]];
										v82[v2427 + 1] = v2426;
										v82[v2427] = v2426[v84[1594 - (167 + 1423)]];
										v76 = v76 + 1;
										v2425 = 43 - 27;
									end
									if (11 == v2425) then
										v84 = v72[v76];
										v82[v84[2]][v84[3]] = v82[v84[12 - 8]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2]] = v84[1 + 2] ~= (0 - 0);
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1882 - (1625 + 255)]] = v63[v84[3 + 0]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v2425 = 1528 - (1026 + 490);
									end
									if (v2425 == (14 + 2)) then
										v84 = v72[v76];
										v2427 = v84[1736 - (16 + 1718)];
										v82[v2427] = v82[v2427](v82[v2427 + 1 + 0]);
										break;
									end
								end
							end
						elseif (v85 > (163 + 13)) then
							local v2428 = 0 - 0;
							local v2429;
							while true do
								if (v2428 == (0 - 0)) then
									v2429 = v84[580 - (168 + 410)];
									v82[v2429](v82[v2429 + 1 + 0]);
									break;
								end
							end
						else
							local v2430;
							local v2431;
							v82[v84[2]] = v82[v84[13 - 10]][v84[4]];
							v76 = v76 + (808 - (134 + 673));
							v84 = v72[v76];
							v2431 = v84[2 + 0];
							v2430 = v82[v84[3]];
							v82[v2431 + (1 - 0)] = v2430;
							v82[v2431] = v2430[v84[4]];
							v76 = v76 + (1909 - (1174 + 734));
							v84 = v72[v76];
							v82[v84[2 - 0]] = v84[1 + 2];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v2431 = v84[2];
							v82[v2431] = v82[v2431](v13(v82, v2431 + (2 - 1), v84[10 - 7]));
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							if (v82[v84[2 - 0]] ~= v84[2 + 2]) then
								v76 = v76 + (3 - 2);
							else
								v76 = v84[2 + 1];
							end
						end
					elseif (v85 <= (716 - 531)) then
						if (v85 <= 181) then
							if ((4071 == 4071) and (v85 <= (297 - 118))) then
								if (v85 == 178) then
									local v2443;
									local v2444, v2445;
									local v2446;
									v82[v84[2 - 0]] = v82[v84[1 + 2]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[2]] = v63[v84[3]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[5 - 3]] = v82[v84[3]][v84[516 - (289 + 223)]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[1 + 1]] = v84[2 + 1];
									v76 = v76 + (641 - (514 + 126));
									v84 = v72[v76];
									v82[v84[2]] = v84[2 + 1];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2 - 0]] = v62[v84[2 + 1]];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[2 + 1]][v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v2446 = v84[4 - 2];
									v82[v2446] = v82[v2446](v13(v82, v2446 + 1 + 0, v84[3 + 0]));
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v63[v84[2 + 1]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[611 - (4 + 604)]][v84[4]];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[6 - 4]] = v63[v84[13 - 10]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[3]][v84[1 + 3]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v84[11 - 8];
									v76 = v76 + (1446 - (344 + 1101));
									v84 = v72[v76];
									v2446 = v84[4 - 2];
									v82[v2446] = v82[v2446](v82[v2446 + (1 - 0)]);
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[6 - 4]] = v84[3];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v84[13 - 10];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v2446 = v84[2 + 0];
									v2444, v2445 = v75(v82[v2446](v13(v82, v2446 + (302 - (57 + 244)), v84[3])));
									v77 = (v2445 + v2446) - (1 + 0);
									v2443 = 0 + 0;
									for v3555 = v2446, v77 do
										local v3556 = 0 - 0;
										while true do
											if (0 == v3556) then
												v2443 = v2443 + 1;
												v82[v3555] = v2444[v2443];
												break;
											end
										end
									end
									v76 = v76 + 1;
									v84 = v72[v76];
									v2446 = v84[1965 - (883 + 1080)];
									v82[v2446](v13(v82, v2446 + (201 - (138 + 62)), v77));
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[8 - 6]] = v63[v84[3]];
									v76 = v76 + (84 - (62 + 21));
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[1452 - (1036 + 413)]][v84[7 - 3]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[5 - 3]]();
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[6 - 4]] = v62[v84[4 - 1]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[3 - 1]] = v82[v84[11 - 8]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1474 - (649 + 823)]] = v63[v84[4 - 1]];
									v76 = v76 + (1564 - (1202 + 361));
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[3]][v84[14 - 10]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[1711 - (263 + 1446)]] = v84[3 + 0];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v84[3];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[745 - (387 + 356)]] = v62[v84[3]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[7 - 5]] = v82[v84[2 + 1]][v84[8 - 4]];
									v76 = v76 + (1717 - (646 + 1070));
									v84 = v72[v76];
									v82[v84[1 + 1]] = -v82[v84[3 + 0]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v2446 = v84[2];
									v82[v2446] = v82[v2446](v13(v82, v2446 + 1 + 0, v84[3]));
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[7 - 5]] = v63[v84[1 + 2]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[1100 - (288 + 809)]][v84[1657 - (471 + 1182)]];
									v76 = v76 + (1496 - (385 + 1110));
									v84 = v72[v76];
									v82[v84[1611 - (1201 + 408)]] = v84[3];
									v76 = v76 + (1848 - (747 + 1100));
									v84 = v72[v76];
									v82[v84[2 + 0]] = v84[614 - (269 + 342)];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v84[3];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v2446 = v84[2];
									v2444, v2445 = v75(v82[v2446](v13(v82, v2446 + (2 - 1), v84[349 - (263 + 83)])));
									v77 = (v2445 + v2446) - (1 - 0);
									v2443 = 0 - 0;
									for v3557 = v2446, v77 do
										v2443 = v2443 + 1;
										v82[v3557] = v2444[v2443];
									end
									v76 = v76 + (822 - (659 + 162));
									v84 = v72[v76];
									v2446 = v84[5 - 3];
									v82[v2446](v13(v82, v2446 + (216 - (109 + 106)), v77));
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[1167 - (1157 + 8)]] = v84[514 - (179 + 332)];
								else
									local v2493;
									v82[v84[2]] = v63[v84[840 - (705 + 132)]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[1 + 2]][v84[2 + 2]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[10 - 7]][v84[4 + 0]];
									v76 = v76 + (44 - (17 + 26));
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[1965 - (1866 + 96)]][v84[1 + 3]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[3 - 1]] = v82[v84[6 - 3]][v84[14 - 10]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[1 + 1]] = v63[v84[11 - 8]];
									v76 = v76 + (1132 - (725 + 406));
									v84 = v72[v76];
									v82[v84[4 - 2]] = v82[v84[1 + 2]][v84[379 - (198 + 177)]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[2 - 0]] = v84[2 + 1];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[1 + 1]] = v84[1 + 2];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v84[2 + 1];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v2493 = v84[7 - 5];
									v82[v2493] = v82[v2493](v13(v82, v2493 + (1721 - (1082 + 638)), v84[3]));
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1364 - (1322 + 40)]][v84[3]] = v82[v84[9 - 5]];
									v76 = v76 + (1649 - (435 + 1213));
									v84 = v72[v76];
									do
										return;
									end
								end
							elseif (v85 == (31 + 149)) then
								if ((4705 == 4705) and (v84[990 - (696 + 292)] == v82[v84[8 - 4]])) then
									v76 = v76 + (4 - 3);
								else
									v76 = v84[13 - 10];
								end
							else
								local v2514 = 0 - 0;
								local v2515;
								local v2516;
								while true do
									if ((v2514 == (1466 - (731 + 734))) or (3286 > 3602)) then
										v2515 = v82[v84[1574 - (1286 + 285)]];
										v82[v2516 + (3 - 2)] = v2515;
										v82[v2516] = v2515[v84[2 + 2]];
										v2514 = 5 - 3;
									end
									if (v2514 == 4) then
										v82[v2516] = v82[v2516](v13(v82, v2516 + 1 + 0, v84[9 - 6]));
										v76 = v76 + 1;
										v84 = v72[v76];
										v2514 = 1266 - (1048 + 213);
									end
									if (v2514 == (11 - 5)) then
										v82[v84[1 + 1]] = v84[1 + 2] ~= (0 + 0);
										break;
									end
									if (v2514 == (1357 - (223 + 1134))) then
										v2515 = nil;
										v2516 = nil;
										v2516 = v84[9 - 7];
										v2514 = 1882 - (982 + 899);
									end
									if ((2589 >= 2126) and (v2514 == (3 - 0))) then
										v76 = v76 + 1;
										v84 = v72[v76];
										v2516 = v84[2];
										v2514 = 3 + 1;
									end
									if (v2514 == (2 - 0)) then
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[6 - 4]] = v84[3];
										v2514 = 4 - 1;
									end
									if ((v2514 == (1488 - (310 + 1173))) or (902 > 2647)) then
										v82[v84[1 + 1]] = v82[v84[10 - 7]][v84[1455 - (968 + 483)]];
										v76 = v76 + (225 - (37 + 187));
										v84 = v72[v76];
										v2514 = 1 + 5;
									end
								end
							end
						elseif (v85 <= (280 - 97)) then
							if (v85 > (676 - (204 + 290))) then
								v82[v84[843 - (680 + 161)]] = v63[v84[1 + 2]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[1071 - (979 + 89)]][v84[1878 - (802 + 1072)]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[3 + 0]][v84[3 + 1]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[4 - 2]] = v82[v84[3]][v84[1 + 3]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[3 - 1]] = v82[v84[3]][v84[1998 - (1413 + 581)]];
								v76 = v76 + (1215 - (630 + 584));
								v84 = v72[v76];
								v82[v84[6 - 4]][v84[1131 - (184 + 944)]] = v82[v84[3 + 1]];
								v76 = v76 + 1;
								v84 = v72[v76];
								do
									return;
								end
							else
								local v2530;
								local v2531;
								v2531 = v84[955 - (927 + 26)];
								v2530 = v82[v84[8 - 5]];
								v82[v2531 + (641 - (284 + 356))] = v2530;
								v82[v2531] = v2530[v84[2 + 2]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[2 + 1];
								v76 = v76 + 1;
								v84 = v72[v76];
								v2531 = v84[2 + 0];
								v82[v2531] = v82[v2531](v13(v82, v2531 + 1, v84[1 + 2]));
								v76 = v76 + (1129 - (211 + 917));
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3 + 0]];
								v76 = v76 + (1796 - (1151 + 644));
								v84 = v72[v76];
								v82[v84[1 + 1]] = v63[v84[3]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v2531 = v84[2 - 0];
								v2530 = v82[v84[3]];
								v82[v2531 + (1901 - (745 + 1155))] = v2530;
								v82[v2531] = v2530[v84[11 - 7]];
								v76 = v76 + (315 - (27 + 287));
								v84 = v72[v76];
								v82[v84[2]] = v84[3];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v2531 = v84[4 - 2];
								v82[v2531] = v82[v2531](v13(v82, v2531 + (2 - 1), v84[7 - 4]));
								v76 = v76 + (217 - (148 + 68));
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[3]][v84[3 + 1]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[1 + 2];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v76 = v84[1177 - (1064 + 110)];
							end
						elseif (v85 == (203 - (9 + 10))) then
							local v2554;
							v82[v84[1 + 1]] = v82[v84[3]][v84[1899 - (1219 + 676)]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[1143 - (130 + 1011)]] = v84[1974 - (1639 + 332)];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v2554 = v84[1 + 1];
							v82[v2554](v82[v2554 + 1]);
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[250 - (229 + 19)]] = v62[v84[126 - (21 + 102)]];
							v76 = v76 + (1186 - (931 + 254));
							v84 = v72[v76];
							v82[v84[2]] = v62[v84[1 + 2]];
							v76 = v76 + (446 - (428 + 17));
							v84 = v72[v76];
							v2554 = v84[2];
							v82[v2554](v82[v2554 + (2 - 1)]);
							v76 = v76 + (89 - (26 + 62));
							v84 = v72[v76];
							v76 = v84[1083 - (173 + 907)];
						else
							local v2567 = 0;
							local v2568;
							local v2569;
							local v2570;
							while true do
								if (v2567 == (4 + 0)) then
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[133 - (71 + 60)]] = v82[v84[7 - 4]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v2567 = 5;
								end
								if (v2567 == 3) then
									v82[v2570 + 1] = v2569;
									v82[v2570] = v2569[v84[4]];
									v76 = v76 + (1229 - (774 + 454));
									v84 = v72[v76];
									v82[v84[1604 - (849 + 753)]] = v84[7 - 4];
									v2567 = 8 - 4;
								end
								if (v2567 == (1216 - (861 + 355))) then
									v2568 = nil;
									v2569 = nil;
									v2570 = nil;
									v2570 = v84[2 - 0];
									v2569 = v82[v84[1 + 2]];
									v2567 = 2 - 1;
								end
								if ((v2567 == (2 + 4)) or (2628 == 4281)) then
									v84 = v72[v76];
									v2570 = v84[4 - 2];
									v82[v2570] = v82[v2570](v13(v82, v2570 + 1, v84[3]));
									v76 = v76 + 1;
									v84 = v72[v76];
									v2567 = 7;
								end
								if (v2567 == (1148 - (455 + 688))) then
									v2569 = v84[1347 - (481 + 863)];
									v2568 = v82[v2569];
									for v5693 = v2569 + 1 + 0, v84[4] do
										v2568 = v2568 .. v82[v5693];
									end
									v82[v84[1 + 1]] = v2568;
									v76 = v76 + 1;
									v2567 = 17 - 11;
								end
								if ((1970 - (896 + 1072)) == v2567) then
									v82[v2570] = v82[v2570](v82[v2570 + 1]);
									v76 = v76 + 1;
									v84 = v72[v76];
									v2570 = v84[2];
									v2569 = v82[v84[7 - 4]];
									v2567 = 2 + 1;
								end
								if (1 == v2567) then
									v82[v2570 + 1] = v2569;
									v82[v2570] = v2569[v84[9 - 5]];
									v76 = v76 + (789 - (50 + 738));
									v84 = v72[v76];
									v2570 = v84[2 + 0];
									v2567 = 5 - 3;
								end
								if (v2567 == (15 - 8)) then
									if v82[v84[2]] then
										v76 = v76 + (1554 - (1128 + 425));
									else
										v76 = v84[3];
									end
									break;
								end
							end
						end
					elseif (v85 <= (1 + 188)) then
						if (v85 <= 187) then
							if (v85 == (642 - (398 + 58))) then
								if not v82[v84[2]] then
									v76 = v76 + (713 - (194 + 518));
								else
									v76 = v84[378 - (42 + 333)];
								end
							else
								local v2571 = 1444 - (1308 + 136);
								local v2572;
								while true do
									if (v2571 == (0 + 0)) then
										v2572 = nil;
										v82[v84[122 - (56 + 64)]] = v82[v84[699 - (251 + 445)]][v84[2 + 2]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v2571 = 1;
									end
									if ((v2571 == (3 + 0)) or (58 == 4230)) then
										v76 = v76 + (1570 - (999 + 570));
										v84 = v72[v76];
										v82[v84[2 - 0]][v84[6 - 3]] = v84[7 - 3];
										v76 = v76 + 1;
										v2571 = 1703 - (1476 + 223);
									end
									if (v2571 == (1838 - (597 + 1239))) then
										v82[v2572] = v82[v2572](v82[v2572 + (3 - 2)]);
										v76 = v76 + 1;
										v84 = v72[v76];
										v82[v84[2 + 0]] = v82[v84[887 - (590 + 294)]];
										v2571 = 6 - 3;
									end
									if (v2571 == (790 - (433 + 356))) then
										v82[v84[1 + 1]] = v84[4 - 1];
										v76 = v76 + (1257 - (791 + 465));
										v84 = v72[v76];
										v2572 = v84[1116 - (1048 + 66)];
										v2571 = 1 + 1;
									end
									if ((v2571 == (16 - 12)) or (124 >= 1539)) then
										v84 = v72[v76];
										v82[v84[1999 - (666 + 1331)]] = v84[3];
										break;
									end
								end
							end
						elseif (v85 == (2088 - (854 + 1046))) then
							local v2573;
							local v2574;
							for v3560 = v84[5 - 3], v84[3 + 0] do
								v82[v3560] = nil;
							end
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v2574 = v84[2 + 0];
							v2573 = v82[v84[99 - (61 + 35)]];
							v82[v2574 + (4 - 3)] = v2573;
							v82[v2574] = v2573[v84[1 + 3]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2]] = v84[1821 - (1591 + 227)];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v2574 = v84[793 - (173 + 618)];
							v82[v2574] = v82[v2574](v13(v82, v2574 + (1324 - (588 + 735)), v84[3]));
							v76 = v76 + 1;
							v84 = v72[v76];
							if v82[v84[2]] then
								v76 = v76 + (581 - (170 + 410));
							else
								v76 = v84[3 + 0];
							end
						else
							local v2584;
							v82[v84[2 + 0]] = v82[v84[7 - 4]][v84[2 + 2]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2]] = v82[v84[3 + 0]];
							v76 = v76 + (553 - (362 + 190));
							v84 = v72[v76];
							v2584 = v84[850 - (529 + 319)];
							v82[v2584] = v82[v2584](v82[v2584 + 1 + 0]);
							v76 = v76 + (3 - 2);
							v84 = v72[v76];
							v82[v84[2 + 0]] = v82[v84[3 + 0]];
							v76 = v76 + (1201 - (829 + 371));
							v84 = v72[v76];
							v2584 = v84[3 - 1];
							v82[v2584](v82[v2584 + 1 + 0]);
						end
					elseif (v85 <= 191) then
						if ((v85 == (1866 - (700 + 976))) or (2212 >= 3947)) then
							local v2593;
							local v2594, v2595;
							local v2596;
							local v2597;
							v82[v84[4 - 2]] = v63[v84[4 - 1]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2 + 0]] = v63[v84[1644 - (1137 + 504)]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v2597 = v84[2];
							v2596 = v82[v84[10 - 7]];
							v82[v2597 + (2 - 1)] = v2596;
							v82[v2597] = v2596[v84[5 - 1]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2 + 0]] = v84[1617 - (327 + 1287)];
							v76 = v76 + 1;
							v84 = v72[v76];
							v2597 = v84[3 - 1];
							v2594, v2595 = v75(v82[v2597](v13(v82, v2597 + (1 - 0), v84[2 + 1])));
							v77 = (v2595 + v2597) - (2 - 1);
							v2593 = 1113 - (224 + 889);
							for v3562 = v2597, v77 do
								local v3563 = 1220 - (574 + 646);
								while true do
									if ((v3563 == (607 - (83 + 524))) or (836 >= 1899)) then
										v2593 = v2593 + (769 - (577 + 191));
										v82[v3562] = v2594[v2593];
										break;
									end
								end
							end
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v2597 = v84[2 + 0];
							v82[v2597] = v82[v2597](v13(v82, v2597 + (800 - (248 + 551)), v77));
							v76 = v76 + (78 - (53 + 24));
							v84 = v72[v76];
							v2597 = v84[135 - (12 + 121)];
							v82[v2597] = v82[v2597]();
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v2597 = v84[3 - 1];
							v2596 = v82[v84[609 - (164 + 442)]];
							v82[v2597 + 1 + 0] = v2596;
							v82[v2597] = v2596[v84[4]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2]] = v84[8 - 5];
						elseif (v82[v84[4 - 2]] > v84[3 + 1]) then
							v76 = v76 + 1 + 0;
						else
							v76 = v84[6 - 3];
						end
					elseif ((779 < 1570) and (v85 <= 192)) then
						local v2617 = v84[2 + 0];
						local v2618, v2619 = v75(v82[v2617](v82[v2617 + (1248 - (585 + 662))]));
						v77 = (v2619 + v2617) - 1;
						local v2620 = 0;
						for v3564 = v2617, v77 do
							v2620 = v2620 + 1 + 0;
							v82[v3564] = v2618[v2620];
						end
					elseif (v85 > (3 + 190)) then
						local v3686 = 0;
						local v3687;
						local v3688;
						local v3689;
						local v3690;
						while true do
							if ((v3686 == (590 - (126 + 454))) or (906 == 3195)) then
								v84 = v72[v76];
								v82[v84[416 - (366 + 48)]] = v84[1686 - (1633 + 50)];
								v76 = v76 + (1102 - (892 + 209));
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[6 - 3];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[662 - (495 + 165)]] = v84[8 - 5];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v3686 = 11;
							end
							if (v3686 == (5 + 8)) then
								v76 = v84[3];
								break;
							end
							if (v3686 == (9 - 4)) then
								v3690 = v84[2 + 0];
								v3688, v3689 = v75(v82[v3690](v13(v82, v3690 + 1 + 0, v84[3])));
								v77 = (v3689 + v3690) - 1;
								v3687 = 582 - (431 + 151);
								for v5926 = v3690, v77 do
									local v5927 = 0 - 0;
									while true do
										if (v5927 == (15 - (10 + 5))) then
											v3687 = v3687 + (423 - (403 + 19));
											v82[v5926] = v3688[v3687];
											break;
										end
									end
								end
								v76 = v76 + (1772 - (454 + 1317));
								v84 = v72[v76];
								v3690 = v84[1 + 1];
								v82[v3690](v13(v82, v3690 + (1815 - (187 + 1627)), v77));
								v76 = v76 + 1 + 0;
								v3686 = 1958 - (832 + 1120);
							end
							if (v3686 == (26 - 17)) then
								v84 = v72[v76];
								v3690 = v84[1 + 1];
								v82[v3690] = v82[v3690](v13(v82, v3690 + (1097 - (1001 + 95)), v84[3]));
								v76 = v76 + (30 - (4 + 25));
								v84 = v72[v76];
								v82[v84[1163 - (904 + 257)]] = v63[v84[7 - 4]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3 - 0]][v84[4]];
								v76 = v76 + (2 - 1);
								v3686 = 10;
							end
							if (v3686 == (0 - 0)) then
								v3687 = nil;
								v3688, v3689 = nil;
								v3690 = nil;
								v82[v84[2]] = v82[v84[3]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 - 0]] = v63[v84[1792 - (735 + 1054)]];
								v76 = v76 + (1694 - (418 + 1275));
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[8 - 5]][v84[15 - 11]];
								v3686 = 1473 - (784 + 688);
							end
							if (v3686 == 7) then
								v82[v84[2]] = v62[v84[10 - 7]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[1251 - (374 + 875)]] = v82[v84[6 - 3]];
								v76 = v76 + (981 - (304 + 676));
								v84 = v72[v76];
								v82[v84[1 + 1]] = v63[v84[3]];
								v76 = v76 + (1359 - (517 + 841));
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[869 - (356 + 510)]][v84[6 - 2]];
								v3686 = 18 - 10;
							end
							if (v3686 == (1220 - (306 + 903))) then
								v3690 = v84[1105 - (70 + 1033)];
								v3688, v3689 = v75(v82[v3690](v13(v82, v3690 + 1, v84[3])));
								v77 = (v3689 + v3690) - (4 - 3);
								v3687 = 0 + 0;
								for v5928 = v3690, v77 do
									v3687 = v3687 + 1 + 0;
									v82[v5928] = v3688[v3687];
								end
								v76 = v76 + 1;
								v84 = v72[v76];
								v3690 = v84[1 + 1];
								v82[v3690](v13(v82, v3690 + (805 - (523 + 281)), v77));
								v76 = v76 + (923 - (241 + 681));
								v3686 = 1110 - (358 + 740);
							end
							if ((4514 > 2107) and (v3686 == (3 + 1))) then
								v3690 = v84[7 - 5];
								v82[v3690] = v82[v3690](v82[v3690 + 1]);
								v76 = v76 + (1042 - (1005 + 36));
								v84 = v72[v76];
								v82[v84[2]] = v84[3];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[704 - (533 + 169)]] = v84[1 + 2];
								v76 = v76 + 1;
								v84 = v72[v76];
								v3686 = 3 + 2;
							end
							if (v3686 == (2 + 10)) then
								v84 = v72[v76];
								v82[v84[1527 - (817 + 708)]] = v63[v84[6 - 3]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[1701 - (636 + 1062)]][v84[15 - 11]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[2]]();
								v76 = v76 + (1659 - (1130 + 528));
								v84 = v72[v76];
								v3686 = 43 - 30;
							end
							if (v3686 == (3 + 0)) then
								v84 = v72[v76];
								v82[v84[2]] = v63[v84[146 - (115 + 28)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1383 - (1076 + 305)]] = v82[v84[1772 - (1198 + 571)]][v84[1521 - (629 + 888)]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[4 - 2]] = v84[2 + 1];
								v76 = v76 + 1;
								v84 = v72[v76];
								v3686 = 5 - 1;
							end
							if ((v3686 == (3 + 5)) or (3938 >= 4487)) then
								v76 = v76 + (170 - (113 + 56));
								v84 = v72[v76];
								v82[v84[2]] = v84[3];
								v76 = v76 + (1254 - (521 + 732));
								v84 = v72[v76];
								v82[v84[2 - 0]] = v84[1541 - (99 + 1439)];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[6 - 4]] = v84[11 - 8];
								v76 = v76 + (409 - (39 + 369));
								v3686 = 1968 - (870 + 1089);
							end
							if (v3686 == (797 - (564 + 231))) then
								v84 = v72[v76];
								v3690 = v84[1923 - (1893 + 28)];
								v82[v3690] = v82[v3690](v13(v82, v3690 + 1 + 0, v84[529 - (140 + 386)]));
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v63[v84[3]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[1919 - (485 + 1431)]][v84[4]];
								v76 = v76 + (2 - 1);
								v3686 = 4 - 1;
							end
							if (v3686 == (1 + 0)) then
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[11 - 8];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v84[1184 - (945 + 236)];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[1 + 1]] = v84[6 - 3];
								v76 = v76 + (2 - 1);
								v3686 = 1 + 1;
							end
							if (v3686 == (519 - (383 + 130))) then
								v84 = v72[v76];
								v82[v84[905 - (643 + 260)]] = v63[v84[3]];
								v76 = v76 + (1448 - (109 + 1338));
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[13 - 10]][v84[748 - (338 + 406)]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[477 - (20 + 455)]]();
								v76 = v76 + 1;
								v84 = v72[v76];
								v3686 = 28 - 21;
							end
						end
					else
						local v3691;
						local v3692;
						local v3693;
						local v3694;
						local v3695;
						local v3696;
						v82[v84[2 - 0]] = v63[v84[78 - (39 + 36)]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v3696 = v84[2 + 0];
						v82[v3696] = v82[v3696]();
						v76 = v76 + (1707 - (609 + 1097));
						v84 = v72[v76];
						v82[v84[2]] = v82[v84[3]][v84[4]];
						v76 = v76 + (659 - (543 + 115));
						v84 = v72[v76];
						v82[v84[2]][v84[3]] = v82[v84[4]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v3696 = v84[3 - 1];
						v3695 = {};
						for v5248 = 1 - 0, #v81 do
							local v5249 = 0 - 0;
							while true do
								if ((1608 - (1559 + 49)) == v5249) then
									v3694 = v81[v5248];
									for v5952 = 0, #v3694 do
										local v5953 = 622 - (317 + 305);
										while true do
											if (v5953 == (0 - 0)) then
												v3693 = v3694[v5952];
												v3692 = v3693[4 - 3];
												v5953 = 828 - (509 + 318);
											end
											if ((v5953 == (1818 - (384 + 1433))) or (236 == 1130)) then
												v3691 = v3693[2];
												if ((4042 == 4042) and (v3692 == v82) and (v3691 >= v3696)) then
													local v5978 = 0 + 0;
													while true do
														if (v5978 == (0 - 0)) then
															v3695[v3691] = v3692[v3691];
															v3693[1 + 0] = v3695;
															break;
														end
													end
												end
												break;
											end
										end
									end
									break;
								end
							end
						end
						v76 = v76 + (4 - 3);
						v84 = v72[v76];
						v76 = v84[1537 - (198 + 1336)];
					end
				elseif (v85 <= (27 + 200)) then
					if (v85 <= 210) then
						if (v85 <= (1607 - (1149 + 256))) then
							if ((v85 <= (444 - 246)) or (4431 <= 872)) then
								if ((2698 > 571) and (v85 <= (246 - 50))) then
									if ((v85 > (1961 - (1280 + 486))) or (1911 >= 2821)) then
										v82[v84[2]] = v84[5 - 2] ~= (0 - 0);
									else
										local v2622;
										v82[v84[2 + 0]] = v82[v84[1611 - (786 + 822)]][v84[10 - 6]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[2 + 0]] = #v82[v84[3]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v2622 = v84[1462 - (1303 + 157)];
										v82[v2622] = v82[v2622](v82[v2622 + 1 + 0]);
										v76 = v76 + (1416 - (505 + 910));
										v84 = v72[v76];
										v82[v84[5 - 3]] = v82[v84[871 - (548 + 320)]][v82[v84[4]]];
										v76 = v76 + (592 - (52 + 539));
										v84 = v72[v76];
										do
											return v82[v84[2]];
										end
										v76 = v76 + (556 - (378 + 177));
										v84 = v72[v76];
										v76 = v84[8 - 5];
									end
								elseif (v85 > 197) then
									local v2631 = 0 - 0;
									local v2632;
									local v2633;
									local v2634;
									local v2635;
									local v2636;
									while true do
										if ((2082 <= 3592) and ((0 + 0) == v2631)) then
											v2632 = nil;
											v2633 = nil;
											v2632, v2634 = nil;
											v2635 = nil;
											v2636 = nil;
											v82[v84[209 - (108 + 99)]] = v63[v84[2 + 1]];
											v2631 = 1 - 0;
										end
										if (v2631 == (21 - 16)) then
											v76 = v84[3 + 0];
											break;
										end
										if (v2631 == (1 - 0)) then
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v82[v84[2]] = v82[v84[3 + 0]][v84[3 + 1]];
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v2636 = v84[3 - 1];
											v2631 = 1 + 1;
										end
										if ((v2631 == 4) or (4923 < 54)) then
											v2636 = v84[3 - 1];
											v2632 = {v82[v2636](v13(v82, v2636 + (4 - 3), v77))};
											v2633 = 0 + 0;
											for v5696 = v2636, v84[843 - (823 + 16)] do
												v2633 = v2633 + 1;
												v82[v5696] = v2632[v2633];
											end
											v76 = v76 + 1;
											v84 = v72[v76];
											v2631 = 283 - (19 + 259);
										end
										if (v2631 == (1822 - (1780 + 40))) then
											v2635 = v82[v84[6 - 3]];
											v82[v2636 + (2 - 1)] = v2635;
											v82[v2636] = v2635[v84[6 - 2]];
											v76 = v76 + (1 - 0);
											v84 = v72[v76];
											v2636 = v84[1 + 1];
											v2631 = 3;
										end
										if ((35 <= 2099) and ((12 - 9) == v2631)) then
											v2632, v2634 = v75(v82[v2636](v82[v2636 + 1 + 0]));
											v77 = (v2634 + v2636) - 1;
											v2633 = 0 - 0;
											for v5699 = v2636, v77 do
												local v5700 = 0 + 0;
												while true do
													if ((57 == 57) and (v5700 == (0 - 0))) then
														v2633 = v2633 + (2 - 1);
														v82[v5699] = v2632[v2633];
														break;
													end
												end
											end
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v2631 = 1184 - (825 + 355);
										end
									end
								else
									v82[v84[862 - (846 + 14)]] = v63[v84[3 + 0]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[372 - (237 + 133)]] = v82[v84[1189 - (624 + 562)]][v84[11 - 7]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[805 - (700 + 102)]][v84[4]];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[3 - 1]] = v82[v84[3]][v84[10 - 6]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2 - 0]] = v82[v84[7 - 4]][v84[1 + 3]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1278 - (735 + 541)]][v84[843 - (497 + 343)]] = v82[v84[1787 - (995 + 788)]];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									do
										return;
									end
								end
							elseif (v85 <= (23 + 177)) then
								if (v85 > (309 - 110)) then
									local v2650 = v84[4 - 2];
									local v2651 = {v82[v2650](v13(v82, v2650 + 1, v77))};
									local v2652 = 0;
									for v3567 = v2650, v84[7 - 3] do
										v2652 = v2652 + (2 - 1);
										v82[v3567] = v2651[v2652];
									end
								else
									local v2653;
									local v2654, v2655;
									local v2656;
									v82[v84[2]] = v82[v84[3]][v84[4 + 0]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]]();
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[4 - 2]] = v62[v84[1275 - (357 + 915)]];
									v76 = v76 + (676 - (50 + 625));
									v84 = v72[v76];
									v82[v84[1882 - (1624 + 256)]] = v82[v84[6 - 3]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v63[v84[3 - 0]];
									v76 = v76 + (1524 - (180 + 1343));
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[1345 - (1057 + 285)]][v84[1 + 3]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[1405 - (135 + 1268)]] = v84[1424 - (1088 + 333)];
									v76 = v76 + (1683 - (1280 + 402));
									v84 = v72[v76];
									v82[v84[2]] = v84[4 - 1];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v84[1 + 2];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v2656 = v84[1 + 1];
									v82[v2656] = v82[v2656](v13(v82, v2656 + (18 - (11 + 6)), v84[3 + 0]));
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2]] = v63[v84[11 - 8]];
									v76 = v76 + (1737 - (1015 + 721));
									v84 = v72[v76];
									v82[v84[5 - 3]] = v82[v84[245 - (169 + 73)]][v84[5 - 1]];
									v76 = v76 + (1897 - (1052 + 844));
									v84 = v72[v76];
									v82[v84[6 - 4]] = v63[v84[19 - (5 + 11)]];
									v76 = v76 + (1516 - (210 + 1305));
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[2 + 1]][v84[6 - 2]];
									v76 = v76 + (748 - (646 + 101));
									v84 = v72[v76];
									v82[v84[378 - (12 + 364)]] = v84[718 - (587 + 128)];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v2656 = v84[2];
									v82[v2656] = v82[v2656](v82[v2656 + (2 - 1)]);
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[229 - (196 + 31)]] = v84[2 + 1];
									v76 = v76 + (538 - (227 + 310));
									v84 = v72[v76];
									v82[v84[2]] = v84[3];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v2656 = v84[775 - (689 + 84)];
									v2654, v2655 = v75(v82[v2656](v13(v82, v2656 + 1, v84[3])));
									v77 = (v2655 + v2656) - 1;
									v2653 = 1375 - (404 + 971);
									for v3570 = v2656, v77 do
										local v3571 = 0;
										while true do
											if ((0 - 0) == v3571) then
												v2653 = v2653 + 1 + 0;
												v82[v3570] = v2654[v2653];
												break;
											end
										end
									end
									v76 = v76 + (1398 - (764 + 633));
									v84 = v72[v76];
									v2656 = v84[2 + 0];
									v82[v2656](v13(v82, v2656 + 1 + 0, v77));
									v76 = v76 + (207 - (114 + 92));
									v84 = v72[v76];
									v82[v84[2 + 0]] = v63[v84[532 - (4 + 525)]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[3]][v84[6 - 2]];
									v76 = v76 + (1314 - (636 + 677));
									v84 = v72[v76];
									v82[v84[2]]();
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[6 - 4]] = v84[1357 - (447 + 907)];
									v76 = v76 + 1;
									v84 = v72[v76];
									v76 = v84[1801 - (303 + 1495)];
								end
							elseif (v85 > (521 - 320)) then
								v82[v84[5 - 3]] = v82[v84[6 - 3]][v84[1820 - (1446 + 370)]];
								v76 = v76 + (552 - (245 + 306));
								v84 = v72[v76];
								v82[v84[2 + 0]] = v62[v84[3 + 0]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[1 + 2]][v84[1477 - (536 + 937)]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[2]][v84[155 - (143 + 9)]] = v82[v84[7 - 3]];
								v76 = v76 + (1075 - (474 + 600));
								v84 = v72[v76];
								v82[v84[5 - 3]] = v62[v84[9 - 6]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[8 - 5]][v84[4]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v62[v84[3 + 0]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]][v84[1 + 3]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]][v84[3]] = v82[v84[4]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v76 = v84[1491 - (49 + 1439)];
							else
								local v2707;
								v82[v84[2]] = v82[v84[1 + 2]][v84[15 - 11]];
								v76 = v76 + (1991 - (769 + 1221));
								v84 = v72[v76];
								v82[v84[2]] = v62[v84[1 + 2]];
								v76 = v76 + (1073 - (270 + 802));
								v84 = v72[v76];
								v2707 = v84[1858 - (301 + 1555)];
								v82[v2707] = v82[v2707](v82[v2707 + 1 + 0]);
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[78 - (22 + 53)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v2707 = v84[9 - 7];
								v82[v2707](v82[v2707 + (2 - 1)]);
							end
						elseif (v85 <= 206) then
							if (v85 <= (6 + 198)) then
								if ((4622 >= 2571) and (v85 == (520 - 317))) then
									v82[v84[2 + 0]] = v63[v84[3 + 0]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[95 - (41 + 51)]][v84[4]];
									v76 = v76 + (604 - (391 + 212));
									v84 = v72[v76];
									v82[v84[3 - 1]] = v82[v84[2 + 1]][v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[6 - 3]][v84[6 - 2]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[3 - 1]] = v82[v84[7 - 4]][v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[7 - 5]][v84[3]] = v84[3 + 1];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									do
										return;
									end
								else
									v82[v84[2 + 0]] = v63[v84[379 - (155 + 221)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[1460 - (366 + 1091)]][v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[288 - (90 + 196)]] = v82[v84[1777 - (1710 + 64)]][v84[4]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[3]][v84[19 - 15]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[6 - 4]] = v82[v84[4 - 1]][v84[5 - 1]];
									v76 = v76 + (268 - (72 + 195));
									v84 = v72[v76];
									v82[v84[2 + 0]][v84[3]] = v82[v84[4]];
									v76 = v76 + (1179 - (28 + 1150));
									v84 = v72[v76];
									do
										return;
									end
								end
							elseif (v85 > (58 + 147)) then
								if (v82[v84[2]] ~= v84[602 - (102 + 496)]) then
									v76 = v76 + (445 - (181 + 263));
								else
									v76 = v84[2 + 1];
								end
							else
								local v2741;
								local v2742, v2743;
								local v2744;
								v82[v84[2]] = v82[v84[2 + 1]][v84[14 - 10]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1510 - (822 + 686)]]();
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[4 - 2]] = v62[v84[2 + 1]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[863 - (252 + 609)]] = v82[v84[3]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v63[v84[2 + 1]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]][v84[962 - (578 + 380)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1718 - (1431 + 285)]] = v84[2 + 1];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[3 - 1]] = v84[4 - 1];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[3 - 1]] = v84[4 - 1];
								v76 = v76 + 1;
								v84 = v72[v76];
								v2744 = v84[1114 - (1013 + 99)];
								v82[v2744] = v82[v2744](v13(v82, v2744 + 1, v84[6 - 3]));
								v76 = v76 + (958 - (449 + 508));
								v84 = v72[v76];
								v82[v84[2 - 0]] = v62[v84[1895 - (1562 + 330)]];
								v76 = v76 + (1973 - (1870 + 102));
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]][v84[2 + 2]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[3 - 0]][v84[4]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[3 - 1]] = v82[v84[3 + 0]][v84[4]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[1 + 2]] * v82[v84[4]];
								v76 = v76 + (995 - (550 + 444));
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[1 + 2]] / v84[6 - 2];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[3]] + v82[v84[2 + 2]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 - 0]] = v63[v84[583 - (544 + 36)]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1233 - (70 + 1161)]] = v82[v84[2 + 1]][v84[761 - (130 + 627)]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[313 - (121 + 190)]] = v63[v84[3]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[7 - 5]] = v82[v84[3 + 0]][v84[16 - 12]];
								v76 = v76 + (323 - (255 + 67));
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v2744 = v84[4 - 2];
								v82[v2744] = v82[v2744](v82[v2744 + (279 - (225 + 53))]);
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[1301 - (738 + 561)]] = v84[10 - 7];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[1614 - (1450 + 161)];
								v76 = v76 + (1729 - (183 + 1545));
								v84 = v72[v76];
								v2744 = v84[1 + 1];
								v2742, v2743 = v75(v82[v2744](v13(v82, v2744 + (1171 - (736 + 434)), v84[3 + 0])));
								v77 = (v2743 + v2744) - 1;
								v2741 = 0 - 0;
								for v3572 = v2744, v77 do
									local v3573 = 39 - (32 + 7);
									while true do
										if (v3573 == (0 - 0)) then
											v2741 = v2741 + (374 - (103 + 270));
											v82[v3572] = v2742[v2741];
											break;
										end
									end
								end
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v2744 = v84[2 + 0];
								v82[v2744](v13(v82, v2744 + (1454 - (1021 + 432)), v77));
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[1416 - (153 + 1261)]] = v63[v84[1 + 2]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[890 - (800 + 88)]] = v82[v84[3]][v84[1 + 3]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[823 - (358 + 463)]]();
								v76 = v76 + (259 - (176 + 82));
								v84 = v72[v76];
								v82[v84[4 - 2]] = v62[v84[773 - (543 + 227)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[11 - 8]];
								v76 = v76 + (1787 - (1509 + 277));
								v84 = v72[v76];
								v82[v84[1962 - (1453 + 507)]] = v63[v84[1 + 2]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[7 - 5]] = v82[v84[1 + 2]][v84[1 + 3]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[1033 - (22 + 1009)]] = v84[14 - 11];
								v76 = v76 + (1941 - (245 + 1695));
								v84 = v72[v76];
								v82[v84[1037 - (611 + 424)]] = v84[301 - (280 + 18)];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v84[3 + 0];
								v76 = v76 + 1;
								v84 = v72[v76];
								v2744 = v84[3 - 1];
								v82[v2744] = v82[v2744](v13(v82, v2744 + (2 - 1), v84[3]));
								v76 = v76 + (279 - (109 + 169));
								v84 = v72[v76];
								v82[v84[1 + 1]] = v62[v84[2 + 1]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[3]][v84[1 + 3]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[4 - 2]] = v82[v84[1345 - (875 + 467)]][v84[2 + 2]];
								v76 = v76 + (4 - 3);
								v84 = v72[v76];
								v82[v84[5 - 3]] = v82[v84[9 - 6]][v84[803 - (717 + 82)]];
								v76 = v76 + (1021 - (693 + 327));
								v84 = v72[v76];
								v82[v84[1913 - (746 + 1165)]] = v82[v84[3]] * v82[v84[1739 - (1473 + 262)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[1 + 2]] / v84[1877 - (874 + 999)];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[7 - 4]] + v82[v84[4 + 0]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v63[v84[3]];
								v76 = v76 + (4 - 3);
								v84 = v72[v76];
								v82[v84[3 - 1]] = v82[v84[3 + 0]][v84[4]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v63[v84[2 + 1]];
								v76 = v76 + (459 - (388 + 70));
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[3 + 0]][v84[4]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[9 - 6]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v2744 = v84[1 + 1];
								v82[v2744] = v82[v2744](v82[v2744 + (583 - (319 + 263))]);
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[3 - 1]] = v84[3 + 0];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[817 - (94 + 720)];
								v76 = v76 + (379 - (78 + 300));
								v84 = v72[v76];
								v2744 = v84[1919 - (774 + 1143)];
								v2742, v2743 = v75(v82[v2744](v13(v82, v2744 + 1, v84[2 + 1])));
								v77 = (v2743 + v2744) - (192 - (18 + 173));
								v2741 = 0;
								for v3574 = v2744, v77 do
									local v3575 = 0 - 0;
									while true do
										if (v3575 == (0 - 0)) then
											v2741 = v2741 + 1;
											v82[v3574] = v2742[v2741];
											break;
										end
									end
								end
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v2744 = v84[9 - 7];
								v82[v2744](v13(v82, v2744 + (1486 - (677 + 808)), v77));
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[972 - (528 + 442)]] = v84[8 - 5];
								v76 = v76 + 1;
								v84 = v72[v76];
								v76 = v84[3];
							end
						elseif ((v85 <= (555 - (116 + 231))) or (463 < 137)) then
							if ((1657 > 904) and (v85 > (203 + 4))) then
								local v2805;
								local v2806;
								local v2807;
								local v2808;
								v82[v84[2 + 0]] = v82[v84[3]][v84[4]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v2808 = v84[2];
								v2807 = v82[v84[3]];
								v82[v2808 + 1 + 0] = v2807;
								v82[v2808] = v2807[v84[1474 - (1242 + 228)]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[846 - (320 + 524)]] = v82[v84[6 - 3]][v84[4]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[9 - 7]] = v82[v84[1 + 2]][v84[11 - 7]];
								v76 = v76 + (476 - (63 + 412));
								v84 = v72[v76];
								v2808 = v84[2];
								v82[v2808] = v82[v2808](v13(v82, v2808 + (1865 - (1299 + 565)), v84[3]));
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[5 - 3]] = v82[v84[1 + 2]];
								v76 = v76 + (4 - 3);
								v84 = v72[v76];
								v82[v84[1 + 1]] = v84[3 + 0];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v84[10 - 7];
								v76 = v76 + (329 - (79 + 249));
								v84 = v72[v76];
								v82[v84[5 - 3]] = v84[3];
								v76 = v76 + 1;
								v84 = v72[v76];
								v2808 = v84[1632 - (305 + 1325)];
								v2806 = v82[v2808];
								v2805 = v82[v2808 + (1730 - (1585 + 143))];
								if (v2805 > (0 - 0)) then
									if (v2806 > v82[v2808 + (1831 - (1727 + 103))]) then
										v76 = v84[3];
									else
										v82[v2808 + 3] = v2806;
									end
								elseif (v2806 < v82[v2808 + (3 - 2)]) then
									v76 = v84[3 + 0];
								else
									v82[v2808 + 2 + 1] = v2806;
								end
							else
								local v2830 = v84[6 - 4];
								local v2831 = v82[v2830 + (276 - (135 + 139))];
								local v2832 = v82[v2830] + v2831;
								v82[v2830] = v2832;
								if ((v2831 > (0 + 0)) or (1561 >= 2957)) then
									if ((1528 < 1737) and (v2832 <= v82[v2830 + (1 - 0)])) then
										v76 = v84[3 + 0];
										v82[v2830 + 2 + 1] = v2832;
									end
								elseif (v2832 >= v82[v2830 + 1 + 0]) then
									v76 = v84[3];
									v82[v2830 + 2 + 1] = v2832;
								end
							end
						elseif ((v85 == (647 - 438)) or (972 < 873)) then
							local v2834 = 1704 - (1084 + 620);
							local v2835;
							local v2836;
							local v2837;
							local v2838;
							while true do
								if (v2834 == (1055 - (404 + 649))) then
									v76 = v76 + (815 - (318 + 496));
									v84 = v72[v76];
									v82[v84[1884 - (1730 + 152)]] = v82[v84[3]][v84[4]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[6 - 4]] = v84[1864 - (527 + 1334)];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v2834 = 3;
								end
								if (v2834 == 3) then
									v82[v84[2]] = v84[1949 - (464 + 1482)];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[2]] = v84[1 + 2];
									v76 = v76 + (570 - (485 + 84));
									v84 = v72[v76];
									v2838 = v84[1 + 1];
									v82[v2838] = v82[v2838](v13(v82, v2838 + 1 + 0, v84[3]));
									v2834 = 2 + 2;
								end
								if (v2834 == 17) then
									v84 = v72[v76];
									v2838 = v84[2 + 0];
									v82[v2838] = v82[v2838](v82[v2838 + 1 + 0]);
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v84[7 - 4];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v2834 = 50 - 32;
								end
								if (v2834 == (1015 - (359 + 642))) then
									v84 = v72[v76];
									v82[v84[1 + 1]] = v62[v84[2 + 1]];
									v76 = v76 + (1345 - (564 + 780));
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[3]][v84[14 - 10]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[5 - 2]] + v82[v84[5 - 1]];
									v2834 = 36 - 21;
								end
								if (v2834 == (1 + 0)) then
									v84 = v72[v76];
									v82[v84[1428 - (909 + 517)]] = v62[v84[462 - (432 + 27)]];
									v76 = v76 + (1737 - (69 + 1667));
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[125 - (16 + 106)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1254 - (1178 + 74)]] = v63[v84[3]];
									v2834 = 1 + 1;
								end
								if (13 == v2834) then
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[449 - (312 + 135)]] = v84[2 + 1];
									v76 = v76 + 1;
									v84 = v72[v76];
									v2838 = v84[2];
									v82[v2838] = v82[v2838](v13(v82, v2838 + 1 + 0, v84[3]));
									v76 = v76 + 1;
									v2834 = 48 - 34;
								end
								if (v2834 == (22 - 13)) then
									for v5715 = v2838, v77 do
										local v5716 = 1829 - (492 + 1337);
										while true do
											if ((v5716 == (0 + 0)) or (2026 < 290)) then
												v2835 = v2835 + 1;
												v82[v5715] = v2836[v2835];
												break;
											end
										end
									end
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v2838 = v84[2];
									v82[v2838](v13(v82, v2838 + (1391 - (814 + 576)), v77));
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[3 - 1]] = v63[v84[7 - 4]];
									v2834 = 9 + 1;
								end
								if (v2834 == (11 - 7)) then
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[1 + 1]] = v62[v84[1 + 2]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[2 + 1]][v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v2834 = 14 - 9;
								end
								if ((1326 > 388) and ((3 + 4) == v2834)) then
									v76 = v76 + 1;
									v84 = v72[v76];
									v2838 = v84[1361 - (978 + 381)];
									v82[v2838] = v82[v2838](v82[v2838 + 1]);
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v84[1 + 2];
									v76 = v76 + 1;
									v2834 = 8;
								end
								if ((1 == 1) and (v2834 == (1 + 14))) then
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v63[v84[3]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[4 - 2]] = v82[v84[3]][v84[4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v2834 = 16;
								end
								if ((1808 <= 2657) and (v2834 == (0 - 0))) then
									v2835 = nil;
									v2836, v2837 = nil;
									v2838 = nil;
									v82[v84[2 + 0]] = v82[v84[6 - 3]][v84[3 + 1]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]]();
									v76 = v76 + 1 + 0;
									v2834 = 570 - (397 + 172);
								end
								if ((v2834 == (15 - 4)) or (1592 < 1089)) then
									v82[v84[1119 - (267 + 850)]] = v62[v84[3 + 0]];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[996 - (41 + 953)]] = v82[v84[3]];
									v76 = v76 + (4 - 3);
									v84 = v72[v76];
									v82[v84[1 + 1]] = v63[v84[5 - 2]];
									v76 = v76 + (821 - (817 + 3));
									v2834 = 12;
								end
								if ((2687 <= 3266) and (v2834 == (1391 - (867 + 518)))) then
									v84 = v72[v76];
									v82[v84[5 - 3]] = v63[v84[333 - (256 + 74)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[12 - 9]][v84[191 - (111 + 76)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1053 - (100 + 951)]] = v82[v84[3]];
									v2834 = 632 - (369 + 256);
								end
								if (v2834 == (69 - 53)) then
									v82[v84[2]] = v63[v84[1 + 2]];
									v76 = v76 + (64 - (25 + 38));
									v84 = v72[v76];
									v82[v84[1038 - (890 + 146)]] = v82[v84[7 - 4]][v84[4 + 0]];
									v76 = v76 + (1585 - (549 + 1035));
									v84 = v72[v76];
									v82[v84[3 - 1]] = v82[v84[1 + 2]];
									v76 = v76 + 1 + 0;
									v2834 = 978 - (546 + 415);
								end
								if (v2834 == (1042 - (175 + 849))) then
									v82[v84[1666 - (734 + 930)]] = v84[3];
									v76 = v76 + (1416 - (1093 + 322));
									v84 = v72[v76];
									v2838 = v84[7 - 5];
									v2836, v2837 = v75(v82[v2838](v13(v82, v2838 + (1302 - (1256 + 45)), v84[1848 - (66 + 1779)])));
									v77 = (v2837 + v2838) - (1774 - (920 + 853));
									v2835 = 58 - (6 + 52);
									for v5717 = v2838, v77 do
										local v5718 = 0;
										while true do
											if (v5718 == (0 - 0)) then
												v2835 = v2835 + 1;
												v82[v5717] = v2836[v2835];
												break;
											end
										end
									end
									v2834 = 19;
								end
								if (v2834 == (69 - 50)) then
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v2838 = v84[2];
									v82[v2838](v13(v82, v2838 + (3 - 2), v77));
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v84[3 + 0];
									break;
								end
								if ((99 - (11 + 76)) == v2834) then
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[7 - 4]][v84[826 - (560 + 262)]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[1859 - (12 + 1845)]] = v84[3 + 0];
									v76 = v76 + (1318 - (1278 + 39));
									v84 = v72[v76];
									v82[v84[6 - 4]] = v84[3];
									v2834 = 13;
								end
								if (v2834 == 5) then
									v82[v84[2 + 0]] = v82[v84[5 - 2]] + v82[v84[15 - 11]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v63[v84[3]];
									v76 = v76 + (1537 - (385 + 1151));
									v84 = v72[v76];
									v82[v84[1452 - (240 + 1210)]] = v82[v84[1668 - (816 + 849)]][v84[4]];
									v76 = v76 + 1;
									v2834 = 1860 - (99 + 1755);
								end
								if ((13 - 3) == v2834) then
									v76 = v76 + (785 - (424 + 360));
									v84 = v72[v76];
									v82[v84[1376 - (41 + 1333)]] = v82[v84[3]][v84[549 - (161 + 384)]];
									v76 = v76 + (932 - (355 + 576));
									v84 = v72[v76];
									v82[v84[689 - (348 + 339)]]();
									v76 = v76 + (4 - 3);
									v84 = v72[v76];
									v2834 = 53 - 42;
								end
								if ((476 - (285 + 183)) == v2834) then
									v84 = v72[v76];
									v82[v84[4 - 2]] = v84[2 + 1];
									v76 = v76 + (1971 - (928 + 1042));
									v84 = v72[v76];
									v2838 = v84[1578 - (545 + 1031)];
									v2836, v2837 = v75(v82[v2838](v13(v82, v2838 + (2 - 1), v84[11 - 8])));
									v77 = (v2837 + v2838) - (1 - 0);
									v2835 = 0;
									v2834 = 9;
								end
							end
						else
							local v2839;
							v63[v84[928 - (345 + 580)]] = v82[v84[2]];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v82[v84[1 + 1]] = v63[v84[3]];
							v76 = v76 + (310 - (136 + 173));
							v84 = v72[v76];
							v82[v84[2]] = v84[3];
							v76 = v76 + (1904 - (1448 + 455));
							v84 = v72[v76];
							v2839 = v84[5 - 3];
							v82[v2839](v82[v2839 + 1]);
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[1 + 1]] = v84[3];
						end
					elseif (v85 <= (88 + 130)) then
						if ((v85 <= (124 + 90)) or (1958 == 500)) then
							if (v85 <= (478 - 266)) then
								if (v85 > (1772 - (1137 + 424))) then
									local v2847;
									local v2848;
									v2848 = v84[2];
									v82[v2848] = v82[v2848]();
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[1930 - (372 + 1555)]][v84[385 - (174 + 207)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v63[v84[3]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[74 - (65 + 6)]][v84[1315 - (1041 + 270)]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2]] = v84[2 + 1];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[1712 - (222 + 1488)]] = v84[3 + 0];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1524 - (1023 + 499)]] = v84[4 - 1];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v2848 = v84[2 + 0];
									v82[v2848] = v82[v2848](v13(v82, v2848 + (2 - 1), v84[3]));
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[2 + 1]] * v82[v84[811 - (134 + 673)]];
									v76 = v76 + (1058 - (810 + 247));
									v84 = v72[v76];
									v82[v84[1462 - (753 + 707)]][v84[6 - 3]] = v82[v84[8 - 4]];
									v76 = v76 + (601 - (462 + 138));
									v84 = v72[v76];
									v2848 = v84[2 + 0];
									v2847 = v82[v84[1 + 2]];
									v82[v2848 + (3 - 2)] = v2847;
									v82[v2848] = v2847[v84[664 - (642 + 18)]];
									v76 = v76 + (979 - (155 + 823));
									v84 = v72[v76];
									v82[v84[2 + 0]] = v63[v84[3 + 0]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v2848 = v84[2 + 0];
									v82[v2848] = v82[v2848]();
									v76 = v76 + (1454 - (799 + 654));
									v84 = v72[v76];
									v82[v84[3 - 1]] = v82[v84[10 - 7]][v84[4 - 0]];
									v76 = v76 + (634 - (527 + 106));
									v84 = v72[v76];
									v82[v84[3 - 1]] = v63[v84[3]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[1 + 2]][v84[4 + 0]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v84[1 + 2];
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[2]] = v84[3 + 0];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[735 - (589 + 144)]] = v84[3 + 0];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v2848 = v84[530 - (179 + 349)];
									v82[v2848] = v82[v2848](v13(v82, v2848 + (4 - 3), v84[7 - 4]));
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1 + 1]] = v82[v84[3]] * v82[v84[3 + 1]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v2848 = v84[2 + 0];
									v82[v2848](v13(v82, v2848 + (3 - 2), v84[3]));
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v84[3 + 0];
								else
									local v2876 = 0;
									local v2877;
									while true do
										if ((1 + 0) == v2876) then
											v84 = v72[v76];
											v82[v84[488 - (242 + 244)]] = v84[410 - (303 + 104)];
											v76 = v76 + (3 - 2);
											v2876 = 2;
										end
										if (v2876 == (0 + 0)) then
											v2877 = nil;
											v82[v84[2]] = v84[646 - (411 + 232)];
											v76 = v76 + 1 + 0;
											v2876 = 1 + 0;
										end
										if (v2876 == (5 - 3)) then
											v84 = v72[v76];
											v82[v84[2]] = v84[6 - 3];
											v76 = v76 + 1;
											v2876 = 3;
										end
										if (v2876 == (3 + 1)) then
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v2877 = v84[2];
											v2876 = 14 - 9;
										end
										if ((1984 > 208) and (v2876 == (484 - (164 + 317)))) then
											v84 = v72[v76];
											v2877 = v84[2];
											do
												return v82[v2877](v13(v82, v2877 + (100 - (65 + 34)), v84[7 - 4]));
											end
											v2876 = 3 + 1;
										end
										if (v2876 == (323 - (61 + 257))) then
											do
												return v13(v82, v2877, v77);
											end
											break;
										end
									end
								end
							elseif (v85 == 213) then
								local v2878 = v84[3];
								local v2879 = v82[v2878];
								for v3576 = v2878 + (1880 - (398 + 1481)), v84[8 - 4] do
									v2879 = v2879 .. v82[v3576];
								end
								v82[v84[4 - 2]] = v2879;
							else
								v76 = v84[3 + 0];
							end
						elseif (v85 <= (386 - 170)) then
							if ((1162 <= 3968) and (v85 == (901 - (338 + 348)))) then
								local v2882;
								v82[v84[1380 - (401 + 977)]] = v63[v84[7 - 4]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[48 - (17 + 28)]][v84[4]];
								v76 = v76 + (186 - (27 + 158));
								v84 = v72[v76];
								v82[v84[5 - 3]] = v84[1 + 2];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v2882 = v84[1 + 1];
								v82[v2882](v82[v2882 + (1294 - (372 + 921))]);
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v62[v84[486 - (350 + 133)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v62[v84[2 + 1]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v2882 = v84[1540 - (1432 + 106)];
								v82[v2882](v82[v2882 + 1]);
								v76 = v76 + 1;
								v84 = v72[v76];
								do
									return;
								end
							else
								local v2894 = 0 + 0;
								local v2895;
								while true do
									if (v2894 == (0 - 0)) then
										v2895 = v84[2 + 0];
										do
											return v82[v2895](v13(v82, v2895 + (1447 - (1075 + 371)), v84[11 - 8]));
										end
										break;
									end
								end
							end
						elseif (v85 > (511 - 294)) then
							v82[v84[1 + 1]] = v82[v84[10 - 7]][v84[4 + 0]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2]] = v62[v84[3]];
							v76 = v76 + (1548 - (234 + 1313));
							v84 = v72[v76];
							v82[v84[3 - 1]] = v82[v84[1 + 2]][v84[912 - (597 + 311)]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[29 - (13 + 14)]][v84[3]] = v82[v84[4]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[1055 - (713 + 340)]] = v62[v84[7 - 4]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2]] = v82[v84[7 - 4]][v84[4 + 0]];
							v76 = v76 + (352 - (265 + 86));
							v84 = v72[v76];
							v82[v84[6 - 4]] = v62[v84[3]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[873 - (747 + 124)]] = v82[v84[1459 - (692 + 764)]][v84[12 - 8]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[7 - 5]][v84[2 + 1]] = v82[v84[9 - 5]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v76 = v84[1033 - (283 + 747)];
						else
							local v2914;
							v82[v84[2 + 0]] = v63[v84[3]];
							v76 = v76 + (906 - (816 + 89));
							v84 = v72[v76];
							v82[v84[7 - 5]] = v82[v84[1 + 2]][v84[1082 - (709 + 369)]];
							v76 = v76 + (3 - 2);
							v84 = v72[v76];
							v82[v84[2]] = v84[3];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v82[v84[3 - 1]] = v84[1 + 2];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2]] = v84[3];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v2914 = v84[2];
							v82[v2914] = v82[v2914](v13(v82, v2914 + 1 + 0, v84[702 - (478 + 221)]));
							v76 = v76 + (773 - (607 + 165));
							v84 = v72[v76];
							v82[v84[1246 - (1108 + 136)]][v84[8 - 5]] = v82[v84[4]];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v82[v84[5 - 3]] = v62[v84[639 - (352 + 284)]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2]] = v63[v84[894 - (352 + 539)]];
							v76 = v76 + (3 - 2);
							v84 = v72[v76];
							v82[v84[2]] = v82[v84[3]][v84[4]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2 + 0]] = v84[7 - 4];
							v76 = v76 + (767 - (714 + 52));
							v84 = v72[v76];
							v82[v84[2 + 0]] = v84[1816 - (1482 + 331)];
							v76 = v76 + (1202 - (766 + 435));
							v84 = v72[v76];
							v82[v84[1 + 1]] = v84[1822 - (62 + 1757)];
							v76 = v76 + 1;
							v84 = v72[v76];
							v2914 = v84[1370 - (833 + 535)];
							v82[v2914] = v82[v2914](v13(v82, v2914 + 1, v84[1 + 2]));
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[140 - (5 + 133)]][v84[3]] = v82[v84[4 + 0]];
							v76 = v76 + (521 - (393 + 127));
							v84 = v72[v76];
							v76 = v84[1059 - (705 + 351)];
						end
					elseif (v85 <= (2 + 220)) then
						if (v85 <= (24 + 196)) then
							if ((v85 == (203 + 16)) or (3008 >= 4793)) then
								local v2940 = v82[v84[1161 - (414 + 743)]];
								if (v2940 or (4163 == 848)) then
									v76 = v76 + 1 + 0;
								else
									local v3709 = 472 - (65 + 407);
									while true do
										if ((3929 == 3929) and ((0 - 0) == v3709)) then
											v82[v84[3 - 1]] = v2940;
											v76 = v84[14 - 11];
											break;
										end
									end
								end
							else
								local v2941;
								v82[v84[7 - 5]] = v84[1547 - (116 + 1428)];
								v76 = v76 + (4 - 3);
								v84 = v72[v76];
								v82[v84[2]] = v84[3];
								v76 = v76 + (1303 - (79 + 1223));
								v84 = v72[v76];
								v82[v84[2]] = v84[3 + 0];
								v76 = v76 + (389 - (353 + 35));
								v84 = v72[v76];
								v2941 = v84[3 - 1];
								do
									return v82[v2941](v13(v82, v2941 + (2 - 1), v84[1943 - (490 + 1450)]));
								end
								v76 = v76 + (1347 - (778 + 568));
								v84 = v72[v76];
								v2941 = v84[2 + 0];
								do
									return v13(v82, v2941, v77);
								end
							end
						elseif ((2700 < 3812) and (v85 == 221)) then
							v82[v84[2]] = v82[v84[1297 - (914 + 380)]][v84[2 + 2]];
						else
							v82[v84[2]] = {};
						end
					elseif (v85 <= (756 - (126 + 406))) then
						if ((v85 > (1413 - (655 + 535))) or (4753 < 1262)) then
							local v2953;
							local v2954;
							v82[v84[1 + 1]] = v63[v84[8 - 5]];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v2954 = v84[4 - 2];
							v2953 = v82[v84[3]];
							v82[v2954 + 1] = v2953;
							v82[v2954] = v2953[v84[1 + 3]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[1300 - (711 + 587)]] = v84[886 - (168 + 715)];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v2954 = v84[2 + 0];
							v82[v2954] = v82[v2954](v13(v82, v2954 + (1 - 0), v84[295 - (232 + 60)]));
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2]] = v82[v84[2 + 1]][v84[4]];
							v76 = v76 + (38 - (22 + 15));
							v84 = v72[v76];
							v2954 = v84[4 - 2];
							v2953 = v82[v84[3]];
							v82[v2954 + 1 + 0] = v2953;
							v82[v2954] = v2953[v84[8 - 4]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[1175 - (797 + 376)]] = v82[v84[3 + 0]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v2954 = v84[2 + 0];
							v82[v2954] = v82[v2954](v13(v82, v2954 + (4 - 3), v84[3]));
							v76 = v76 + 1;
							v84 = v72[v76];
							v62[v84[2 + 1]] = v82[v84[8 - 6]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v76 = v84[9 - 6];
						else
							v82[v84[2]] = v82[v84[10 - 7]][v84[4]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2]] = v62[v84[1380 - (1071 + 306)]];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v82[v84[1193 - (412 + 779)]] = v82[v84[3]][v84[7 - 3]];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v82[v84[614 - (427 + 185)]] = v82[v84[1654 - (1444 + 207)]] * v84[4];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2]][v84[7 - 4]] = v82[v84[4]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[4 - 2]] = v62[v84[3]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2 - 0]] = v82[v84[642 - (261 + 378)]][v84[1 + 3]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[1 + 1]] = v62[v84[10 - 7]];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v82[v84[350 - (22 + 326)]] = v82[v84[9 - 6]][v84[1218 - (836 + 378)]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[5 - 3]] = v82[v84[3]] * v84[4];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v82[v84[6 - 4]][v84[3]] = v82[v84[4]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v76 = v84[1290 - (742 + 545)];
						end
					elseif ((v85 <= 225) or (1572 > 1606)) then
						local v2995;
						local v2996;
						v82[v84[2]] = v63[v84[6 - 3]];
						v76 = v76 + 1;
						v84 = v72[v76];
						v2996 = v84[6 - 4];
						v2995 = v82[v84[1204 - (334 + 867)]];
						v82[v2996 + (2 - 1)] = v2995;
						v82[v2996] = v2995[v84[1408 - (317 + 1087)]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[2 - 0]] = v84[673 - (97 + 573)];
						v76 = v76 + (3 - 2);
						v84 = v72[v76];
						v2996 = v84[2];
						v82[v2996] = v82[v2996](v13(v82, v2996 + 1 + 0, v84[3]));
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[5 - 3]] = v82[v84[3 + 0]][v84[1339 - (1234 + 101)]];
						v76 = v76 + 1;
						v84 = v72[v76];
						v2996 = v84[2 - 0];
						v2995 = v82[v84[2 + 1]];
						v82[v2996 + (4 - 3)] = v2995;
						v82[v2996] = v2995[v84[10 - 6]];
					elseif ((2120 == 2120) and (v85 > (1426 - (711 + 489)))) then
						v82[v84[2 + 0]] = v82[v84[11 - 8]] / v84[4];
					else
						local v3711 = 0 + 0;
						local v3712;
						local v3713;
						local v3714;
						local v3715;
						while true do
							if ((3917 >= 2972) and (v3711 == 11)) then
								v82[v84[3 - 1]] = v84[6 - 3];
								v76 = v76 + (643 - (483 + 159));
								v84 = v72[v76];
								v82[v84[2]] = v62[v84[3 + 0]];
								v76 = v76 + (318 - (200 + 117));
								v84 = v72[v76];
								v82[v84[49 - (5 + 42)]] = v82[v84[9 - 6]][v84[4 + 0]];
								v76 = v76 + (4 - 3);
								v3711 = 548 - (298 + 238);
							end
							if ((1938 > 1742) and (v3711 == (1835 - (1370 + 451)))) then
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[3];
								v76 = v76 + (1262 - (493 + 768));
								v84 = v72[v76];
								v82[v84[1179 - (622 + 555)]] = v84[3];
								v76 = v76 + (620 - (581 + 38));
								v84 = v72[v76];
								v3715 = v84[2 + 0];
								v3711 = 15;
							end
							if ((39 - 22) == v3711) then
								v82[v84[8 - 6]]();
								v76 = v76 + (1923 - (567 + 1355));
								v84 = v72[v76];
								v82[v84[1566 - (801 + 763)]] = v84[1 + 2];
								break;
							end
							if (v3711 == (410 - (251 + 153))) then
								v76 = v76 + (903 - (709 + 193));
								v84 = v72[v76];
								v82[v84[1889 - (737 + 1150)]] = v84[3];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v3715 = v84[1034 - (755 + 277)];
								v3713, v3714 = v75(v82[v3715](v13(v82, v3715 + 1, v84[3])));
								v77 = (v3714 + v3715) - 1;
								v3711 = 468 - (182 + 279);
							end
							if (v3711 == 2) then
								v76 = v76 + (361 - (323 + 37));
								v84 = v72[v76];
								v82[v84[2]] = v62[v84[5 - 2]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]][v84[4]];
								v76 = v76 + (1016 - (992 + 23));
								v84 = v72[v76];
								v3711 = 2 + 1;
							end
							if (v3711 == (26 - 17)) then
								v84 = v72[v76];
								v82[v84[647 - (269 + 376)]] = v62[v84[6 - 3]];
								v76 = v76 + (472 - (169 + 302));
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v63[v84[1330 - (623 + 704)]];
								v3711 = 5 + 5;
							end
							if (v3711 == 7) then
								v3712 = 817 - (420 + 397);
								for v5932 = v3715, v77 do
									v3712 = v3712 + 1 + 0;
									v82[v5932] = v3713[v3712];
								end
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v3715 = v84[2];
								v82[v3715](v13(v82, v3715 + 1 + 0, v77));
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v3711 = 37 - 29;
							end
							if ((39 - 29) == v3711) then
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[8 - 5]][v84[9 - 5]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[2]] = v84[6 - 3];
								v76 = v76 + (1059 - (440 + 618));
								v84 = v72[v76];
								v3711 = 1046 - (593 + 442);
							end
							if (v3711 == (4 + 11)) then
								v3713, v3714 = v75(v82[v3715](v13(v82, v3715 + (1 - 0), v84[1047 - (801 + 243)])));
								v77 = (v3714 + v3715) - (2 - 1);
								v3712 = 0;
								for v5935 = v3715, v77 do
									v3712 = v3712 + 1;
									v82[v5935] = v3713[v3712];
								end
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v3715 = v84[3 - 1];
								v82[v3715](v13(v82, v3715 + 1 + 0, v77));
								v3711 = 138 - (41 + 81);
							end
							if ((926 <= 4080) and (v3711 == (45 - 32))) then
								v82[v84[508 - (145 + 361)]] = v63[v84[3]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[5 - 2]][v84[4]];
								v76 = v76 + (157 - (28 + 128));
								v84 = v72[v76];
								v82[v84[3 - 1]] = v84[4 - 1];
								v76 = v76 + 1;
								v3711 = 7 + 7;
							end
							if ((v3711 == (101 - (33 + 52))) or (1746 == 2784)) then
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v63[v84[4 - 1]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3 + 0]][v84[19 - 15]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v3711 = 17;
							end
							if (v3711 == (7 + 5)) then
								v84 = v72[v76];
								v82[v84[1348 - (1135 + 211)]] = -v82[v84[3 + 0]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v3715 = v84[2];
								v82[v3715] = v82[v3715](v13(v82, v3715 + 1 + 0, v84[1098 - (380 + 715)]));
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v3711 = 1981 - (462 + 1506);
							end
							if ((3731 <= 3817) and (v3711 == (1825 - (1182 + 640)))) then
								v3715 = v84[4 - 2];
								v82[v3715] = v82[v3715](v13(v82, v3715 + 1, v84[10 - 7]));
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[8 - 6]] = v63[v84[2 + 1]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]][v84[347 - (323 + 20)]];
								v3711 = 8 - 4;
							end
							if (v3711 == 0) then
								v3712 = nil;
								v3713, v3714 = nil;
								v3715 = nil;
								v82[v84[2 + 0]] = v82[v84[2 + 1]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[1176 - (769 + 405)]] = v63[v84[11 - 8]];
								v76 = v76 + 1;
								v3711 = 86 - (9 + 76);
							end
							if ((259 - (244 + 10)) == v3711) then
								v82[v84[1 + 1]] = v84[3];
								v76 = v76 + 1;
								v84 = v72[v76];
								v3715 = v84[1307 - (601 + 704)];
								v82[v3715] = v82[v3715](v82[v3715 + 1 + 0]);
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[524 - (23 + 499)]] = v84[3];
								v3711 = 6;
							end
							if (v3711 == (1 + 0)) then
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[309 - (35 + 271)]][v84[5 - 1]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v84[3 - 0];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[12 - 9];
								v3711 = 2;
							end
							if (v3711 == 8) then
								v82[v84[1 + 1]] = v63[v84[3]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[10 - 7]][v84[1 + 3]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2 + 0]]();
								v76 = v76 + (2 - 1);
								v3711 = 9;
							end
							if (v3711 == (11 - 7)) then
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v63[v84[1878 - (1136 + 739)]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[3 - 1]] = v82[v84[3]][v84[578 - (125 + 449)]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v3711 = 884 - (96 + 783);
							end
						end
					end
				elseif (v85 <= 243) then
					if (v85 <= (1263 - (888 + 140))) then
						if (v85 <= (166 + 65)) then
							if ((v85 <= (291 - (41 + 21))) or (2156 > 2816)) then
								if (v85 == 228) then
									local v3014 = 587 - (570 + 17);
									local v3015;
									while true do
										if (v3014 == (2 + 3)) then
											v76 = v76 + 1 + 0;
											v84 = v72[v76];
											v3015 = v84[1 + 1];
											v3014 = 13 - 7;
										end
										if (v3014 == 6) then
											v82[v3015](v82[v3015 + (1 - 0)]);
											v76 = v76 + 1;
											v84 = v72[v76];
											v3014 = 27 - 20;
										end
										if (4 == v3014) then
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v82[v84[2 + 0]] = v62[v84[1 + 2]];
											v3014 = 5;
										end
										if ((1703 >= 441) and (v3014 == (757 - (321 + 434)))) then
											v84 = v72[v76];
											v3015 = v84[2];
											v82[v3015](v82[v3015 + (2 - 1)]);
											v3014 = 2 + 1;
										end
										if (v3014 == (3 + 4)) then
											v76 = v84[3];
											break;
										end
										if (v3014 == (1289 - (137 + 1149))) then
											v76 = v76 + (2 - 1);
											v84 = v72[v76];
											v82[v84[1825 - (566 + 1257)]] = v62[v84[3]];
											v3014 = 681 - (391 + 286);
										end
										if ((v3014 == (1375 - (384 + 990))) or (1195 == 3137)) then
											v84 = v72[v76];
											v82[v84[615 - (505 + 108)]] = v84[3 + 0];
											v76 = v76 + (1298 - (549 + 748));
											v3014 = 1 + 1;
										end
										if (v3014 == (0 + 0)) then
											v3015 = nil;
											v82[v84[2]] = v82[v84[11 - 8]][v84[1 + 3]];
											v76 = v76 + 1 + 0;
											v3014 = 2 - 1;
										end
									end
								else
									v82[v84[2]]();
								end
							elseif ((3773 >= 2439) and (v85 == (468 - 238))) then
								v82[v84[4 - 2]] = v63[v84[2 + 1]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[8 - 5]][v84[4]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[4 - 2]] = v82[v84[695 - (205 + 487)]][v84[4]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[2 + 1]][v84[13 - 9]];
								v76 = v76 + (1427 - (309 + 1117));
								v84 = v72[v76];
								v82[v84[2 + 0]] = v82[v84[4 - 1]][v84[4 + 0]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]][v84[7 - 4]] = v84[80 - (50 + 26)];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								do
									return;
								end
							else
								v82[v84[1 + 1]] = v82[v84[3 + 0]] * v84[4 + 0];
							end
						elseif ((4915 >= 4181) and (v85 <= (2051 - (520 + 1298)))) then
							if (v85 > 232) then
								local v3028 = 1060 - (420 + 640);
								local v3029;
								local v3030;
								while true do
									if (v3028 == (7 - 3)) then
										v76 = v76 + (1 - 0);
										v84 = v72[v76];
										if v82[v84[1584 - (15 + 1567)]] then
											v76 = v76 + 1 + 0;
										else
											v76 = v84[1 + 2];
										end
										break;
									end
									if ((v3028 == (1987 - (110 + 1874))) or (1848 >= 2263)) then
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v3030 = v84[784 - (101 + 681)];
										v82[v3030] = v82[v3030](v13(v82, v3030 + 1 + 0, v84[7 - 4]));
										v3028 = 547 - (120 + 423);
									end
									if (((5 - 3) == v3028) or (3992 > 4920)) then
										v82[v3030] = v3029[v84[4]];
										v76 = v76 + 1 + 0;
										v84 = v72[v76];
										v82[v84[1 + 1]] = v84[3 + 0];
										v3028 = 3;
									end
									if (v3028 == (1 + 0)) then
										v84 = v72[v76];
										v3030 = v84[5 - 3];
										v3029 = v82[v84[48 - (41 + 4)]];
										v82[v3030 + (1084 - (246 + 837))] = v3029;
										v3028 = 908 - (492 + 414);
									end
									if (v3028 == (0 + 0)) then
										v3029 = nil;
										v3030 = nil;
										for v5719 = v84[2], v84[6 - 3] do
											v82[v5719] = nil;
										end
										v76 = v76 + 1;
										v3028 = 1;
									end
								end
							else
								v82[v84[1051 - (829 + 220)]] = v82[v84[2 + 1]][v84[3 + 1]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[3 - 1]] = v82[v84[3]][v84[4]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[1497 - (345 + 1150)]] = v82[v84[1360 - (1017 + 340)]][v84[2 + 2]];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[3]] - v82[v84[2 + 2]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1841 - (1279 + 560)]] = v82[v84[5 - 2]][v84[4]];
								v76 = v76 + 1;
								v84 = v72[v76];
								if ((v84[1 + 1] < v82[v84[9 - 5]]) or (4075 == 2168)) then
									v76 = v76 + (1464 - (140 + 1323));
								else
									v76 = v84[1991 - (1607 + 381)];
								end
							end
						elseif ((v85 > (401 - 167)) or (248 >= 1723)) then
							local v3041 = 0;
							local v3042;
							while true do
								if ((v3041 == (21 - 14)) or (4073 <= 3795)) then
									v84 = v72[v76];
									v82[v84[196 - (162 + 32)]] = v62[v84[607 - (440 + 164)]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[3]][v84[8 - 4]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v3041 = 11 - 3;
								end
								if (v3041 == (965 - (553 + 403))) then
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[3]][v84[6 - 2]];
									v76 = v76 + (342 - (111 + 230));
									v84 = v72[v76];
									v82[v84[2 - 0]] = v82[v84[12 - 9]][v84[1 + 3]];
									v76 = v76 + 1 + 0;
									v3041 = 10;
								end
								if ((v3041 == (339 - (85 + 253))) or (842 == 1350)) then
									v82[v84[1851 - (1558 + 291)]] = v82[v84[3]][v84[1 + 3]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[5 - 3]] = v62[v84[4 - 1]];
									v76 = v76 + (1083 - (985 + 97));
									v84 = v72[v76];
									v82[v84[4 - 2]] = v82[v84[616 - (424 + 189)]][v84[4]];
									v3041 = 2;
								end
								if ((820 < 3181) and (v3041 == 10)) then
									v84 = v72[v76];
									v3042 = v84[2 + 0];
									v82[v3042] = v82[v3042](v13(v82, v3042 + (1024 - (19 + 1004)), v84[3 + 0]));
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[1 + 1]][v84[3 + 0]] = v82[v84[1349 - (231 + 1114)]];
									v76 = v76 + 1 + 0;
									v3041 = 1056 - (114 + 931);
								end
								if (4 == v3041) then
									v82[v84[2 + 0]] = v82[v84[3]][v84[5 - 1]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v3042 = v84[1 + 1];
									v82[v3042] = v82[v3042](v13(v82, v3042 + (64 - (17 + 46)), v84[2 + 1]));
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v3041 = 1041 - (931 + 105);
								end
								if ((1625 <= 4694) and (v3041 == (1139 - (718 + 410)))) then
									v84 = v72[v76];
									v76 = v84[3];
									break;
								end
								if (v3041 == (1208 - (361 + 844))) then
									v84 = v72[v76];
									v82[v84[1912 - (1760 + 150)]] = v62[v84[1570 - (917 + 650)]];
									v76 = v76 + (182 - (104 + 77));
									v84 = v72[v76];
									v82[v84[4 - 2]] = v82[v84[3]][v84[1 + 3]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v3041 = 6 - 2;
								end
								if (v3041 == (270 - (53 + 211))) then
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v63[v84[7 - 4]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[7 - 5]] = v82[v84[1303 - (282 + 1018)]][v84[4 + 0]];
									v76 = v76 + (515 - (162 + 352));
									v3041 = 1 + 6;
								end
								if (v3041 == (931 - (22 + 907))) then
									v76 = v76 + (440 - (280 + 159));
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[1583 - (1064 + 516)]][v84[11 - 7]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[3 + 0]] * v84[1 + 3];
									v76 = v76 + (1906 - (1293 + 612));
									v3041 = 2 + 1;
								end
								if (v3041 == (0 - 0)) then
									v3042 = nil;
									v82[v84[7 - 5]] = v82[v84[2 + 1]][v84[1755 - (782 + 969)]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[5 - 3]] = v63[v84[1671 - (1085 + 583)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v3041 = 1461 - (229 + 1231);
								end
								if ((v3041 == 8) or (956 > 2856)) then
									v82[v84[5 - 3]] = v82[v84[8 - 5]][v84[13 - 9]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[147 - (48 + 97)]] = v82[v84[1849 - (676 + 1170)]] * v84[1976 - (830 + 1142)];
									v76 = v76 + (96 - (41 + 54));
									v84 = v72[v76];
									v82[v84[2]] = v62[v84[12 - 9]];
									v3041 = 1075 - (536 + 530);
								end
								if (v3041 == (9 - 4)) then
									v82[v84[2]][v84[12 - 9]] = v82[v84[1259 - (1129 + 126)]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[454 - (282 + 170)]] = v62[v84[2 + 1]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v82[v84[2]] = v82[v84[1 + 2]][v84[19 - 15]];
									v3041 = 1229 - (610 + 613);
								end
							end
						else
							local v3043;
							v82[v84[5 - 3]] = v82[v84[1611 - (1182 + 426)]][v84[1 + 3]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2 + 0]] = v84[1237 - (1210 + 24)];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[1 + 1]] = v84[1360 - (307 + 1050)];
							v76 = v76 + (815 - (693 + 121));
							v84 = v72[v76];
							v3043 = v84[286 - (267 + 17)];
							v82[v3043] = v82[v3043](v13(v82, v3043 + 1, v84[62 - (22 + 37)]));
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v82[v84[2]][v84[3]] = v82[v84[2 + 2]];
							v76 = v76 + (1448 - (391 + 1056));
							v84 = v72[v76];
							v82[v84[2 + 0]] = v63[v84[1579 - (1117 + 459)]];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v82[v84[2 + 0]] = v82[v84[464 - (65 + 396)]][v84[9 - 5]];
							v76 = v76 + (3 - 2);
							v84 = v72[v76];
							v82[v84[2 + 0]] = v84[1 + 2];
							v76 = v76 + (1702 - (620 + 1081));
							v84 = v72[v76];
							v82[v84[1 + 1]] = v84[1883 - (845 + 1035)];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v3043 = v84[2];
							v82[v3043] = v82[v3043](v13(v82, v3043 + (2 - 1), v84[1572 - (1348 + 221)]));
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[1043 - (320 + 721)]][v84[1960 - (1284 + 673)]] = v82[v84[8 - 4]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2 + 0]] = v84[7 - 4];
						end
					elseif ((v85 <= 239) or (504 <= 432)) then
						if (v85 <= (80 + 157)) then
							if ((v85 > (577 - 341)) or (4835 < 2977)) then
								local v3063;
								local v3064;
								v82[v84[5 - 3]] = {};
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[7 - 5]] = v63[v84[3]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[11 - 8]][v84[4]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]] = v84[5 - 2];
								v76 = v76 + (362 - (170 + 191));
								v84 = v72[v76];
								v82[v84[1744 - (209 + 1533)]] = v84[4 - 1];
								v76 = v76 + (1417 - (1049 + 367));
								v84 = v72[v76];
								v82[v84[3 - 1]] = v84[10 - 7];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v3064 = v84[2 + 0];
								v82[v3064] = v82[v3064](v13(v82, v3064 + (2 - 1), v84[3]));
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[1 + 1]][v84[3]] = v82[v84[227 - (167 + 56)]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[2]] = v63[v84[3]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[3]][v84[5 - 1]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[882 - (752 + 128)]] = v84[3];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[1 + 2];
								v76 = v76 + (19 - (7 + 11));
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[134 - (87 + 44)];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v3064 = v84[6 - 4];
								v82[v3064] = v82[v3064](v13(v82, v3064 + (3 - 2), v84[3]));
								v76 = v76 + (1536 - (656 + 879));
								v84 = v72[v76];
								v82[v84[3 - 1]][v84[1 + 2]] = v82[v84[9 - 5]];
								v76 = v76 + (4 - 3);
								v84 = v72[v76];
								v82[v84[1084 - (529 + 553)]][v84[3 + 0]] = v84[941 - (613 + 324)];
								v76 = v76 + (1321 - (585 + 735));
								v84 = v72[v76];
								v82[v84[2 - 0]][v84[6 - 3]] = v84[2 + 2];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[5 - 3]][v84[3]] = v84[19 - (6 + 9)];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[2]][v84[7 - 4]] = v84[4];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[5 - 3]][v84[463 - (59 + 401)]] = v84[793 - (743 + 46)];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[3 - 1]] = {};
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[2 + 0]][v84[540 - (285 + 252)]] = v84[479 - (146 + 329)];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v63[v84[1473 - (417 + 1053)]];
								v76 = v76 + (1873 - (1251 + 621));
								v84 = v72[v76];
								v82[v84[1 + 1]] = v82[v84[13 - 10]][v84[240 - (213 + 23)]];
								v76 = v76 + (745 - (617 + 127));
								v84 = v72[v76];
								v82[v84[694 - (181 + 511)]] = v84[383 - (187 + 193)];
								v76 = v76 + (1290 - (107 + 1182));
								v84 = v72[v76];
								v82[v84[1986 - (1623 + 361)]] = v84[1 + 2];
								v76 = v76 + (1822 - (325 + 1496));
								v84 = v72[v76];
								v82[v84[358 - (235 + 121)]] = v84[3];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v3064 = v84[4 - 2];
								v82[v3064] = v82[v3064](v13(v82, v3064 + 1 + 0, v84[11 - 8]));
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2]][v84[6 - 3]] = v82[v84[53 - (28 + 21)]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[1 + 1]] = v63[v84[690 - (630 + 57)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[7 - 5]] = v82[v84[1 + 2]][v84[4 + 0]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[890 - (21 + 867)]] = v84[3];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[2]] = v84[3];
								v76 = v76 + (1768 - (1555 + 212));
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[5 - 2];
								v76 = v76 + 1;
								v84 = v72[v76];
								v3064 = v84[2 + 0];
								v82[v3064] = v82[v3064](v13(v82, v3064 + 1 + 0, v84[3 + 0]));
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1 + 1]][v84[8 - 5]] = v82[v84[8 - 4]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[5 - 3]] = v84[7 - 4] ~= (0 + 0);
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v63[v84[7 - 4]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v3064 = v84[2 + 0];
								v3063 = v82[v84[944 - (903 + 38)]];
								v82[v3064 + (387 - (74 + 312))] = v3063;
								v82[v3064] = v3063[v84[4]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1322 - (837 + 483)]] = v84[4 - 1];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v3064 = v84[2];
								v82[v3064] = v82[v3064](v13(v82, v3064 + 1, v84[2 + 1]));
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[1544 - (1455 + 86)]][v84[828 - (803 + 21)]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[5 - 3]] = v63[v84[3]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v3064 = v84[1 + 1];
								v3063 = v82[v84[2 + 1]];
								v82[v3064 + 1 + 0] = v3063;
								v82[v3064] = v3063[v84[8 - 4]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[4 - 2]] = v84[3 + 0];
								v76 = v76 + (900 - (497 + 402));
								v84 = v72[v76];
								v3064 = v84[2];
								v82[v3064] = v82[v3064](v13(v82, v3064 + (989 - (578 + 410)), v84[3]));
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[1545 - (464 + 1079)]] = v82[v84[3 + 0]][v84[1700 - (1398 + 298)]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v3064 = v84[2 + 0];
								v3063 = v82[v84[3 - 0]];
								v82[v3064 + 1] = v3063;
								v82[v3064] = v3063[v84[1 + 3]];
								v76 = v76 + (1291 - (561 + 729));
								v84 = v72[v76];
								v3064 = v84[1 + 1];
								v82[v3064] = v82[v3064](v82[v3064 + (1 - 0)]);
							else
								local v3134;
								local v3135;
								v3135 = v84[2];
								v82[v3135](v13(v82, v3135 + (1160 - (104 + 1055)), v84[1676 - (308 + 1365)]));
								v76 = v76 + 1;
								v84 = v72[v76];
								v3135 = v84[549 - (500 + 47)];
								v3134 = v82[v84[4 - 1]];
								v82[v3135 + 1 + 0] = v3134;
								v82[v3135] = v3134[v84[4]];
								v76 = v76 + (1951 - (186 + 1764));
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[2 + 1];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[4 - 2]] = v84[2 + 1];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v3135 = v84[2 + 0];
								v82[v3135] = v82[v3135](v13(v82, v3135 + (1175 - (1133 + 41)), v84[6 - 3]));
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v3135 = v84[1895 - (1786 + 107)];
								v3134 = v82[v84[3]];
								v82[v3135 + 1] = v3134;
								v82[v3135] = v3134[v84[8 - 4]];
								v76 = v76 + (1530 - (344 + 1185));
								v84 = v72[v76];
								v82[v84[1 + 1]] = v84[1 + 2];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[697 - (72 + 623)]] = {};
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[10 - 7];
								v76 = v76 + (1893 - (1093 + 799));
								v84 = v72[v76];
								v82[v84[1 + 1]] = v84[3 + 0];
							end
						elseif (v85 == (210 + 28)) then
							local v3156 = 0 - 0;
							local v3157;
							local v3158;
							while true do
								if ((3655 > 913) and (v3156 == (1068 - (721 + 334)))) then
									v3158 = v84[1864 - (1322 + 540)];
									v82[v3158](v13(v82, v3158 + 1 + 0, v84[1375 - (575 + 797)]));
									v76 = v76 + (1130 - (274 + 855));
									v84 = v72[v76];
									v3156 = 28 - 14;
								end
								if (v3156 == (1 + 1)) then
									v82[v84[2]] = v82[v84[4 - 1]][v84[2 + 2]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v3158 = v84[1811 - (986 + 823)];
									v3156 = 2 + 1;
								end
								if ((933 <= 1740) and (v3156 == (1027 - (872 + 141)))) then
									v82[v84[1 + 1]] = v84[3];
									v76 = v76 + 1;
									v84 = v72[v76];
									v76 = v84[10 - 7];
									break;
								end
								if (v3156 == (9 - 4)) then
									v84 = v72[v76];
									v82[v84[2]][v84[541 - (139 + 399)]] = v82[v84[4 + 0]];
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v3156 = 1708 - (1038 + 664);
								end
								if (v3156 == 8) then
									v84 = v72[v76];
									v82[v84[2 + 0]] = v63[v84[3 + 0]];
									v76 = v76 + 1;
									v84 = v72[v76];
									v3156 = 2 + 7;
								end
								if ((v3156 == 3) or (3240 < 1992)) then
									v82[v3158] = v82[v3158](v82[v3158 + (1 - 0)]);
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[2 + 0]] = v82[v84[2 + 1]] * v82[v84[10 - 6]];
									v3156 = 578 - (388 + 186);
								end
								if (v3156 == (498 - (421 + 65))) then
									v84 = v72[v76];
									v82[v84[3 - 1]] = v82[v84[1 + 2]] * v82[v84[4 + 0]];
									v76 = v76 + (1264 - (604 + 659));
									v84 = v72[v76];
									v3156 = 1517 - (1267 + 237);
								end
								if (v3156 == (188 - (112 + 69))) then
									v3157 = v82[v84[4 - 1]];
									v82[v3158 + (485 - (319 + 165))] = v3157;
									v82[v3158] = v3157[v84[2 + 2]];
									v76 = v76 + (1354 - (634 + 719));
									v3156 = 1047 - (248 + 791);
								end
								if (v3156 == (1 + 8)) then
									v82[v84[2 + 0]] = v82[v84[1088 - (888 + 197)]][v84[14 - 10]];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v82[v84[7 - 5]] = v82[v84[9 - 6]][v84[2 + 2]];
									v3156 = 10;
								end
								if (v3156 == (2 + 4)) then
									v82[v84[2]] = v62[v84[11 - 8]];
									v76 = v76 + (2 - 1);
									v84 = v72[v76];
									v3158 = v84[2 - 0];
									v3156 = 1973 - (1355 + 611);
								end
								if ((1 + 9) == v3156) then
									v76 = v76 + (1002 - (497 + 504));
									v84 = v72[v76];
									v3158 = v84[2 - 0];
									v82[v3158] = v82[v3158](v82[v3158 + 1 + 0]);
									v3156 = 11;
								end
								if (v3156 == (0 + 0)) then
									v3157 = nil;
									v3158 = nil;
									v82[v84[2]] = v63[v84[3 + 0]];
									v76 = v76 + (3 - 2);
									v3156 = 1;
								end
								if ((1426 < 4321) and ((1 - 0) == v3156)) then
									v84 = v72[v76];
									v82[v84[1259 - (1159 + 98)]] = v82[v84[1446 - (418 + 1025)]][v84[4]];
									v76 = v76 + (4 - 3);
									v84 = v72[v76];
									v3156 = 2;
								end
								if (v3156 == (25 - 14)) then
									v76 = v76 + (1794 - (297 + 1496));
									v84 = v72[v76];
									v82[v84[3 - 1]] = v82[v84[946 - (547 + 396)]] * v82[v84[9 - 5]];
									v76 = v76 + 1;
									v3156 = 8 + 4;
								end
								if (v3156 == (10 - 6)) then
									v76 = v76 + 1;
									v84 = v72[v76];
									v82[v84[1745 - (999 + 744)]] = v82[v84[2 + 1]] * v82[v84[504 - (324 + 176)]];
									v76 = v76 + (1511 - (1171 + 339));
									v3156 = 952 - (492 + 455);
								end
							end
						else
							local v3159;
							local v3160;
							v82[v84[1478 - (805 + 671)]] = v63[v84[3]];
							v76 = v76 + (1314 - (265 + 1048));
							v84 = v72[v76];
							v3160 = v84[1578 - (252 + 1324)];
							v3159 = v82[v84[3 + 0]];
							v82[v3160 + (1571 - (544 + 1026))] = v3159;
							v82[v3160] = v3159[v84[4 + 0]];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v82[v84[664 - (217 + 445)]] = v84[3 + 0];
							v76 = v76 + (941 - (492 + 448));
							v84 = v72[v76];
							v3160 = v84[1434 - (1152 + 280)];
							v82[v3160] = v82[v3160](v13(v82, v3160 + (1 - 0), v84[14 - 11]));
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v3160 = v84[1 + 1];
							v3159 = v82[v84[848 - (175 + 670)]];
							v82[v3160 + 1 + 0] = v3159;
							v82[v3160] = v3159[v84[4]];
							v76 = v76 + (1654 - (1411 + 242));
							v84 = v72[v76];
							v82[v84[2 + 0]] = v84[696 - (678 + 15)];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[1 + 1]] = {};
							v76 = v76 + (811 - (593 + 217));
							v84 = v72[v76];
							v82[v84[5 - 3]][v84[3 + 0]] = v82[v84[7 - 3]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[492 - (112 + 378)]][v84[1550 - (952 + 595)]] = v82[v84[400 - (23 + 373)]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[4 - 2]][v84[8 - 5]] = v82[v84[4 + 0]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v3160 = v84[1786 - (1102 + 682)];
							v82[v3160](v13(v82, v3160 + 1 + 0, v84[1 + 2]));
							v76 = v76 + 1;
							v84 = v72[v76];
							do
								return;
							end
						end
					elseif (v85 <= (1624 - (118 + 1265))) then
						if (v85 == (1339 - (725 + 374))) then
							local v3186 = 0 + 0;
							local v3187;
							local v3188;
							while true do
								if (v3186 == 0) then
									v3187 = v84[2 + 0];
									v3188 = v82[v3187];
									v3186 = 1;
								end
								if (v3186 == (1999 - (1142 + 856))) then
									for v5721 = v3187 + 1 + 0, v84[3 - 0] do
										v7(v3188, v82[v5721]);
									end
									break;
								end
							end
						else
							local v3189;
							v82[v84[2 + 0]] = v84[3 + 0];
							v76 = v76 + (645 - (104 + 540));
							v84 = v72[v76];
							v82[v84[964 - (496 + 466)]] = v84[3];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[1 + 1]] = v84[1 + 2];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v3189 = v84[2];
							do
								return v82[v3189](v13(v82, v3189 + (725 - (657 + 67)), v84[14 - 11]));
							end
							v76 = v76 + (1747 - (127 + 1619));
							v84 = v72[v76];
							v3189 = v84[6 - 4];
							do
								return v13(v82, v3189, v77);
							end
						end
					elseif (v85 == (1432 - (1069 + 121))) then
						if (v82[v84[1 + 1]] == v82[v84[4]]) then
							v76 = v76 + 1 + 0;
						else
							v76 = v84[11 - 8];
						end
					else
						local v3199;
						v82[v84[2]] = v82[v84[7 - 4]][v84[1194 - (27 + 1163)]];
						v76 = v76 + (1 - 0);
						v84 = v72[v76];
						v82[v84[1161 - (371 + 788)]] = v84[3 + 0];
						v76 = v76 + (2 - 1);
						v84 = v72[v76];
						v3199 = v84[2 + 0];
						v82[v3199] = v82[v3199](v82[v3199 + 1]);
						v76 = v76 + (3 - 2);
						v84 = v72[v76];
						v82[v84[1 + 1]] = v82[v84[3]];
						v76 = v76 + (2 - 1);
						v84 = v72[v76];
						v82[v84[2]][v84[1 + 2]] = v84[433 - (139 + 290)];
						v76 = v76 + (1336 - (639 + 696));
						v84 = v72[v76];
						v82[v84[4 - 2]] = v84[5 - 2];
					end
				elseif (v85 <= 251) then
					if ((2465 < 3446) and (v85 <= (221 + 26))) then
						if ((449 < 2744) and (v85 <= (749 - (156 + 348)))) then
							if (v85 == (1134 - (488 + 402))) then
								do
									return;
								end
							else
								local v3213;
								local v3214;
								local v3213, v3215;
								local v3216;
								local v3217;
								v82[v84[2]] = v63[v84[3]];
								v76 = v76 + (203 - (186 + 16));
								v84 = v72[v76];
								v82[v84[2]] = v63[v84[326 - (119 + 204)]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v3217 = v84[2 - 0];
								v3216 = v82[v84[10 - 7]];
								v82[v3217 + 1 + 0] = v3216;
								v82[v3217] = v3216[v84[4]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v3217 = v84[2 + 0];
								v3213, v3215 = v75(v82[v3217](v82[v3217 + (1760 - (1709 + 50))]));
								v77 = (v3215 + v3217) - (1330 - (249 + 1080));
								v3214 = 0 + 0;
								for v3577 = v3217, v77 do
									local v3578 = 0;
									while true do
										if ((451 - (155 + 296)) == v3578) then
											v3214 = v3214 + 1 + 0;
											v82[v3577] = v3213[v3214];
											break;
										end
									end
								end
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v3217 = v84[3 - 1];
								v3213 = {v82[v3217](v13(v82, v3217 + 1, v77))};
								v3214 = 0 - 0;
								for v3579 = v3217, v84[3 + 1] do
									local v3580 = 0 - 0;
									while true do
										if ((0 + 0) == v3580) then
											v3214 = v3214 + 1 + 0;
											v82[v3579] = v3213[v3214];
											break;
										end
									end
								end
								v76 = v76 + 1;
								v84 = v72[v76];
								v76 = v84[3];
							end
						elseif (v85 == (559 - 313)) then
							v62[v84[3]] = v82[v84[1 + 1]];
						else
							local v3232;
							local v3233;
							local v3232, v3234;
							local v3235;
							local v3236;
							v82[v84[2]] = v63[v84[8 - 5]];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v82[v84[700 - (604 + 94)]] = v82[v84[1 + 2]][v84[1807 - (500 + 1303)]];
							v76 = v76 + (1521 - (916 + 604));
							v84 = v72[v76];
							v3236 = v84[1 + 1];
							v3235 = v82[v84[2 + 1]];
							v82[v3236 + (3 - 2)] = v3235;
							v82[v3236] = v3235[v84[3 + 1]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v3236 = v84[2 + 0];
							v3232, v3234 = v75(v82[v3236](v82[v3236 + (1476 - (754 + 721))]));
							v77 = (v3234 + v3236) - 1;
							v3233 = 506 - (181 + 325);
							for v3581 = v3236, v77 do
								v3233 = v3233 + (1 - 0);
								v82[v3581] = v3232[v3233];
							end
							v76 = v76 + 1;
							v84 = v72[v76];
							v3236 = v84[1 + 1];
							v3232 = {v82[v3236](v13(v82, v3236 + (2 - 1), v77))};
							v3233 = 0 - 0;
							for v3584 = v3236, v84[4 + 0] do
								local v3585 = 0 + 0;
								while true do
									if (v3585 == (0 + 0)) then
										v3233 = v3233 + (3 - 2);
										v82[v3584] = v3232[v3233];
										break;
									end
								end
							end
							v76 = v76 + 1;
							v84 = v72[v76];
							v76 = v84[6 - 3];
						end
					elseif ((v85 <= 249) or (2689 == 819)) then
						if (v85 == (1989 - (708 + 1033))) then
							local v3249;
							local v3250;
							v3250 = v84[1 + 1];
							v82[v3250](v13(v82, v3250 + 1 + 0, v84[3 - 0]));
							v76 = v76 + 1;
							v84 = v72[v76];
							v3250 = v84[1 + 1];
							v3249 = v82[v84[6 - 3]];
							v82[v3250 + 1] = v3249;
							v82[v3250] = v3249[v84[2 + 2]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[1659 - (505 + 1152)]] = v84[3 + 0];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2 + 0]] = v84[3];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v3250 = v84[2 - 0];
							v82[v3250] = v82[v3250](v13(v82, v3250 + (3 - 2), v84[3]));
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v3250 = v84[1525 - (53 + 1470)];
							v3249 = v82[v84[1007 - (482 + 522)]];
							v82[v3250 + (647 - (496 + 150))] = v3249;
							v82[v3250] = v3249[v84[4 - 0]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2]] = v84[88 - (32 + 53)];
						else
							v82[v84[1812 - (956 + 854)]] = v82[v84[3]][v84[1 + 3]];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v82[v84[1 + 1]] = v82[v84[8 - 5]][v84[1897 - (1192 + 701)]];
							v76 = v76 + (1622 - (326 + 1295));
							v84 = v72[v76];
							v82[v84[1814 - (1595 + 217)]] = v82[v84[3]][v84[4]];
							v76 = v76 + (217 - (93 + 123));
							v84 = v72[v76];
							v82[v84[1838 - (848 + 988)]] = v82[v84[1563 - (546 + 1014)]][v84[8 - 4]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2 + 0]][v84[77 - (53 + 21)]] = v82[v84[295 - (167 + 124)]];
							v76 = v76 + (181 - (4 + 176));
							v84 = v72[v76];
							v76 = v84[6 - 3];
						end
					elseif (v85 > 250) then
						local v3280;
						local v3281, v3282;
						local v3283;
						v82[v84[5 - 3]] = v62[v84[9 - 6]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[2]] = v82[v84[1 + 2]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[2 + 0]] = v63[v84[5 - 2]];
						v76 = v76 + (120 - (93 + 26));
						v84 = v72[v76];
						v82[v84[2 + 0]] = v82[v84[3 - 0]][v84[4]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[2 + 0]] = v84[1 + 2];
						v76 = v76 + (1655 - (220 + 1434));
						v84 = v72[v76];
						v82[v84[6 - 4]] = v84[5 - 2];
						v76 = v76 + (3 - 2);
						v84 = v72[v76];
						v82[v84[1604 - (906 + 696)]] = v84[6 - 3];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v3283 = v84[681 - (178 + 501)];
						v82[v3283] = v82[v3283](v13(v82, v3283 + (4 - 3), v84[3]));
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[1 + 1]] = v62[v84[1030 - (444 + 583)]];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[2 - 0]] = v82[v84[3 + 0]][v84[433 - (407 + 22)]];
						v76 = v76 + (1 - 0);
						v84 = v72[v76];
						v82[v84[1234 - (1139 + 93)]] = v82[v84[2 + 1]][v84[4]];
						v76 = v76 + (1345 - (237 + 1107));
						v84 = v72[v76];
						v82[v84[1 + 1]] = v82[v84[14 - (4 + 7)]][v84[15 - 11]];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[515 - (8 + 505)]] = v82[v84[3]] * v82[v84[3 + 1]];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[2 + 0]] = v82[v84[2 + 1]] / v84[4 + 0];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[937 - (662 + 273)]] = v82[v84[1 + 2]] + v82[v84[4 + 0]];
						v76 = v76 + (3 - 2);
						v84 = v72[v76];
						v82[v84[246 - (127 + 117)]] = v63[v84[3]];
						v76 = v76 + (208 - (105 + 102));
						v84 = v72[v76];
						v82[v84[1 + 1]] = v82[v84[7 - 4]][v84[1 + 3]];
						v76 = v76 + (4 - 3);
						v84 = v72[v76];
						v82[v84[2]] = v63[v84[9 - 6]];
						v76 = v76 + (747 - (588 + 158));
						v84 = v72[v76];
						v82[v84[2]] = v82[v84[1083 - (126 + 954)]][v84[12 - 8]];
						v76 = v76 + (344 - (52 + 291));
						v84 = v72[v76];
						v82[v84[2]] = v82[v84[281 - (76 + 202)]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v3283 = v84[2];
						v82[v3283] = v82[v3283](v82[v3283 + 1]);
						v76 = v76 + (847 - (504 + 342));
						v84 = v72[v76];
						v82[v84[2]] = v84[2 + 1];
						v76 = v76 + (2 - 1);
						v84 = v72[v76];
						v82[v84[2 + 0]] = v84[6 - 3];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v3283 = v84[482 - (387 + 93)];
						v3281, v3282 = v75(v82[v3283](v13(v82, v3283 + (1 - 0), v84[5 - 2])));
						v77 = (v3282 + v3283) - 1;
						v3280 = 0 + 0;
						for v3586 = v3283, v77 do
							local v3587 = 0;
							while true do
								if (v3587 == (0 - 0)) then
									v3280 = v3280 + 1;
									v82[v3586] = v3281[v3280];
									break;
								end
							end
						end
						v76 = v76 + 1;
						v84 = v72[v76];
						v3283 = v84[2];
						v82[v3283](v13(v82, v3283 + 1 + 0, v77));
						v76 = v76 + (940 - (36 + 903));
						v84 = v72[v76];
						v82[v84[2 - 0]] = v63[v84[1 + 2]];
						v76 = v76 + (263 - (220 + 42));
						v84 = v72[v76];
						v82[v84[7 - 5]] = v82[v84[3]][v84[1509 - (300 + 1205)]];
						v76 = v76 + (3 - 2);
						v84 = v72[v76];
						v82[v84[924 - (728 + 194)]]();
						v76 = v76 + (658 - (445 + 212));
						v84 = v72[v76];
						v82[v84[7 - 5]] = v62[v84[2 + 1]];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[2]] = v82[v84[3 + 0]];
						v76 = v76 + (1358 - (167 + 1190));
						v84 = v72[v76];
						v82[v84[646 - (315 + 329)]] = v63[v84[3]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[1 + 1]] = v82[v84[653 - (545 + 105)]][v84[4]];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[1 + 1]] = v84[1 + 2];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[4 - 2]] = v84[3];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[2 - 0]] = v84[6 - 3];
						v76 = v76 + 1;
						v84 = v72[v76];
						v3283 = v84[2];
						v82[v3283] = v82[v3283](v13(v82, v3283 + (1190 - (1044 + 145)), v84[3]));
						v76 = v76 + (2 - 1);
						v84 = v72[v76];
						v82[v84[1252 - (122 + 1128)]] = v62[v84[3]];
						v76 = v76 + (1816 - (371 + 1444));
						v84 = v72[v76];
						v82[v84[18 - (14 + 2)]] = v82[v84[1 + 2]][v84[4 + 0]];
						v76 = v76 + (1 - 0);
						v84 = v72[v76];
						v82[v84[2]] = v82[v84[4 - 1]][v84[4]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[3 - 1]] = v82[v84[10 - 7]][v84[3 + 1]];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[4 - 2]] = v82[v84[9 - 6]] * v82[v84[19 - 15]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[2]] = v82[v84[1 + 2]] / v84[4];
						v76 = v76 + (3 - 2);
						v84 = v72[v76];
						v82[v84[2 - 0]] = v82[v84[152 - (50 + 99)]] + v82[v84[443 - (123 + 316)]];
						v76 = v76 + (1 - 0);
						v84 = v72[v76];
						v82[v84[1584 - (1507 + 75)]] = v63[v84[597 - (145 + 449)]];
						v76 = v76 + (1112 - (241 + 870));
						v84 = v72[v76];
						v82[v84[2 + 0]] = v82[v84[8 - 5]][v84[4]];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[7 - 5]] = v63[v84[3]];
						v76 = v76 + (2 - 1);
						v84 = v72[v76];
						v82[v84[2]] = v82[v84[760 - (627 + 130)]][v84[149 - (82 + 63)]];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[2 + 0]] = v82[v84[3]];
						v76 = v76 + 1;
						v84 = v72[v76];
						v3283 = v84[1286 - (386 + 898)];
						v82[v3283] = v82[v3283](v82[v3283 + 1]);
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[6 - 4]] = v84[3 + 0];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[2]] = v84[972 - (659 + 310)];
						v76 = v76 + 1;
						v84 = v72[v76];
						v3283 = v84[2];
						v3281, v3282 = v75(v82[v3283](v13(v82, v3283 + 1 + 0, v84[606 - (364 + 239)])));
						v77 = (v3282 + v3283) - (1 + 0);
						v3280 = 0 - 0;
						for v3588 = v3283, v77 do
							v3280 = v3280 + 1;
							v82[v3588] = v3281[v3280];
						end
						v76 = v76 + (1 - 0);
						v84 = v72[v76];
						v3283 = v84[6 - 4];
						v82[v3283](v13(v82, v3283 + (194 - (30 + 163)), v77));
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[5 - 3]] = v84[3];
						v76 = v76 + (556 - (213 + 342));
						v84 = v72[v76];
						v76 = v84[8 - 5];
					else
						local v3343 = 1418 - (843 + 575);
						local v3344;
						local v3345;
						while true do
							if (v3343 == (702 - (347 + 355))) then
								v3344 = nil;
								v3345 = nil;
								v82[v84[5 - 3]] = v84[470 - (386 + 81)];
								v3343 = 1;
							end
							if (v3343 == (8 - 4)) then
								v82[v84[2]] = v82[v84[3]][v84[4]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v3343 = 3 + 2;
							end
							if ((1 + 0) == v3343) then
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v3345 = v84[1659 - (610 + 1047)];
								v3343 = 1 + 1;
							end
							if (v3343 == (566 - (304 + 259))) then
								v82[v84[5 - 3]] = v63[v84[968 - (306 + 659)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v3343 = 4;
							end
							if (v3343 == (1 + 5)) then
								v82[v3345] = v3344[v84[1743 - (315 + 1424)]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v3343 = 7;
							end
							if (v3343 == (593 - (27 + 561))) then
								v3345 = v84[1 + 1];
								v3344 = v82[v84[1930 - (1904 + 23)]];
								v82[v3345 + 1 + 0] = v3344;
								v3343 = 6;
							end
							if (v3343 == 2) then
								v82[v3345](v13(v82, v3345 + 1 + 0, v84[2001 - (1852 + 146)]));
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v3343 = 3;
							end
							if (((24 - 17) == v3343) or (2998 < 23)) then
								v3345 = v84[2 + 0];
								v82[v3345] = v82[v3345](v82[v3345 + 1]);
								break;
							end
						end
					end
				elseif ((v85 <= (441 - (18 + 168))) or (2704 < 224)) then
					if (v85 <= (158 + 95)) then
						if ((v85 == (381 - 129)) or (2547 < 2539)) then
							local v3346;
							v82[v84[3 - 1]] = v82[v84[11 - 8]][v84[4]];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v82[v84[640 - (399 + 239)]] = v62[v84[11 - 8]];
							v76 = v76 + (1409 - (779 + 629));
							v84 = v72[v76];
							v82[v84[1 + 1]] = v82[v84[3]][v84[3 + 1]];
							v76 = v76 + (1770 - (855 + 914));
							v84 = v72[v76];
							v82[v84[24 - (15 + 7)]] = v62[v84[3 + 0]];
							v76 = v76 + (1703 - (646 + 1056));
							v84 = v72[v76];
							v82[v84[2]] = v82[v84[1 + 2]] + v82[v84[3 + 1]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[3 - 1]] = v62[v84[1869 - (1443 + 423)]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[4 - 2]] = v82[v84[3]][v84[4 + 0]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2]] = v62[v84[7 - 4]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[2]] = v82[v84[1509 - (271 + 1235)]] * v84[2 + 2];
							v76 = v76 + (3 - 2);
							v84 = v72[v76];
							v82[v84[6 - 4]] = v82[v84[9 - 6]] - v82[v84[4]];
							v76 = v76 + (1045 - (463 + 581));
							v84 = v72[v76];
							v3346 = v84[1 + 1];
							v82[v3346] = v82[v3346](v13(v82, v3346 + (1176 - (599 + 576)), v84[1515 - (316 + 1196)]));
							v76 = v76 + (1304 - (970 + 333));
							v84 = v72[v76];
							v82[v84[1 + 1]][v84[2 + 1]] = v82[v84[4]];
							v76 = v76 + (962 - (538 + 423));
							v84 = v72[v76];
							v82[v84[1 + 1]] = v63[v84[13 - 10]];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v82[v84[2]] = v82[v84[1 + 2]][v84[4]];
							v76 = v76 + (1355 - (1061 + 293));
							v84 = v72[v76];
							v82[v84[531 - (153 + 376)]] = v62[v84[2 + 1]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[707 - (173 + 532)]] = v82[v84[5 - 2]][v84[4]];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v82[v84[4 - 2]] = v62[v84[2 + 1]];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v82[v84[7 - 5]] = v82[v84[2 + 1]] - v82[v84[1540 - (561 + 975)]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2]] = v62[v84[1 + 2]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[2]] = v82[v84[3]][v84[11 - 7]];
							v76 = v76 + 1 + 0;
							v84 = v72[v76];
							v82[v84[6 - 4]] = v62[v84[3 + 0]];
							v76 = v76 + (2 - 1);
							v84 = v72[v76];
							v82[v84[125 - (115 + 8)]] = v82[v84[1559 - (1476 + 80)]] * v84[4];
							v76 = v76 + (1 - 0);
							v84 = v72[v76];
							v82[v84[844 - (648 + 194)]] = v82[v84[3]] - v82[v84[259 - (111 + 144)]];
							v76 = v76 + 1;
							v84 = v72[v76];
							v3346 = v84[2 + 0];
							v82[v3346] = v82[v3346](v13(v82, v3346 + (1 - 0), v84[4 - 1]));
							v76 = v76 + 1;
							v84 = v72[v76];
							v82[v84[319 - (275 + 42)]][v84[185 - (104 + 78)]] = v82[v84[4]];
							v76 = v76 + (3 - 2);
							v84 = v72[v76];
							v82[v84[2]] = v84[3];
							v76 = v76 + 1;
							v84 = v72[v76];
							v76 = v84[7 - 4];
						else
							local v3381 = 0;
							while true do
								if ((v3381 == (1937 - (813 + 1123))) or (4948 < 284)) then
									v76 = v76 + 1 + 0;
									v84 = v72[v76];
									v63[v84[1 + 2]] = v82[v84[6 - 4]];
									v76 = v76 + 1 + 0;
									v3381 = 1795 - (144 + 1649);
								end
								if (v3381 == 3) then
									v76 = v84[554 - (125 + 426)];
									break;
								end
								if (v3381 == (0 - 0)) then
									v82[v84[84 - (51 + 31)]]();
									v76 = v76 + (3 - 2);
									v84 = v72[v76];
									v82[v84[2 + 0]] = v84[292 - (174 + 115)] ~= 0;
									v3381 = 1 + 0;
								end
								if ((v3381 == (1700 - (941 + 757))) or (2798 < 2791)) then
									v84 = v72[v76];
									v82[v84[1164 - (696 + 466)]] = v84[5 - 2];
									v76 = v76 + (1 - 0);
									v84 = v72[v76];
									v3381 = 4 - 1;
								end
							end
						end
					elseif ((2689 < 2698) and (v85 > (1605 - (165 + 1186)))) then
						local v3382;
						local v3383;
						local v3384;
						v3384 = v84[2 + 0];
						v3383 = v82[v84[14 - 11]];
						v82[v3384 + 1 + 0] = v3383;
						v82[v3384] = v3383[v84[4 + 0]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v3384 = v84[2 + 0];
						v82[v3384] = v82[v3384](v82[v3384 + 1]);
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v3384 = v84[2 + 0];
						v3383 = v82[v84[1040 - (853 + 184)]];
						v82[v3384 + 1 + 0] = v3383;
						v82[v3384] = v3383[v84[4]];
						v76 = v76 + (35 - (14 + 20));
						v84 = v72[v76];
						v82[v84[1 + 1]] = v84[769 - (35 + 731)];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[1 + 1]] = v82[v84[1 + 2]];
						v76 = v76 + 1;
						v84 = v72[v76];
						v3383 = v84[3 + 0];
						v3382 = v82[v3383];
						for v3591 = v3383 + 1, v84[4 + 0] do
							v3382 = v3382 .. v82[v3591];
						end
						v82[v84[2]] = v3382;
						v76 = v76 + 1;
						v84 = v72[v76];
						v3384 = v84[2];
						v82[v3384] = v82[v3384](v13(v82, v3384 + (1 - 0), v84[3]));
						v76 = v76 + 1;
						v84 = v72[v76];
						if v82[v84[3 - 1]] then
							v76 = v76 + 1 + 0;
						else
							v76 = v84[150 - (26 + 121)];
						end
					else
						local v3400;
						v82[v84[2]] = v82[v84[114 - (95 + 16)]][v84[4]];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[2]] = v84[9 - 6];
						v76 = v76 + (1 - 0);
						v84 = v72[v76];
						v82[v84[2]] = v84[554 - (423 + 128)];
						v76 = v76 + (1575 - (1331 + 243));
						v84 = v72[v76];
						v3400 = v84[2];
						v82[v3400] = v82[v3400](v13(v82, v3400 + (2 - 1), v84[7 - 4]));
						v76 = v76 + (1635 - (284 + 1350));
						v84 = v72[v76];
						v82[v84[1 + 1]][v84[31 - (10 + 18)]] = v82[v84[10 - 6]];
						v76 = v76 + (1308 - (73 + 1234));
						v84 = v72[v76];
						v82[v84[739 - (503 + 234)]] = v84[1904 - (425 + 1476)];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v76 = v84[5 - 2];
					end
				elseif (v85 <= (1313 - (856 + 200))) then
					if (v85 > (55 + 201)) then
						local v3413;
						local v3414, v3415;
						local v3416;
						v82[v84[1 + 1]] = v82[v84[3 + 0]][v84[4 + 0]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[1613 - (734 + 877)]]();
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[1483 - (514 + 967)]] = v62[v84[5 - 2]];
						v76 = v76 + (648 - (325 + 322));
						v84 = v72[v76];
						v82[v84[2 - 0]] = v82[v84[1833 - (1668 + 162)]];
						v76 = v76 + (2 - 1);
						v84 = v72[v76];
						v82[v84[234 - (43 + 189)]] = v63[v84[5 - 2]];
						v76 = v76 + (1659 - (694 + 964));
						v84 = v72[v76];
						v82[v84[3 - 1]] = v82[v84[3 - 0]][v84[6 - 2]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[2]] = v84[3];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[2]] = v84[3];
						v76 = v76 + (338 - (57 + 280));
						v84 = v72[v76];
						v82[v84[2]] = v62[v84[1957 - (414 + 1540)]];
						v76 = v76 + (901 - (561 + 339));
						v84 = v72[v76];
						v82[v84[1 + 1]] = v82[v84[3 + 0]][v84[4]];
						v76 = v76 + (1551 - (1342 + 208));
						v84 = v72[v76];
						v82[v84[2 - 0]] = v82[v84[10 - 7]][v84[4 + 0]];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[6 - 4]] = v82[v84[1849 - (1139 + 707)]] / v84[2 + 2];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v3416 = v84[2];
						v82[v3416] = v82[v3416](v13(v82, v3416 + 1, v84[543 - (335 + 205)]));
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[2]] = v63[v84[4 - 1]];
						v76 = v76 + (2 - 1);
						v84 = v72[v76];
						v82[v84[1 + 1]] = v82[v84[7 - 4]][v84[1066 - (622 + 440)]];
						v76 = v76 + (1 - 0);
						v84 = v72[v76];
						v82[v84[2]] = v63[v84[755 - (672 + 80)]];
						v76 = v76 + (1127 - (601 + 525));
						v84 = v72[v76];
						v82[v84[1820 - (1515 + 303)]] = v82[v84[3]][v84[4]];
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v82[v84[2 - 0]] = v84[8 - 5];
						v76 = v76 + 1;
						v84 = v72[v76];
						v3416 = v84[2 + 0];
						v82[v3416] = v82[v3416](v82[v3416 + (963 - (144 + 818))]);
						v76 = v76 + (28 - (5 + 22));
						v84 = v72[v76];
						v82[v84[863 - (446 + 415)]] = v84[216 - (204 + 9)];
						v76 = v76 + (1259 - (479 + 779));
						v84 = v72[v76];
						v82[v84[4 - 2]] = v84[118 - (61 + 54)];
						v76 = v76 + 1;
						v84 = v72[v76];
						v3416 = v84[1807 - (1235 + 570)];
						v3414, v3415 = v75(v82[v3416](v13(v82, v3416 + (969 - (217 + 751)), v84[3 + 0])));
						v77 = (v3415 + v3416) - (1 + 0);
						v3413 = 110 - (94 + 16);
						for v3592 = v3416, v77 do
							v3413 = v3413 + (3 - 2);
							v82[v3592] = v3414[v3413];
						end
						v76 = v76 + 1 + 0;
						v84 = v72[v76];
						v3416 = v84[2];
						v82[v3416](v13(v82, v3416 + 1 + 0, v77));
						v76 = v76 + (1546 - (1188 + 357));
						v84 = v72[v76];
						v82[v84[811 - (580 + 229)]] = v63[v84[513 - (82 + 428)]];
						v76 = v76 + (3 - 2);
						v84 = v72[v76];
						v82[v84[2]] = v82[v84[499 - (259 + 237)]][v84[14 - 10]];
						v76 = v76 + 1;
						v84 = v72[v76];
						v82[v84[1358 - (215 + 1141)]]();
						v76 = v76 + (1 - 0);
						v84 = v72[v76];
						v82[v84[672 - (405 + 265)]] = v84[3];
					else
						local v3452 = 0;
						local v3453;
						local v3454;
						local v3455;
						local v3456;
						while true do
							if (10 == v3452) then
								v84 = v72[v76];
								v82[v84[1985 - (1136 + 847)]] = v84[1737 - (230 + 1504)];
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v82[v84[2]] = v84[1885 - (913 + 969)];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[3 - 1]] = v84[3];
								v76 = v76 + 1;
								v84 = v72[v76];
								v3452 = 11;
							end
							if (v3452 == (3 + 2)) then
								v3456 = v84[2];
								v3454, v3455 = v75(v82[v3456](v13(v82, v3456 + (1394 - (1277 + 116)), v84[1190 - (1178 + 9)])));
								v77 = (v3455 + v3456) - (1 + 0);
								v3453 = 0 - 0;
								for v5730 = v3456, v77 do
									local v5731 = 1840 - (1018 + 822);
									while true do
										if ((0 - 0) == v5731) then
											v3453 = v3453 + 1 + 0;
											v82[v5730] = v3454[v3453];
											break;
										end
									end
								end
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v3456 = v84[2 + 0];
								v82[v3456](v13(v82, v3456 + 1 + 0, v77));
								v76 = v76 + (382 - (111 + 270));
								v3452 = 1202 - (1082 + 114);
							end
							if (v3452 == (1 + 0)) then
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[497 - (257 + 238)]] = v84[3];
								v76 = v76 + (1855 - (831 + 1023));
								v84 = v72[v76];
								v82[v84[123 - (6 + 115)]] = v84[4 - 1];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[7 - 5]] = v84[2 + 1];
								v76 = v76 + 1;
								v3452 = 1 + 1;
							end
							if ((1337 == 1337) and (v3452 == (7 - 4))) then
								v84 = v72[v76];
								v82[v84[4 - 2]] = v63[v84[3]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1202 - (608 + 592)]] = v82[v84[6 - 3]][v84[3 + 1]];
								v76 = v76 + (1942 - (24 + 1917));
								v84 = v72[v76];
								v82[v84[4 - 2]] = v84[3];
								v76 = v76 + (1526 - (521 + 1004));
								v84 = v72[v76];
								v3452 = 5 - 1;
							end
							if (v3452 == (7 + 1)) then
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v84[297 - (87 + 207)];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[6 - 4]] = v84[1598 - (625 + 970)];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[351 - (122 + 227)]] = v84[1 + 2];
								v76 = v76 + (1116 - (706 + 409));
								v3452 = 9;
							end
							if ((4741 == 4741) and (v3452 == (7 + 6))) then
								v82[v84[4 - 2]] = v84[2 + 1];
								break;
							end
							if (v3452 == (8 - 4)) then
								v3456 = v84[448 - (433 + 13)];
								v82[v3456] = v82[v3456](v82[v3456 + 1 + 0]);
								v76 = v76 + (982 - (824 + 157));
								v84 = v72[v76];
								v82[v84[362 - (120 + 240)]] = v84[1 + 2];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v84[3];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v3452 = 5;
							end
							if (v3452 == (1038 - (291 + 741))) then
								v84 = v72[v76];
								v82[v84[1 + 1]] = v63[v84[1 + 2]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[1494 - (810 + 682)]] = v82[v84[3]][v84[497 - (16 + 477)]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[2 - 0]]();
								v76 = v76 + (1367 - (658 + 708));
								v84 = v72[v76];
								v3452 = 3 + 4;
							end
							if ((v3452 == (2 - 0)) or (1650 == 2127)) then
								v84 = v72[v76];
								v3456 = v84[2 + 0];
								v82[v3456] = v82[v3456](v13(v82, v3456 + (648 - (483 + 164)), v84[7 - 4]));
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[550 - (151 + 397)]] = v63[v84[8 - 5]];
								v76 = v76 + (1224 - (1005 + 218));
								v84 = v72[v76];
								v82[v84[657 - (294 + 361)]] = v82[v84[1063 - (150 + 910)]][v84[2 + 2]];
								v76 = v76 + 1 + 0;
								v3452 = 1 + 2;
							end
							if ((2901 == 2901) and (v3452 == (0 - 0))) then
								v3453 = nil;
								v3454, v3455 = nil;
								v3456 = nil;
								v82[v84[2 + 0]] = v82[v84[9 - 6]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2 + 0]] = v63[v84[1803 - (756 + 1044)]];
								v76 = v76 + (831 - (738 + 92));
								v84 = v72[v76];
								v82[v84[5 - 3]] = v82[v84[1415 - (569 + 843)]][v84[1432 - (262 + 1166)]];
								v3452 = 1;
							end
							if (v3452 == (660 - (410 + 241))) then
								v84 = v72[v76];
								v3456 = v84[1186 - (388 + 796)];
								v82[v3456] = v82[v3456](v13(v82, v3456 + (1009 - (534 + 474)), v84[2 + 1]));
								v76 = v76 + (1100 - (642 + 457));
								v84 = v72[v76];
								v82[v84[3 - 1]] = v63[v84[3]];
								v76 = v76 + (1477 - (384 + 1092));
								v84 = v72[v76];
								v82[v84[1731 - (1190 + 539)]] = v82[v84[756 - (91 + 662)]][v84[3 + 1]];
								v76 = v76 + 1;
								v3452 = 10;
							end
							if ((v3452 == 12) or (229 == 4371)) then
								v84 = v72[v76];
								v82[v84[7 - 5]] = v63[v84[1050 - (116 + 931)]];
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[1 + 2]][v84[4]];
								v76 = v76 + 1;
								v84 = v72[v76];
								v82[v84[1 + 1]]();
								v76 = v76 + (3 - 2);
								v84 = v72[v76];
								v3452 = 13;
							end
							if ((19 - 12) == v3452) then
								v82[v84[2]] = v62[v84[180 - (18 + 159)]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[2 - 0]] = v82[v84[7 - 4]];
								v76 = v76 + (1 - 0);
								v84 = v72[v76];
								v82[v84[2]] = v63[v84[3]];
								v76 = v76 + (2 - 1);
								v84 = v72[v76];
								v82[v84[2]] = v82[v84[322 - (111 + 208)]][v84[4]];
								v3452 = 8;
							end
							if ((1825 < 2147) and (v3452 == 11)) then
								v3456 = v84[2 + 0];
								v3454, v3455 = v75(v82[v3456](v13(v82, v3456 + (593 - (364 + 228)), v84[6 - 3])));
								v77 = (v3455 + v3456) - (1 - 0);
								v3453 = 0;
								for v5732 = v3456, v77 do
									v3453 = v3453 + 1 + 0;
									v82[v5732] = v3454[v3453];
								end
								v76 = v76 + 1 + 0;
								v84 = v72[v76];
								v3456 = v84[2];
								v82[v3456](v13(v82, v3456 + 1, v77));
								v76 = v76 + 1 + 0;
								v3452 = 17 - 5;
							end
						end
					end
				elseif (v85 <= (197 + 61)) then
					local v3457;
					v82[v84[379 - (121 + 256)]] = v84[12 - 9];
					v76 = v76 + (2 - 1);
					v84 = v72[v76];
					v82[v84[1 + 1]] = v84[2 + 1];
					v76 = v76 + 1 + 0;
					v84 = v72[v76];
					v82[v84[1760 - (549 + 1209)]] = v84[3 - 0];
					v76 = v76 + 1;
					v84 = v72[v76];
					v3457 = v84[2];
					do
						return v82[v3457](v13(v82, v3457 + 1, v84[3 + 0]));
					end
					v76 = v76 + (1382 - (643 + 738));
					v84 = v72[v76];
					v3457 = v84[2 + 0];
					do
						return v13(v82, v3457, v77);
					end
				elseif (v85 == (614 - 355)) then
					local v3719;
					local v3720, v3721;
					local v3722;
					v82[v84[4 - 2]] = v82[v84[3]];
					v76 = v76 + 1 + 0;
					v84 = v72[v76];
					v82[v84[3 - 1]] = v63[v84[5 - 2]];
					v76 = v76 + (1108 - (1038 + 69));
					v84 = v72[v76];
					v82[v84[338 - (157 + 179)]] = v82[v84[1133 - (204 + 926)]][v84[1961 - (184 + 1773)]];
					v76 = v76 + (720 - (111 + 608));
					v84 = v72[v76];
					v82[v84[2]] = v84[2 + 1];
					v76 = v76 + 1;
					v84 = v72[v76];
					v82[v84[7 - 5]] = v84[3];
					v76 = v76 + 1 + 0;
					v84 = v72[v76];
					v82[v84[2]] = v62[v84[2 + 1]];
					v76 = v76 + 1 + 0;
					v84 = v72[v76];
					v82[v84[8 - 6]] = v82[v84[6 - 3]][v84[12 - 8]];
					v76 = v76 + 1 + 0;
					v84 = v72[v76];
					v82[v84[2]] = v82[v84[1671 - (1328 + 340)]][v84[4]];
					v76 = v76 + (2 - 1);
					v84 = v72[v76];
					v82[v84[2 + 0]] = v82[v84[6 - 3]] / v84[4];
					v76 = v76 + 1 + 0;
					v84 = v72[v76];
					v3722 = v84[1016 - (782 + 232)];
					v82[v3722] = v82[v3722](v13(v82, v3722 + 1 + 0, v84[1306 - (397 + 906)]));
					v76 = v76 + 1;
					v84 = v72[v76];
					v82[v84[602 - (360 + 240)]] = v63[v84[3 - 0]];
					v76 = v76 + 1 + 0;
					v84 = v72[v76];
					v82[v84[24 - (13 + 9)]] = v82[v84[3]][v84[6 - 2]];
					v76 = v76 + (2 - 1);
					v84 = v72[v76];
					v82[v84[2]] = v63[v84[3]];
					v76 = v76 + (1575 - (272 + 1302));
					v84 = v72[v76];
					v82[v84[8 - 6]] = v82[v84[8 - 5]][v84[11 - 7]];
					v76 = v76 + 1;
					v84 = v72[v76];
					v82[v84[2]] = v84[1 + 2];
					v76 = v76 + 1;
					v84 = v72[v76];
					v3722 = v84[3 - 1];
					v82[v3722] = v82[v3722](v82[v3722 + (22 - (8 + 13))]);
					v76 = v76 + 1 + 0;
					v84 = v72[v76];
					v82[v84[2]] = v84[3];
					v76 = v76 + (3 - 2);
					v84 = v72[v76];
					v82[v84[2 + 0]] = v84[91 - (28 + 60)];
					v76 = v76 + 1 + 0;
					v84 = v72[v76];
					v3722 = v84[1 + 1];
					v3720, v3721 = v75(v82[v3722](v13(v82, v3722 + (954 - (133 + 820)), v84[1 + 2])));
					v77 = (v3721 + v3722) - (98 - (9 + 88));
					v3719 = 0;
					for v5629 = v3722, v77 do
						v3719 = v3719 + (251 - (98 + 152));
						v82[v5629] = v3720[v3719];
					end
					v76 = v76 + 1;
					v84 = v72[v76];
					v3722 = v84[2 + 0];
					v82[v3722](v13(v82, v3722 + (2 - 1), v77));
					v76 = v76 + (4 - 3);
					v84 = v72[v76];
					v82[v84[2]] = v63[v84[3]];
					v76 = v76 + (1 - 0);
					v84 = v72[v76];
					v82[v84[2]] = v82[v84[1 + 2]][v84[5 - 1]];
					v76 = v76 + (289 - (44 + 244));
					v84 = v72[v76];
					v82[v84[2]]();
					v76 = v76 + (1390 - (207 + 1182));
					v84 = v72[v76];
					v82[v84[2 + 0]] = v62[v84[919 - (904 + 12)]];
					v76 = v76 + (1 - 0);
					v84 = v72[v76];
					v82[v84[2 + 0]] = v82[v84[11 - 8]];
					v76 = v76 + (254 - (241 + 12));
					v84 = v72[v76];
					v82[v84[2]] = v63[v84[3]];
					v76 = v76 + 1 + 0;
					v84 = v72[v76];
					v82[v84[2]] = v82[v84[3]][v84[4]];
					v76 = v76 + (1 - 0);
					v84 = v72[v76];
					v82[v84[2]] = v84[1257 - (1187 + 67)];
					v76 = v76 + 1;
					v84 = v72[v76];
					v82[v84[274 - (56 + 216)]] = v84[4 - 1];
					v76 = v76 + (1480 - (1194 + 285));
					v84 = v72[v76];
					v82[v84[2]] = v62[v84[1703 - (401 + 1299)]];
					v76 = v76 + (1556 - (1522 + 33));
					v84 = v72[v76];
					v82[v84[4 - 2]] = v82[v84[3 - 0]][v84[1826 - (1108 + 714)]];
					v76 = v76 + (675 - (357 + 317));
					v84 = v72[v76];
					v82[v84[2 + 0]] = v82[v84[3]][v84[2 + 2]];
					v76 = v76 + (468 - (73 + 394));
					v84 = v72[v76];
					v82[v84[6 - 4]] = -v82[v84[1 + 2]];
					v76 = v76 + 1 + 0;
					v84 = v72[v76];
					v82[v84[253 - (247 + 4)]] = v82[v84[631 - (435 + 193)]] / v84[477 - (428 + 45)];
					v76 = v76 + (1221 - (158 + 1062));
					v84 = v72[v76];
					v3722 = v84[1379 - (858 + 519)];
					v82[v3722] = v82[v3722](v13(v82, v3722 + (1 - 0), v84[3]));
					v76 = v76 + (1458 - (711 + 746));
					v84 = v72[v76];
					v82[v84[1 + 1]] = v63[v84[1 + 2]];
					v76 = v76 + (678 - (229 + 448));
					v84 = v72[v76];
					v82[v84[743 - (357 + 384)]] = v82[v84[3]][v84[1 + 3]];
					v76 = v76 + (1581 - (984 + 596));
					v84 = v72[v76];
					v82[v84[2]] = v84[5 - 2];
					v76 = v76 + 1;
					v84 = v72[v76];
					v82[v84[923 - (465 + 456)]] = v84[3 + 0];
					v76 = v76 + (2 - 1);
					v84 = v72[v76];
					v82[v84[2]] = v84[2 + 1];
					v76 = v76 + 1;
					v84 = v72[v76];
					v3722 = v84[4 - 2];
					v3720, v3721 = v75(v82[v3722](v13(v82, v3722 + 1, v84[3 + 0])));
					v77 = (v3721 + v3722) - 1;
					v3719 = 0 - 0;
					for v5632 = v3722, v77 do
						local v5633 = 0 - 0;
						while true do
							if (v5633 == (0 + 0)) then
								v3719 = v3719 + 1 + 0;
								v82[v5632] = v3720[v3719];
								break;
							end
						end
					end
					v76 = v76 + (217 - (172 + 44));
					v84 = v72[v76];
					v3722 = v84[1 + 1];
					v82[v3722](v13(v82, v3722 + 1 + 0, v77));
					v76 = v76 + (380 - (170 + 209));
					v84 = v72[v76];
					v82[v84[2]] = v84[6 - 3];
				else
					local v3774;
					local v3775;
					v82[v84[2]] = v82[v84[7 - 4]][v84[3 + 1]];
					v76 = v76 + (957 - (244 + 712));
					v84 = v72[v76];
					v82[v84[2 + 0]] = v82[v84[3 + 0]][v84[10 - 6]];
					v76 = v76 + (2 - 1);
					v84 = v72[v76];
					v82[v84[2]] = v82[v84[1 + 2]][v84[3 + 1]];
					v76 = v76 + 1;
					v84 = v72[v76];
					v82[v84[2]] = v82[v84[11 - 8]][v84[1250 - (769 + 477)]];
					v76 = v76 + (1 - 0);
					v84 = v72[v76];
					v82[v84[2 + 0]] = v63[v84[7 - 4]];
					v76 = v76 + (1 - 0);
					v84 = v72[v76];
					v3775 = v84[2];
					v3774 = v82[v84[3 + 0]];
					v82[v3775 + 1 + 0] = v3774;
					v82[v3775] = v3774[v84[8 - 4]];
					v76 = v76 + 1;
					v84 = v72[v76];
					v82[v84[3 - 1]] = v84[3];
					v76 = v76 + 1;
					v84 = v72[v76];
					v3775 = v84[6 - 4];
					v82[v3775] = v82[v3775](v13(v82, v3775 + 1 + 0, v84[10 - 7]));
					v76 = v76 + (1 - 0);
					v84 = v72[v76];
					v82[v84[640 - (526 + 112)]] = v82[v84[4 - 1]][v84[5 - 1]];
					v76 = v76 + (659 - (318 + 340));
					v84 = v72[v76];
					v82[v84[625 - (274 + 349)]] = v82[v84[6 - 3]][v84[5 - 1]];
					v76 = v76 + (2 - 1);
					v84 = v72[v76];
					v82[v84[1 + 1]] = v82[v84[3 - 0]][v84[1456 - (1429 + 23)]];
					v76 = v76 + (3 - 2);
					v84 = v72[v76];
					v82[v84[1 + 1]] = v82[v84[3]][v84[4 + 0]];
					v76 = v76 + (1 - 0);
					v84 = v72[v76];
					v82[v84[1 + 1]] = v82[v84[4 - 1]][v84[1510 - (1140 + 366)]];
					v76 = v76 + 1;
					v84 = v72[v76];
					v82[v84[2]][v84[4 - 1]] = v82[v84[2 + 2]];
					v76 = v76 + 1 + 0;
					v84 = v72[v76];
					v76 = v84[8 - 5];
				end
				v76 = v76 + 1;
			end
		end;
	end
	return v29(v28(), {}, v17)(...);
end
return v15("LOL!", v9(), ...);
